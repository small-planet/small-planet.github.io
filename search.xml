<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IT资源学习</title>
    <url>/posts/93b7.html</url>
    <content><![CDATA[<p>c++培训班：</p>
<span id="more"></span>

<p>奇牛编程</p>
<p>零声教育</p>
<p>付费网站：</p>
<p>天下无鱼（VIP:60 SVIP:180）</p>
<p>小猿1024（永久会员188）</p>
<p>IT独角兽（永久188）</p>
]]></content>
  </entry>
  <entry>
    <title>操作系统</title>
    <url>/posts/437.html</url>
    <content><![CDATA[<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230904181505.png"></p>
<span id="more"></span>
]]></content>
  </entry>
  <entry>
    <title>网络</title>
    <url>/posts/9e95.html</url>
    <content><![CDATA[<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230922192641.png"></p>
<span id="more"></span>

<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230922204553.png"></p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230922204711.png"></p>
<p>成长之路：</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230901202029.png">OSI七层参考模型以及TCP&#x2F;IP四层模型：</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230901203021.png"></p>
<p>应用层、运输层、网络层、传输层<img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230902144500.png"></p>
<p>路由器：<br><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230902094747.png">TCP报文：</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230902144214.png">TCP三次握手：</p>
<p>主要用到 Seq、Ack以及Control三个字段，seq表示自身的第几包数据，ack是确认收到了对方第ack-1包数据并且请求第ack包数据</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230902145443.png">TCP四次挥手：</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230902150022.png"></p>
<p>TCP滑动窗口机制：</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230902150620.png"></p>
<p>IP协议：</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230904182708.png"></p>
]]></content>
  </entry>
  <entry>
    <title>BootLoader</title>
    <url>/posts/d017.html</url>
    <content><![CDATA[<p>指令的最低位为1：Thumb指令集	  STM32是CM3架构，使用的是这类指令集</p>
<span id="more"></span>

<p>指令的最低位为0：ARM指令集</p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
  </entry>
  <entry>
    <title>W5500网卡做HTTP服务器</title>
    <url>/posts/edf1.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
  </entry>
  <entry>
    <title>传感器</title>
    <url>/posts/3ae2.html</url>
    <content><![CDATA[<p>1、室内定位 UWB 定位：Nooploop</p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
  </entry>
  <entry>
    <title>c++笔记</title>
    <url>/posts/4432.html</url>
    <content><![CDATA[<h1 id="获取结构体成员"><a href="#获取结构体成员" class="headerlink" title="获取结构体成员"></a>获取结构体成员</h1><span id="more"></span>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> offsetof(TYPE, MEMBER) ((size_t) &amp; ((TYPE *)0)-&gt;MEMBER)	<span class="comment">//TYPE结构体成员MEMBER的偏移量</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//网上出现的,好像是在Linux内核中经常出现</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Get offset of a member variable.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param[in]   type     the type of the struct this is embedded in.</span></span><br><span class="line"><span class="comment"> * @param[in]   member   the name of the variable within the struct.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> aos_offsetof(type, member)   ((size_t)&amp;(((type *)0)-&gt;member))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Get the struct for this entry.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param[in]   ptr     the list head to take the element from.</span></span><br><span class="line"><span class="comment"> * @param[in]   type    the type of the struct this is embedded in.</span></span><br><span class="line"><span class="comment"> * @param[in]   member  the name of the variable within the struct.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> aos_container_of(ptr, type, member) \</span></span><br><span class="line"><span class="meta">    ((type *) ((char *) (ptr) - aos_offsetof(type, member)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	发现一种好玩的写法输出结构体成员，适合于结构体内相同的类型</span></span><br><span class="line"><span class="comment">	要把结构体首地址先转为长整型（地址是64位），然后再加成员偏移量</span></span><br><span class="line"><span class="comment">	如果直接首地址+i，其实是加sizeof(结构体)*i的地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">&#125; stru1;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> a;</span><br><span class="line">    <span class="type">char</span> b;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">&#125; stru2;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    stru1 st1&#123;<span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    stru2 st2&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(<span class="type">int</span> *)((<span class="type">long</span> <span class="type">long</span> <span class="type">int</span>)&amp;st1 + <span class="number">4</span> * i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, *(<span class="type">char</span> *)((<span class="type">long</span> <span class="type">long</span> <span class="type">int</span>)&amp;st2 + i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>,&amp;st1,&amp;st1+<span class="number">1</span>,&amp;st1+<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	想要占位符是可变的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Pi is: %.*f\n&quot;</span>, N_real, digit);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%*d&quot;</span>,num,num);</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	带整数和小数加起来的精度（不带小数点）</span></span><br><span class="line"><span class="comment">	#include &lt;iomanip&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="type">double</span> dou = <span class="number">15.2546</span>;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">3</span>)&lt;&lt;dou&lt;&lt;endl;	<span class="comment">//15.3</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	保留小数点后的精度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="type">double</span> dou = <span class="number">15.2446</span>;</span><br><span class="line">    cout&lt;&lt;fixed&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">3</span>)&lt;&lt;dou&lt;&lt;endl;	<span class="comment">//15.245</span></span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> val = <span class="number">15.2654</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;默认输出:&quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">    cout.<span class="built_in">precision</span>(<span class="number">3</span>); <span class="comment">// 设置输出精度,包括整数部分加小数部分的</span></span><br><span class="line">    cout &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">    cout.<span class="built_in">flags</span>(cout.fixed); <span class="comment">// 设置输出格式为固定小数点</span></span><br><span class="line">    cout &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">    <span class="comment">/* 恢复默认格式,结果是只取消cout.fixed，并没有取消precision(3) */</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; defaultfloat; // c++11</span></span><br><span class="line">    cout &lt;&lt; defaultfloat;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;清楚设置格式后的输出（1）:&quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">    cout.<span class="built_in">unsetf</span>(cout.fixed); <span class="comment">// c++11以前的写法</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;清楚设置格式后的输出（2):&quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<h1 id="大小端测试"><a href="#大小端测试" class="headerlink" title="大小端测试"></a>大小端测试</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> c = (*(<span class="type">char</span> *)&amp;i);</span><br><span class="line"><span class="comment">//char c = (char)i; //简写</span></span><br><span class="line"><span class="keyword">if</span> (c)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;小端\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;大端\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buff[<span class="number">16</span>] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>&#125;;</span><br><span class="line"><span class="type">char</span> val = <span class="number">0x01</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    buff[i] = val++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> *buff1 = (<span class="type">int</span> *)buff;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0x%x\n&quot;</span>, buff1[i]);</span><br></pre></td></tr></table></figure>

<h1 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy"></a>memcpy</h1><p>要考虑内存重叠的情况</p>
<ol>
<li>什么时候从前到后拷贝	dst&lt;&#x3D;src || dst&gt;&#x3D;src+len</li>
<li>什么时候从后到前拷贝</li>
</ol>
<h1 id="预编译指令"><a href="#预编译指令" class="headerlink" title="预编译指令"></a>预编译指令</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定程序运行时编码格式,只在vsstudio下有用</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> execution_character_set(<span class="string">&quot;gbk&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> execution_character_set(<span class="string">&quot;utf-8&quot;</span>) </span></span><br></pre></td></tr></table></figure>

<h1 id="输入有误判断"><a href="#输入有误判断" class="headerlink" title="输入有误判断"></a>输入有误判断</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入一个整数:&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"><span class="keyword">while</span> (cin.<span class="built_in">fail</span>())</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入整数:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin.<span class="built_in">clear</span>();    <span class="comment">//清除cin错误状态</span></span><br><span class="line">    cin.<span class="built_in">sync</span>();     <span class="comment">//清除cin缓冲区,不能在vs中使用</span></span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="程序路径"><a href="#程序路径" class="headerlink" title="程序路径"></a>程序路径</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这种方法获取到的运行程序所在的路径</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;direct.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> __APPLE__ || __linux__</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> runPath[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">getcwd</span>(runPath, <span class="built_in">sizeof</span>(runPath));</span><br><span class="line">	<span class="comment">/*GetCurrentDirectory只是返回操作系统的当前目录，并不一定返回你的应用程序的目录。比如你在应用程序中调用了打开文件对话框，你选择了一个文件，那么，这个文件	    所在的目录就成了操作系统的当前目录了。因此，千万不要用这个函数作为获取应用程序目录的手段。*/</span></span><br><span class="line">	<span class="comment">//GetCurrentDirectory();</span></span><br><span class="line">    cout &lt;&lt; runPath &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><p>&#x9;在使用rb+的时候可读可写，写的时候还能用fseek重新定位文件偏移值，不会清空文件，但是当文件不存在的时候不能创建</p>
<p>&#x9;在使用w的时候，文件不存在的时候能创建，存在的时候会清空文件，能用fseek重新定位文件偏移值</p>
<p>&#x9;在使用a的时候，写文件只能在末尾继续写，使用fseek写的时候无效，读的时候才有效</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>c++友元</title>
    <url>/posts/933e.html</url>
    <content><![CDATA[<p>一、友元知识点</p>
<span id="more"></span>

<p>1.友元函数</p>
<pre><code>是一种定义在类外部的普通函数，需要在类体内进行说明，为了和该类的成员函数加以区别，在说明时前面加以关键字friend。友元不是成员函数，但是他能够访问类中的私有成员。友元的作用在于提高程序的运行效率，但是，他破坏了类的封装性和隐藏性，使得非成员函数能够访问类的私有成员。
</code></pre>
<p>（1）友元函数声明</p>
<pre><code>friend 函数原型

说明，友元函数不是类的成员函数，不能在类内部实现
</code></pre>
<p>（2）友元成员函数</p>
<pre><code>A类的成员函数作为B类的友元函数，必须先定义A类，而不仅仅是声明它

        实现方法

            1，在A类使用前先声明B类

            2，在A类中只做函数声明

            3，在B类实现之后，在外部实现B类中需要的A类的函数

友元函数的重载，必须一一声明
</code></pre>
<ol start="2">
<li><p>友元类</p>
<p> 类A作为类B的友元时，类A称为友元类，A中的所有成员函数都是B的友元函数，都可以访问B中的所有成员，A可以在B的public部分或private部分进行声明，friend  类名。</p>
<p> 特点单向、不具备传递性、不能被继承</p>
<p> (1) 友元关系不能被继承。 (2) 友元关系是单向的，不具有交换性。若类B是类A的友元，类A不一定是类B的友元，要看在类中是否有相应的声明。 (3) 友元关系不具有传递性。若类B是类A的友元，类C是B的友元，类C不一定是类A的友元，同样要看类中是否有相应的申明。</p>
</li>
</ol>
<p>二、例程</p>
<p>1、普通函数作为友元函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">computer</span>(<span class="type">int</span> x, <span class="type">int</span> y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;price = x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;weight = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">getinfo</span><span class="params">(computer&amp; s)</span></span>;   <span class="comment">//可以不用先声明</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getinfo</span><span class="params">(computer&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; s.weight &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s.price &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">computer <span class="title">com1</span><span class="params">(<span class="number">2000</span>, <span class="number">100</span>)</span></span>;</span><br><span class="line">    <span class="built_in">getinfo</span>(com1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、友元成员函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类的声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">computer</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getinfo</span><span class="params">(computer&amp; s)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">computer</span>(<span class="type">int</span> x, <span class="type">int</span> y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;price = x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;weight = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//声明友元函数--友元函数不是类的成员函数，但是可以访问类里边的私有成员</span></span><br><span class="line">    <span class="comment">//将A类的成员函数作为B类的友元函数，一定要先定义A类</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">A::getinfo</span><span class="params">(computer&amp; s)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">A::getinfo</span><span class="params">(computer&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; s.weight &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s.price &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">computer <span class="title">com1</span><span class="params">(<span class="number">2000</span>, <span class="number">100</span>)</span></span>;</span><br><span class="line">    A a;</span><br><span class="line">    a.<span class="built_in">getinfo</span>(com1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、友元类</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> <span class="comment">//(B)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Point</span>(<span class="type">double</span> xx, <span class="type">double</span> yy) &#123; x = xx; y = yy; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Getxy</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">double</span> <span class="title">Distance</span><span class="params">(Point&amp; a, Point&amp; b)</span></span>; <span class="comment">//类Point的友元函数 </span></span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">You</span>; <span class="comment">//类Point的友元类</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">You</span>  <span class="comment">//(A)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">Multi</span><span class="params">(Point&amp; a)</span> </span>&#123; <span class="keyword">return</span> a.x * a.y + <span class="number">1</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Point::Getxy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Distance</span><span class="params">(Point&amp; a, Point&amp; b)</span> <span class="comment">//类Point的友元函数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">double</span> dx = a.x - b.x;</span><br><span class="line">	<span class="type">double</span> dy = a.y - b.y;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">sqrt</span>(dx * dx + dy * dy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">3.0</span>, <span class="number">4.0</span>)</span>, <span class="title">p2</span><span class="params">(<span class="number">6.0</span>, <span class="number">8.0</span>)</span></span>;</span><br><span class="line">	p<span class="number">1.</span><span class="built_in">Getxy</span>();</span><br><span class="line">	p<span class="number">2.</span><span class="built_in">Getxy</span>();</span><br><span class="line">	<span class="type">double</span> d = <span class="built_in">Distance</span>(p1, p2); <span class="comment">//Distance是类Point的友元函数，不是成员函数</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Distance is &quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">	You you;</span><br><span class="line">	d = you.<span class="built_in">Multi</span>(p1);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Math.Multi is &quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>基类的析构函数没有定义为虚函数的情况下，基类指针指向派生类对象，用delete释放基类指针时，只会调用基类的析构函数而不会调用派生类的析构函数，派生类没有释放有可能造成内存泄漏。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>nlohmann json使用</title>
    <url>/posts/fa99.html</url>
    <content><![CDATA[<h1 id="1、解析json数据"><a href="#1、解析json数据" class="headerlink" title="1、解析json数据"></a>1、解析json数据</h1><span id="more"></span>



<p>要解析的json格式的渣土车推理结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span>        <span class="punctuation">&#123;</span>            <span class="attr">&quot;camera_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;camera_0&quot;</span><span class="punctuation">,</span>            <span class="attr">&quot;img_name&quot;</span><span class="punctuation">:</span><span class="string">&quot;img154&quot;</span><span class="punctuation">,</span>            <span class="attr">&quot;muck_truck_detect_server&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span>                <span class="punctuation">&#123;</span>                    <span class="attr">&quot;area&quot;</span><span class="punctuation">:</span><span class="number">3050</span><span class="punctuation">,</span>                    <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span><span class="number">20</span><span class="punctuation">,</span>                    <span class="attr">&quot;quality&quot;</span><span class="punctuation">:</span><span class="number">0.7098977565765381</span><span class="punctuation">,</span>                    <span class="attr">&quot;rect&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span>                        <span class="number">393</span><span class="punctuation">,</span>                        <span class="number">162</span><span class="punctuation">,</span>                        <span class="number">443</span><span class="punctuation">,</span>                        <span class="number">223</span>                    <span class="punctuation">]</span><span class="punctuation">,</span>                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="number">2400</span>                <span class="punctuation">&#125;</span>            <span class="punctuation">]</span>        <span class="punctuation">&#125;</span>    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span><span class="string">&quot;success&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;use_time&quot;</span><span class="punctuation">:</span><span class="number">1.829451042</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>粘贴上去有点乱，看一下格式化后的：</p>
<p><img src="https://s2.loli.net/2024/09/21/tXF7V59MxaY4Zsk.png"></p>
<p>数组里面套数组的，比以前接触的要复杂，如果一张图片里有多个渣土车，则”muck_truck_detect_server”数组里不止一个。</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">#include <span class="string">&quot;nlohmann/json.hpp&quot;</span></span><br><span class="line">using json = nlohmann::json;</span><br><span class="line">namespace jsonns &#123;</span><br><span class="line">    struct muck_truck &#123;</span><br><span class="line">        int area;</span><br><span class="line">        int label;</span><br><span class="line">        float quality;</span><br><span class="line">        int rect[<span class="number">4</span>];</span><br><span class="line">        int type;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    void from_json(const json&amp;j, muck_truck &amp;t) &#123;</span><br><span class="line">        j.at(<span class="string">&quot;area&quot;</span>).get_to(t.area);</span><br><span class="line">        j.at(<span class="string">&quot;label&quot;</span>).get_to(t.label);</span><br><span class="line">        j.at(<span class="string">&quot;quality&quot;</span>).get_to(t.quality);</span><br><span class="line">        for(int i = <span class="number">0</span>; i &lt; j[<span class="string">&quot;rect&quot;</span>].size(); i++) &#123;</span><br><span class="line">            t.rect[i] = j[<span class="string">&quot;rect&quot;</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">        j.at(<span class="string">&quot;type&quot;</span>).get_to(t.type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct data &#123;   </span><br><span class="line">        string camera_id;</span><br><span class="line">        string img_name;</span><br><span class="line">        muck_truck muck_truck_detect_server[<span class="number">2</span>];</span><br><span class="line">    &#125;;</span><br><span class="line">    void from_json(const json&amp;j, data &amp;t) &#123;</span><br><span class="line">        j.at(<span class="string">&quot;camera_id&quot;</span>).get_to(t.camera_id);</span><br><span class="line">        j.at(<span class="string">&quot;img_name&quot;</span>).get_to(t.img_name);</span><br><span class="line">        for(int i = <span class="number">0</span>; i &lt; j[<span class="string">&quot;muck_truck_detect_server&quot;</span>].size(); i++) &#123;</span><br><span class="line">            t.muck_truck_detect_server[i] = j[<span class="string">&quot;muck_truck_detect_server&quot;</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//解析json</span><br><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">    cv::<span class="symbol">Mat</span> frame;</span><br><span class="line">    json jsonRes=json::parse(out_node.results);</span><br><span class="line">    </span><br><span class="line">    if(jsonRes[<span class="string">&quot;result&quot;</span>]==<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        int r=<span class="number">80</span>,g=<span class="number">0</span>,b=<span class="number">220</span>;</span><br><span class="line">        jsonns::data data[<span class="number">1</span>];</span><br><span class="line">        data[<span class="number">0</span>]=jsonRes[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>];</span><br><span class="line">        frame = cv::imread(<span class="string">&quot;./img/&quot;</span>+data[<span class="number">0</span>].img_name+<span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line">        for(int i=<span class="number">0</span>;i&lt;jsonRes[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>].at(<span class="string">&quot;muck_truck_detect_server&quot;</span>).size();i++,r=(r+<span class="number">50</span>)<span class="comment">%255,g=(g+50)%255,b=(b+50)%255)</span></span><br><span class="line">        &#123;</span><br><span class="line">            if(data[<span class="number">0</span>].muck_truck_detect_server[i].quality!=<span class="number">0.0</span>)  </span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;imgName:&quot;</span>&lt;&lt;data[<span class="number">0</span>].img_name&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;qua:&quot;</span>&lt;&lt;data[<span class="number">0</span>].muck_truck_detect_server[i].quality&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;x0:&quot;</span>&lt;&lt;data[<span class="number">0</span>].muck_truck_detect_server[i].rect[<span class="number">0</span>]&lt;&lt;<span class="string">&quot;  y1:&quot;</span>&lt;&lt;data[<span class="number">0</span>].muck_truck_detect_server[i].rect[<span class="number">3</span>]&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">                //画框,写可信度</span><br><span class="line">                cv::rectangle(frame, cv::<span class="symbol">Point</span>(data[<span class="number">0</span>].muck_truck_detect_server[i].rect[<span class="number">0</span>], data[<span class="number">0</span>].muck_truck_detect_server[i].rect[<span class="number">1</span>]), </span><br><span class="line">                    cv::<span class="symbol">Point</span>(data[<span class="number">0</span>].muck_truck_detect_server[i].rect[<span class="number">2</span>], data[<span class="number">0</span>].muck_truck_detect_server[i].rect[<span class="number">3</span>]), cv::<span class="symbol">Scalar</span>(r, g, b));</span><br><span class="line">                cv::putText(frame,<span class="string">&quot;qua:&quot;</span>+to_string(data[<span class="number">0</span>].muck_truck_detect_server[i].quality),</span><br><span class="line">                    cv::<span class="symbol">Point</span>(data[<span class="number">0</span>].muck_truck_detect_server[i].rect[<span class="number">0</span>]+<span class="number">5</span>, data[<span class="number">0</span>].muck_truck_detect_server[i].rect[<span class="number">1</span>]<span class="number">-5</span>),</span><br><span class="line">                    cv::<span class="symbol">FONT_HERSHEY_SIMPLEX</span>,<span class="number">0.5</span>,cv::<span class="symbol">Scalar</span>(r,g,b),<span class="number">1</span>,<span class="number">8</span>,false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(data[<span class="number">0</span>].muck_truck_detect_server[<span class="number">0</span>].quality!=<span class="number">0.0</span>)</span><br><span class="line">            cv::imwrite(<span class="string">&quot;./img/&quot;</span>+data[<span class="number">0</span>].img_name+<span class="string">&quot;.jpg&quot;</span>,frame);    //存起来</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //free(frame);</span><br><span class="line">&#125;</span><br><span class="line">catch (json::parse_error&amp; ex)</span><br><span class="line">&#123;</span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;parse error &quot;</span> &lt;&lt; ex.what() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2、json格式问题"><a href="#2、json格式问题" class="headerlink" title="2、json格式问题"></a>2、json格式问题</h1><p>读取的json是按ascia顺序读取的，不会按照插入顺序，而且会把要读取json格式的文件缩进去掉</p>
<p>存在的问题：</p>
<ol>
<li><p>缩进</p>
</li>
<li><p>顺序</p>
</li>
</ol>
<p>解决方案：</p>
<p>缩进：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">jsonData</span>.dump(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>顺序：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;fifo_map.hpp&quot;</span>    <span class="comment">//在github上另外下载</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> nlohmann;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">V</span>, <span class="keyword">class</span> <span class="title class_">dummy_compare</span>, <span class="keyword">class</span> <span class="title class_">A</span>&gt;</span><br><span class="line"><span class="keyword">using</span> my_workaround_fifo_map = fifo_map&lt;K, V, fifo_map_compare&lt;K&gt;, A&gt;;</span><br><span class="line"><span class="keyword">using</span> my_json = basic_json&lt;my_workaround_fifo_map&gt;;</span><br><span class="line">my_json jsonData;    <span class="comment">//就是无序的了</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>windows下用cmake、make</title>
    <url>/posts/8a77.html</url>
    <content><![CDATA[<p>这个命令可以防止不生成makefile</p>
<span id="more"></span>

<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">cmake</span></span> .. -G <span class="string">&quot;Unix Makefiles&quot;</span></span><br></pre></td></tr></table></figure>

<p>使用vscode使用opencv库：</p>
<p>1、直接安装opencv （失败，编译器不同使用MSVC编译器）</p>
<p>2、用vsstudio编译器（失败）</p>
<p>3、直接用别人Mingw编译好的（失败，可能版本问题吧）</p>
<p>4、使用cmake-gui通过x86_64-8.1.0-release-posix-seh-rt_v6-rev0编译（成功！）</p>
<p><img src="https://s2.loli.net/2024/09/21/ilUoIWfwB4SgsGP.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/utRUWyDnElMZKi5.png"></p>
<p>在windows下，使用dll动态库，除了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">link_libraries(</span><br><span class="line">    $&#123;PROJECT_SOURCE_DIR&#125;/lib/libhv.dll</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>外，还需要在环境变量里面添加dll路径，或者是把dll添加到build里面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">add_library(hv SHARED IMPORTED)</span><br><span class="line">set_property(TARGET hv PROPERTY IMPORTED_LOCATION_DEBUG $&#123;PROJECT_SOURCE_DIR&#125;/lib/libhv.dll)</span><br><span class="line">add_custom_command (TARGET test1 POST_BUILD</span><br><span class="line">    COMMAND $&#123;CMAKE_COMMAND&#125; -E copy_if_different</span><br><span class="line">    $&lt;TARGET_FILE:hv&gt; $&lt;TARGET_FILE_DIR:test1&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//上面不行的话换成下面的</span><br><span class="line"></span><br><span class="line">add_custom_command (TARGET test1 PRE_BUILD</span><br><span class="line">    COMMAND $&#123;CMAKE_COMMAND&#125; -E copy_if_different</span><br><span class="line">    &quot;$&#123;PROJECT_SOURCE_DIR&#125;/lib/libhv.dll&quot; $&lt;TARGET_FILE_DIR:test1&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>socket</title>
    <url>/posts/e59b.html</url>
    <content><![CDATA[<h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><span id="more"></span>



<h2 id="inet-addr-x20"><a href="#inet-addr-x20" class="headerlink" title="inet_addr&#x20;"></a>inet_addr&#x20;</h2><p>在头文件<code>&lt;arpa/inet.h&gt;</code>中，把点分十进制转换为网络字节序列的整形（大端，整体十进制的二进制）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="type">int</span> ip_addr;</span><br><span class="line">    ip_addr = inet_addr(<span class="string">&quot;192.168.1.100&quot;</span>); <span class="comment">// 设置ip点分十进制地址的地址</span></span><br><span class="line">    <span class="keyword">if</span> (ip_addr == INADDR_NONE)           <span class="comment">//  返回值错误判断</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ip_addr); <span class="comment">// 打印转换后的网络字节序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">看下为什么是输出 1677830336</span></span><br><span class="line"><span class="comment">写的源码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">inet_addr_my</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *ip)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> pointSize = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ipSub[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; ip[i] != <span class="number">0</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ip[i] != <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ip[i] &lt; <span class="string">&#x27;0&#x27;</span> || ip[i] &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ipSub[j++] = ip[i];</span><br><span class="line">            <span class="keyword">if</span> (j &gt; <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip[i] == <span class="string">&#x27;.&#x27;</span> || ip[i + <span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pointSize++;</span><br><span class="line">            <span class="keyword">if</span> (pointSize &gt; <span class="number">4</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> temp = atoi(ipSub);</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; <span class="number">255</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res = res | (temp &lt;&lt; (<span class="number">8</span> * (pointSize - <span class="number">1</span>)));</span><br><span class="line">            <span class="built_in">memset</span>(ipSub, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ip[i])</span><br><span class="line">    &#123;</span><br><span class="line">        res = <span class="number">0xffffffff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="网络字节大端整形类IP转为点分十进制"><a href="#网络字节大端整形类IP转为点分十进制" class="headerlink" title="网络字节大端整形类IP转为点分十进制"></a>网络字节大端整形类IP转为点分十进制</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">inet_ntoa</span><span class="params">(<span class="keyword">struct</span> in_addr addr)</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>不同函数间进行跳转</title>
    <url>/posts/2827.html</url>
    <content><![CDATA[<blockquote>
<p>如果是在同一个函数间进行跳转，我们很容易想到用goto语句去实现</p>
</blockquote>
<span id="more"></span>
<blockquote>
<p>但如果是在不同函数，甚至不同文件中跳转，又该怎么办呢？下面我们来探讨一下</p>
</blockquote>
<p>与任务之间调度相类似，保存上下文，恢复上下文，这两个功能都有相应的内置函数来实现。</p>
<p>函数原型：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;setjmp.h&gt;</span></span></span><br><span class="line"><span class="comment">/*保存上下文内容到结构体中</span></span><br><span class="line"><span class="comment">如果直接调用该函数，返回值为 0； </span></span><br><span class="line"><span class="comment">若该函数从 longjmp 调用返回，返回值为非零，由 longjmp 函数提供。</span></span><br><span class="line"><span class="comment">根据函数的返回值，我们就可以知道 setjmp 函数调用是第一次直接调用，还是由其它地方跳转过来的。*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">setjmp</span><span class="params">(jmp_buf env)</span></span>;    </span><br><span class="line"><span class="comment">/*参数 env：  setjmp 函数保存过的上下文。</span></span><br><span class="line"><span class="comment">       val：  从 longjmp 函数传递给 setjmp 函数的返回值，如果 val 值为0， setjmp 将会返回1，否则返回 val。</span></span><br><span class="line"><span class="comment">调用完之后由env找需要恢复到setjmp的地方，如果有多个setjmp会跳转到最后执行setjmp的地方*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">longjmp</span><span class="params">(jmp_buf env, <span class="type">int</span> val)</span></span>;    </span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;setjmp.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">static</span> jmp_buf env;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">interrupt1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">longjmp</span>(env, <span class="number">2</span>);   <span class="comment">//后面的语句不再运行，也回不来</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;111&quot;</span> &lt;&lt; endl;</span><br><span class="line">        i=<span class="built_in">setjmp</span>(env);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;i:&quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;跳出循环!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">interrupt1</span>();</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">2</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;222&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;333&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/09/21/A2OhTiQMuoPa38z.png"></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>win下socket编程</title>
    <url>/posts/fef5.html</url>
    <content><![CDATA[<p>socket编程要调用各种socket函数，但是需要库Ws2_32.lib和头文件Winsock2.h</p>
<span id="more"></span>

<p>在VSstudio下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;Ws2_32.lib&quot;</span>)</span></span><br></pre></td></tr></table></figure>

<p>在VScode下使用CMakeLists：</p>
<p>在CMakeLists加上 :(然后就不需要在源文件中加#pragma comment(lib, “Ws2_32.lib”))</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;CMAKE_PROJECT_NAME&#125;</span> ws2_32)</span><br></pre></td></tr></table></figure>

<p>首先需要先通过WSAStartup 函数完成对Winsock服务的初始化。当一个 应用程序调用WSAStartup 函数时， 操作系统根据请求的Socket版本来搜索相应的Socket库，然后绑定找到的Socket库到该应用程序中。以后应用程序就可以调用所请求的Socket库中的相对应版本的Socket函数了。&#x20;</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">WORD wdVersion = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);<span class="comment">//定义自己需要的网络库版本，这里是2.2,参数1为高位表示次版本，参数2为低位表示主版本</span></span><br><span class="line">WSADATA wdSockMsg;<span class="comment">// WSAStartup()函数会将环境的网络库信息存在这个结构体中</span></span><br><span class="line"><span class="type">int</span> nRes = <span class="built_in">WSAStartup</span>(wdVersion, &amp;wdSockMsg);<span class="comment">//打开一个套接字</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> != nRes)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (nRes)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> WSASYSNOTREADY: <span class="built_in">printf</span>(<span class="string">&quot;重启电脑，或者检查网络库&quot;</span>);   <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> WSAVERNOTSUPPORTED: <span class="built_in">printf</span>(<span class="string">&quot;请更新网络库&quot;</span>);  <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> WSAEINPROGRESS: <span class="built_in">printf</span>(<span class="string">&quot;请重新启动&quot;</span>);  <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> WSAEPROCLIM:  <span class="built_in">printf</span>(<span class="string">&quot;请关闭不必要的软件，以确保有足够的网络资源&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> != <span class="built_in">HIBYTE</span>(wdSockMsg.wVersion) || <span class="number">2</span> != <span class="built_in">LOBYTE</span>(wdSockMsg.wVersion))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;网络库版本错误&quot;</span>);</span><br><span class="line">    <span class="built_in">WSACleanup</span>();<span class="comment">//关闭此套接字</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************************************************</span></span><br><span class="line"><span class="comment"> *** @Description:  建立socket</span></span><br><span class="line"><span class="comment"> *** @param &#123;int&#125; af    AF_INET表示ipv4 AF_INET6表示ipv6</span></span><br><span class="line"><span class="comment"> *** @param &#123;int&#125; type   SOCK_STREAM表示tcp SOCK_DGRAM表示udp</span></span><br><span class="line"><span class="comment"> *** @param &#123;int&#125; protocol  一般情况下有了 af 和 type 两个参数就可以创建套接字了，操作系统会自动推演出协议类型，除非遇到这样的情况：有两种不同的协议支持同一种地址类型和数据传输类型。如果我们不指明使用哪种协议，操作系统是没办法自动推演的。</span></span><br><span class="line"><span class="comment"> *** @return &#123;SOCKET&#125;   返回SOCKET套接字描述符</span></span><br><span class="line"><span class="comment"> ***********************************************************************************************************/</span></span><br><span class="line"><span class="function">SOCKET <span class="title">socket</span><span class="params">(<span class="type">int</span> af,<span class="type">int</span> type,<span class="type">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure>

<p><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winsock/nf-winsock-setsockopt">setsockopt 函数 (winsock.h) - Win32 apps | Microsoft Learn</a></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>奇牛C++系统班</title>
    <url>/posts/af07.html</url>
    <content><![CDATA[<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20240417203054.png"></p>
<span id="more"></span>

<p>浮点数：</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20240520213327.png"></p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20240520213525.png"></p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20240520213659.png"></p>
<p>补码 &#x3D; 该负数的值 + 模值（一共有多少个值包括0）</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20240815195131.png"></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>编译</title>
    <url>/posts/ec57.html</url>
    <content><![CDATA[<h1 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h1><span id="more"></span>



<p>一个源文件经过四个过程才能被计算机执行：</p>
<ol>
<li>预编译	.i</li>
<li>编译 .s</li>
<li>汇编 .o</li>
<li>链接 .out&#x20;</li>
</ol>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230908190951.png"></p>
<h1 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h1><p>$@：目标文件，$^：所有的依赖文件，$&lt;：第一个依赖文件。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>py注意事项</title>
    <url>/posts/639e.html</url>
    <content><![CDATA[<h1 id="一、变量作用域"><a href="#一、变量作用域" class="headerlink" title="一、变量作用域"></a>一、变量作用域</h1><span id="more"></span>



<p>首先来看一段代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&#x27;mpp_decode&#x27;</span> <span class="keyword">in</span> jsonData:</span><br><span class="line">    <span class="keyword">if</span> jsonData[<span class="string">&#x27;mpp_decode&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">MPP_DECODE</span> = <span class="string">&quot;False&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">MPP_DECODE</span> = <span class="string">&quot;True&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">MPP_DECODE</span> = <span class="string">&quot;True&quot;</span></span><br><span class="line">print(<span class="string">&quot;mpp_decode&quot;</span>+<span class="built_in">MPP_DECODE</span>)</span><br></pre></td></tr></table></figure>

<p>程序会输出，刚开始看，会出现疑问了，MPP_DECODE在if&#x2F;else的里面，在外面怎么也能用这个变量呢？</p>
<p>原因是python能够改变变量<a href="https://so.csdn.net/so/search?q=%E4%BD%9C%E7%94%A8%E5%9F%9F&spm=1001.2101.3001.7020">作用域</a>的代码段是def、class、lamda。	if&#x2F;elif&#x2F;else、try&#x2F;except&#x2F;finally、for&#x2F;while 并不能涉及变量作用域的更改，也就是说他们的代码块中的变量，在外部也是可以访问的。</p>
<h1 id="二、类内独立程序"><a href="#二、类内独立程序" class="headerlink" title="二、类内独立程序"></a>二、类内独立程序</h1><p>没有调用Camera类，里面的程序还是会执行，print(“name”)放在类内还是类外效果都是相同的</p>
<p><img src="https://s2.loli.net/2024/09/21/FDLSciUyR6Aojm1.png"></p>
<h1 id="三、print"><a href="#三、print" class="headerlink" title="三、print"></a>三、print</h1><p>1、前加f表示格式化字符串，后面的变量用{}括起来</p>
<p><img src="https://s2.loli.net/2024/09/21/mnFo7GKCAgsPMWY.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/o3mOBA26aTQU9k7.png"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫获取接口数据</title>
    <url>/posts/6ab8.html</url>
    <content><![CDATA[<h1 id="正常人的操作"><a href="#正常人的操作" class="headerlink" title="正常人的操作"></a>正常人的操作</h1><span id="more"></span>

<p>上一讲讲的是获取静态网页数据的教程，适用于我们要爬取的数据在网页源代码中出现，但是还是有很多的数据是源代码中没有的，需要通过接口访问服务器来获得，下面我就来讲讲如何爬取这类数据。</p>
<p>以巨潮资讯网爬取比亚迪企业年报为例。</p>
<ol>
<li><p>打开巨潮资讯网官网</p>
</li>
<li><p>找到比亚迪的公告</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230917165058.png"></p>
</li>
<li><p>在分类里面选择筛选信息，找到自己想要的信息</p>
</li>
</ol>
<h1 id="爬虫的思路"><a href="#爬虫的思路" class="headerlink" title="爬虫的思路"></a>爬虫的思路</h1><h2 id="获取请求信息"><a href="#获取请求信息" class="headerlink" title="获取请求信息"></a>获取请求信息</h2><p>在正常人的操作第三步，当我们选择一个类别时，毫无疑问浏览器肯定会对服务器发送请求信息，服务器返回信息后我们才能看到想要的信息，看一下怎么获取这个请求：</p>
<ol>
<li><p>按下F12或者是右键检查，进入网络，先清空乱七八糟的网络信息</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230917165939.png"></p>
</li>
<li><p>当我们选择一个类别时会看到右边多出一个query请求，这个就是我们向服务器发出的请求</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230917170057.png"></p>
</li>
<li><p>我们可以查看query这条请求的信息</p>
</li>
</ol>
<h2 id="请求转换为代码"><a href="#请求转换为代码" class="headerlink" title="请求转换为代码"></a>请求转换为代码</h2><p>上一步我们获取到了请求信息，我们就可以使用python造一个请求头，主要包含请求头和请求负载，我们荡当然可以使用比较奔的方法一个一个的复制粘贴，把东西搬到代码上，这里推荐一个工具能自动帮我们把请求格式化我们想要的</p>
<ol>
<li><p>把请求复制下来</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230917171115.png"></p>
</li>
<li><p>在<a href="https://sbox.cn/tool/curlconverter">Curl命令转代码工具 (sbox.cn)</a>这个在线网站可以直接转换为python代码</p>
</li>
</ol>
<h2 id="请求返回信息"><a href="#请求返回信息" class="headerlink" title="请求返回信息"></a>请求返回信息</h2><p>请求信息在调试窗口响应上查看，当然也可以通过上一步通过代码获取的返回打印出来查看。</p>
<p>可以看到，一个个报告主要是在”announcements”数组里，通过直觉”adjunctUrl”可能是报告的存放地址，来验证一下，随便打开一个报告，还是按照老方法查看网络请求，可以看到pdf的请求，是不是就是”adjunctUrl”加上前缀，通过查看多个报告，发现都是这个情况，就可以大胆地去操作了。</p>
<p>请求url为：’<a href="http://static.cninfo.com.cn/">http://static.cninfo.com.cn/</a>‘ + “adjunctUrl”</p>
<p>保存的文件名称：’tileSecName’+’-‘+’announcementTitle’</p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&#x27;JSESSIONID&#x27;</span>: <span class="string">&#x27;F5C5C5CD40FE076E6139580808BEC6E3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cninfo_user_browse&#x27;</span>: <span class="string">&#x27;002594,gshk0001211,%E6%AF%94%E4%BA%9A%E8%BF%AA&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;_sp_ses.2141&#x27;</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;routeId&#x27;</span>: <span class="string">&#x27;.uc2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;insert_cookie&#x27;</span>: <span class="string">&#x27;45380249&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SID&#x27;</span>: <span class="string">&#x27;add3de6c-70ed-4c9b-a201-723fbc753673&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;_sp_id.2141&#x27;</span>: <span class="string">&#x27;f35a90ce-a735-4c68-a000-1eb385b581af.1694435068.2.1694520662.1694435105.3aee65c9-094e-48f8-af1d-67b97c9655a9&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json, text/javascript, */*; q=0.01&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;Cookie&#x27;: &#x27;JSESSIONID=F5C5C5CD40FE076E6139580808BEC6E3; cninfo_user_browse=002594,gshk0001211,%E6%AF%94%E4%BA%9A%E8%BF%AA; _sp_ses.2141=*; routeId=.uc2; insert_cookie=45380249; SID=add3de6c-70ed-4c9b-a201-723fbc753673; _sp_id.2141=f35a90ce-a735-4c68-a000-1eb385b581af.1694435068.2.1694520662.1694435105.3aee65c9-094e-48f8-af1d-67b97c9655a9&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;http://www.cninfo.com.cn&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://www.cninfo.com.cn/new/disclosure/stock?plate=&amp;stockCode=002594&amp;orgId=gshk0001211&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.76&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;stock&#x27;</span>: <span class="string">&#x27;002594,gshk0001211&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;tabName&#x27;</span>: <span class="string">&#x27;fulltext&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;30&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pageNum&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;column&#x27;</span>: <span class="string">&#x27;szse&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;category_ndbg_szsh;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plate&#x27;</span>: <span class="string">&#x27;sz&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;seDate&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;searchkey&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;secid&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sortName&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sortType&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;isHLtitle&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(</span><br><span class="line">    <span class="string">&#x27;http://www.cninfo.com.cn/new/hisAnnouncement/query&#x27;</span>,</span><br><span class="line">    cookies=cookies,</span><br><span class="line">    headers=headers,</span><br><span class="line">    data=data,</span><br><span class="line">    verify=<span class="literal">False</span>,</span><br><span class="line">).json()</span><br><span class="line"><span class="comment">#print(response.find(&quot;totalRecordNum&quot;))</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> response[<span class="string">&#x27;announcements&#x27;</span>]:</span><br><span class="line">    reportName=i[<span class="string">&#x27;tileSecName&#x27;</span>]+<span class="string">&#x27;-&#x27;</span>+i[<span class="string">&#x27;announcementTitle&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(reportName)</span><br><span class="line">    reportUrl = <span class="string">&#x27;http://static.cninfo.com.cn/&#x27;</span> + i[<span class="string">&#x27;adjunctUrl&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(reportUrl)</span><br><span class="line">    request.urlretrieve(reportUrl, <span class="string">r&#x27;./AnnualReport/&#x27;</span>+reportName+<span class="string">&#x27;.pdf&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="有的分类不只有一页数据"><a href="#有的分类不只有一页数据" class="headerlink" title="有的分类不只有一页数据"></a>有的分类不只有一页数据</h2><p>可以看到”totalpages”这个字段跟页数有关，当只有一页的时候为0，两页的时候为1，请求头只有’pageNum’不一样，请求头’pageNum’与响应‘totalpages’是对应的，我们就可以这样写程序：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&#x27;JSESSIONID&#x27;</span>: <span class="string">&#x27;5606FC5CD576740918585289AE035EF6&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cninfo_user_browse&#x27;</span>: <span class="string">&#x27;002594,gshk0001211,%E6%AF%94%E4%BA%9A%E8%BF%AA&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;routeId&#x27;</span>: <span class="string">&#x27;.uc1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SID&#x27;</span>: <span class="string">&#x27;ebbaf14c-1c51-48b5-8a56-e67112c85c8e&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;_sp_ses.2141&#x27;</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;_sp_id.2141&#x27;</span>: <span class="string">&#x27;f35a90ce-a735-4c68-a000-1eb385b581af.1694435068.5.1694942471.1694940568.9c03aa1e-99d7-4c7b-95a5-0475f67ce2dc&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json, text/javascript, */*; q=0.01&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;Cookie&#x27;: &#x27;JSESSIONID=5606FC5CD576740918585289AE035EF6; cninfo_user_browse=002594,gshk0001211,%E6%AF%94%E4%BA%9A%E8%BF%AA; routeId=.uc1; SID=ebbaf14c-1c51-48b5-8a56-e67112c85c8e; _sp_ses.2141=*; _sp_id.2141=f35a90ce-a735-4c68-a000-1eb385b581af.1694435068.5.1694942471.1694940568.9c03aa1e-99d7-4c7b-95a5-0475f67ce2dc&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;http://www.cninfo.com.cn&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://www.cninfo.com.cn/new/disclosure/stock?tabName=data&amp;orgId=gshk0001211&amp;stockCode=002594&#x27;</span>,</span><br><span class="line">    <span class="comment">#&#x27;User-Agent&#x27;:&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.81&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;stock&#x27;</span>: <span class="string">&#x27;002594,gshk0001211&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;tabName&#x27;</span>: <span class="string">&#x27;fulltext&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;30&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pageNum&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;column&#x27;</span>: <span class="string">&#x27;szse&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;category_sf_szsh;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plate&#x27;</span>: <span class="string">&#x27;sz&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;seDate&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;searchkey&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;secid&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sortName&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sortType&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;isHLtitle&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://60.182.197.86:8888&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;https://60.182.197.86:8888&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(</span><br><span class="line">    <span class="string">&#x27;http://www.cninfo.com.cn/new/hisAnnouncement/query&#x27;</span>,</span><br><span class="line">    cookies=cookies,</span><br><span class="line">    headers=headers,</span><br><span class="line">    data=data,</span><br><span class="line">    <span class="comment">#proxies=proxies,    #使用代理ip，防止反爬</span></span><br><span class="line">    verify=<span class="literal">False</span>,</span><br><span class="line">).json()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;总的页数：&#x27;</span>+<span class="built_in">str</span>(response[<span class="string">&#x27;totalpages&#x27;</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;总的数目：&#x27;</span>+<span class="built_in">str</span>(response[<span class="string">&#x27;totalRecordNum&#x27;</span>]))</span><br><span class="line">num=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">2</span>+response[<span class="string">&#x27;totalpages&#x27;</span>]):</span><br><span class="line">    <span class="comment">#print(i)</span></span><br><span class="line">    data[<span class="string">&#x27;pageNum&#x27;</span>]=i</span><br><span class="line">    response = requests.post(</span><br><span class="line">        <span class="string">&#x27;http://www.cninfo.com.cn/new/hisAnnouncement/query&#x27;</span>,</span><br><span class="line">        cookies=cookies,</span><br><span class="line">        headers=headers,</span><br><span class="line">        data=data,</span><br><span class="line">        <span class="comment">#proxies=proxies,  # 使用代理ip，防止反爬</span></span><br><span class="line">        verify=<span class="literal">False</span>,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> response.status_code==<span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        response=response.json()</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> response[<span class="string">&#x27;announcements&#x27;</span>]:</span><br><span class="line">            reportName=j[<span class="string">&#x27;tileSecName&#x27;</span>]+<span class="string">&#x27;-&#x27;</span>+j[<span class="string">&#x27;shortTitle&#x27;</span>]</span><br><span class="line">            <span class="comment">#print(reportName)</span></span><br><span class="line">            reportUrl = <span class="string">&#x27;http://static.cninfo.com.cn/&#x27;</span> + j[<span class="string">&#x27;adjunctUrl&#x27;</span>]</span><br><span class="line">            <span class="comment">#print(reportUrl)</span></span><br><span class="line">            request.urlretrieve(reportUrl, <span class="string">r&#x27;./AnnualReport/&#x27;</span>+reportName.replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;-&quot;</span>)+<span class="string">&#x27;.pdf&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(num)</span><br><span class="line">            num=num+<span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">r&#x27;./AnnualReport/&#x27;</span>+reportName+<span class="string">&#x27;.pdf&#x27;</span>+<span class="string">&#x27;下载完成&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫获取静态网页数据</title>
    <url>/posts/de15.html</url>
    <content><![CDATA[<h1 id="自动爬取网页数据"><a href="#自动爬取网页数据" class="headerlink" title="自动爬取网页数据"></a>自动爬取网页数据</h1><span id="more"></span>



<p>正常情况下是我们使用浏览器输入指定url，对服务器发送访问请求，服务器返回请求信息，浏览器进行解析为我们看到的界面，爬虫就是使用python脚本取代正常的浏览器，获取相应服务器的返回请求信息，并配合python强大的库进行解析分析，能够快速高效地帮助我们进行大数据分析。</p>
<h2 id="不需要登录即可返回请求"><a href="#不需要登录即可返回请求" class="headerlink" title="不需要登录即可返回请求"></a>不需要登录即可返回请求</h2><p>以爬取虎牙交友频道每个直播封面图片为例</p>
<ol>
<li><p>请求服务器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">&#x27;https://www.huya.com/g/4079&#x27;</span></span><br><span class="line">result = requests.get(url=url).text</span><br></pre></td></tr></table></figure>

<p>其实就是与cmd命令的 curl url一样，他们两个的返回是一样的，都是返回请求网页的源代码</p>
<p>curl url的返回太长，可以直接保存到文件中，方便比较 <code>curl </code><a href="https://www.huya.com/g/4079"><code>https://www.huya.com/g/4079</code></a><code> &gt; C:\Users\72403\Desktop\py\cmdRes.txt</code></p>
</li>
<li><p>在网站源码内筛选我们需要的数据，这里用到xpath</p>
<p>我们可以在网站要爬取的内容右键选检查，就会看到对应内容的标签等信息</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230910215337.png"></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data = etree.HTML(result)</span><br><span class="line">imgs = data.xpath(<span class="string">&#x27;//img[@class=&quot;pic&quot;]&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>保存数据</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> imgs:</span><br><span class="line">      imgUrl = img.xpath(<span class="string">&#x27;./@data-original&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">      imgName = img.xpath(<span class="string">&#x27;./@alt&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">      request.urlretrieve(imgUrl, <span class="string">r&#x27;C:/Users/72403/Pictures/video/huya/&#x27;</span> + imgName + <span class="string">&#x27;.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<p>都被爬到了本地：</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230910214908.png"></p>
<h2 id="需要登录才可返回请求"><a href="#需要登录才可返回请求" class="headerlink" title="需要登录才可返回请求"></a>需要登录才可返回请求</h2><p>有的网站访客请求不能成功返回请求，这里以小b站为例</p>
<p>其他的都是一样的，就是要加上一个cookie，来告诉服务端我不是访客，我是你们尊贵的vip用户，快给我返回请求</p>
<h3 id="获取自己已经登录账户的cookie"><a href="#获取自己已经登录账户的cookie" class="headerlink" title="获取自己已经登录账户的cookie"></a>获取自己已经登录账户的cookie</h3><ol>
<li><p>打开小b站，登录</p>
</li>
<li><p>按下F12进入调试窗口</p>
</li>
<li><p>选中网络</p>
</li>
<li><p>按下 <code>alt+r</code> 刷新界面    &#x20;</p>
</li>
<li><p>滑动到界面的最上方，找到www.bilibili.com这条</p>
<p>cookie就在图下方所示位置</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230910220530.png"></p>
</li>
</ol>
<h3 id="请求的时候请求头加上cookie"><a href="#请求的时候请求头加上cookie" class="headerlink" title="请求的时候请求头加上cookie"></a>请求的时候请求头加上cookie</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="comment"># 假装自己是浏览器</span></span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/73.0.3683.75 			Chrome/73.0.3683.75 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="comment"># 把你刚刚拿到的Cookie塞进来</span></span><br><span class="line">	<span class="string">&#x27;Cookie&#x27;</span>:<span class="string">&#x27;把上一步得到的Cookie复制到此处&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">session = requests.Session()</span><br><span class="line">result = session.get(<span class="string">&#x27;https://www.bilibili.com&#x27;</span>, headers=headers).text</span><br></pre></td></tr></table></figure>

<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="comment"># 假装自己是浏览器</span></span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/73.0.3683.75 			Chrome/73.0.3683.75 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="comment"># 把你刚刚拿到的Cookie塞进来</span></span><br><span class="line">	<span class="string">&#x27;Cookie&#x27;</span>:<span class="string">&#x27;把上一步得到的Cookie复制到此处&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&#x27;https://www.bilibili.com&#x27;</span></span><br><span class="line">    session = requests.Session()</span><br><span class="line">    result = session.get(<span class="string">&#x27;https://www.bilibili.com&#x27;</span>, headers=headers).text</span><br><span class="line">    <span class="comment">#result = requests.get(url=url).text</span></span><br><span class="line">    data = etree.HTML(result)</span><br><span class="line">    imgs = data.xpath(<span class="string">&#x27;//img&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> imgs:</span><br><span class="line">        imgUrl = img.xpath(<span class="string">&#x27;./@src&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        imgName = img.xpath(<span class="string">&#x27;./@alt&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(imgName+<span class="string">&quot;:&quot;</span>+imgUrl)</span><br><span class="line">		<span class="comment"># 会出现有的图片路径不带https，加下面的判断</span></span><br><span class="line">        <span class="keyword">if</span> imgUrl.find(<span class="string">&quot;https://&quot;</span>) !=-<span class="number">1</span>:</span><br><span class="line">            request.urlretrieve(imgUrl, <span class="string">r&#x27;C:/Users/72403/Pictures/video/bilibili/&#x27;</span> + imgName + <span class="string">&#x27;.jpg&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            request.urlretrieve(<span class="string">&quot;https:&quot;</span>+imgUrl, <span class="string">r&#x27;C:/Users/72403/Pictures/video/bilibili/&#x27;</span> + imgName + <span class="string">&#x27;.jpg&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;%s&#125;下载完毕!&quot;</span> % imgName)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>自动化爬虫</title>
    <url>/posts/903.html</url>
    <content><![CDATA[<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230907193331.png"><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230907205050.png">爬虫如果遇到需要登录的网站：</p>
<span id="more"></span>

<p><a href="https://zhuanlan.zhihu.com/p/60365948">python爬虫19 | 爬虫遇到需要的登录的网站怎么办？用这3招轻松搞定！ - 知乎 (zhihu.com)</a></p>
<p>获取cookie：</p>
<p><a href="https://zmtechn.gitee.io/2021/10/05/Get_bilibili_cookie/">【教程】如何获取B站用户Cookie | Jimmy’s TechBlog (gitee.io)</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>线程池</title>
    <url>/posts/e2.html</url>
    <content><![CDATA[<p>代码如人生</p>
<span id="more"></span>

<p>线程池就好像一个企业，有管理者（管理线程）、有工作者（工作线程、消费者）、有任务量（函数、生产者），三个级别，上级管理者下级</p>
<p>管理者只需管理工作者，根据任务量来动态分配工作者，任务量多余工作者，可以以说是生产者多于消费者，就需要继续招人干活；任务量少于工作者，可以以说是生产者小于消费者，就需要进行一波裁员，向社会输出人才。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _THREADPOOL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _THREADPOOL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUMBER 2</span></span><br><span class="line"><span class="comment">// 任务结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Task</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">void</span> (*function)(<span class="type">void</span> *arg);</span><br><span class="line">    <span class="type">void</span> *arg;</span><br><span class="line">&#125; Task;</span><br><span class="line"><span class="comment">// 线程池结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ThreadPool</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 任务队列</span></span><br><span class="line">    Task *taskQ;</span><br><span class="line">    <span class="type">int</span> queueCapacity; <span class="comment">// 容量</span></span><br><span class="line">    <span class="type">int</span> queueSize;     <span class="comment">// 当前任务个数</span></span><br><span class="line">    <span class="type">int</span> queueFront;    <span class="comment">// 队头 -&gt; 取数据</span></span><br><span class="line">    <span class="type">int</span> queueRear;     <span class="comment">// 队尾 -&gt; 放数据</span></span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> managerID;       <span class="comment">// 管理者线程ID</span></span><br><span class="line">    <span class="type">pthread_t</span> *threadIDs;      <span class="comment">// 工作的线程ID</span></span><br><span class="line">    <span class="type">int</span> minNum;                <span class="comment">// 最小线程数量</span></span><br><span class="line">    <span class="type">int</span> maxNum;                <span class="comment">// 最大线程数量</span></span><br><span class="line">    <span class="type">int</span> busyNum;               <span class="comment">// 忙的线程的个数</span></span><br><span class="line">    <span class="type">int</span> liveNum;               <span class="comment">// 存活的线程的个数</span></span><br><span class="line">    <span class="type">int</span> exitNum;               <span class="comment">// 要销毁的线程个数</span></span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutexPool; <span class="comment">// 锁整个的线程池</span></span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutexBusy; <span class="comment">// 锁busyNum变量</span></span><br><span class="line">    <span class="type">pthread_cond_t</span> notFull;    <span class="comment">// 任务队列是不是满了</span></span><br><span class="line">    <span class="type">pthread_cond_t</span> notEmpty;   <span class="comment">// 任务队列是不是空了</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> shutdown; <span class="comment">// 是不是要销毁线程池, 销毁为1, 不销毁为0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ThreadPool * <span class="title function_">threadPoolCreate</span><span class="params">(<span class="type">int</span> min, <span class="type">int</span> max, <span class="type">int</span> queueSize)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁线程池</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">threadPoolDestroy</span><span class="params">(ThreadPool *pool)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给线程池添加任务</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">threadPoolAdd</span><span class="params">(ThreadPool *pool, <span class="type">void</span> (*func)(<span class="type">void</span> *), <span class="type">void</span> *arg)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取线程池中工作的线程的个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">threadPoolBusyNum</span><span class="params">(ThreadPool *pool)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取线程池中活着的线程的个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">threadPoolAliveNum</span><span class="params">(ThreadPool *pool)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////</span></span><br><span class="line"><span class="comment">// 工作的线程(消费者线程)任务函数</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">worker</span><span class="params">(<span class="type">void</span> *arg)</span>;</span><br><span class="line"><span class="comment">// 管理者线程任务函数</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">manager</span><span class="params">(<span class="type">void</span> *arg)</span>;</span><br><span class="line"><span class="comment">// 单个线程退出</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">threadExit</span><span class="params">(ThreadPool *pool)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _THREADPOOL_H</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;threadPool.h&quot;</span></span></span><br><span class="line">ThreadPool *<span class="title function_">threadPoolCreate</span><span class="params">(<span class="type">int</span> min, <span class="type">int</span> max, <span class="type">int</span> queueSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    ThreadPool *pool = (ThreadPool *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ThreadPool));</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pool == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;malloc threadpool fail...\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pool-&gt;threadIDs = (<span class="type">pthread_t</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">pthread_t</span>) * max);</span><br><span class="line">        <span class="keyword">if</span> (pool-&gt;threadIDs == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;malloc threadIDs fail...\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(pool-&gt;threadIDs, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">pthread_t</span>) * max);</span><br><span class="line">        pool-&gt;minNum = min;</span><br><span class="line">        pool-&gt;maxNum = max;</span><br><span class="line">        pool-&gt;busyNum = <span class="number">0</span>;</span><br><span class="line">        pool-&gt;liveNum = min; <span class="comment">// 和最小个数相等</span></span><br><span class="line">        pool-&gt;exitNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pthread_mutex_init(&amp;pool-&gt;mutexPool, <span class="literal">NULL</span>) != <span class="number">0</span> ||</span><br><span class="line">            pthread_mutex_init(&amp;pool-&gt;mutexBusy, <span class="literal">NULL</span>) != <span class="number">0</span> ||</span><br><span class="line">            pthread_cond_init(&amp;pool-&gt;notEmpty, <span class="literal">NULL</span>) != <span class="number">0</span> ||</span><br><span class="line">            pthread_cond_init(&amp;pool-&gt;notFull, <span class="literal">NULL</span>) != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;mutex or condition init fail...\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 任务队列</span></span><br><span class="line">        pool-&gt;taskQ = (Task *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Task) * queueSize);</span><br><span class="line">        pool-&gt;queueCapacity = queueSize;</span><br><span class="line">        pool-&gt;queueSize = <span class="number">0</span>;</span><br><span class="line">        pool-&gt;queueFront = <span class="number">0</span>;</span><br><span class="line">        pool-&gt;queueRear = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        pool-&gt;shutdown = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程</span></span><br><span class="line">        pthread_create(&amp;pool-&gt;managerID, <span class="literal">NULL</span>, manager, pool);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; min; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            pthread_create(&amp;pool-&gt;threadIDs[i], <span class="literal">NULL</span>, worker, pool);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pool;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    <span class="keyword">if</span> (pool &amp;&amp; pool-&gt;threadIDs)</span><br><span class="line">        <span class="built_in">free</span>(pool-&gt;threadIDs);</span><br><span class="line">    <span class="keyword">if</span> (pool &amp;&amp; pool-&gt;taskQ)</span><br><span class="line">        <span class="built_in">free</span>(pool-&gt;taskQ);</span><br><span class="line">    <span class="keyword">if</span> (pool)</span><br><span class="line">        <span class="built_in">free</span>(pool);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">threadPoolDestroy</span><span class="params">(ThreadPool *pool)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (pool == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭线程池</span></span><br><span class="line">    pool-&gt;shutdown = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 阻塞回收管理者线程</span></span><br><span class="line">    pthread_join(pool-&gt;managerID, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 唤醒阻塞的消费者线程</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pool-&gt;liveNum; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//printf(&quot;sig %d\n&quot;,i);</span></span><br><span class="line">        pthread_cond_signal(&amp;pool-&gt;notEmpty);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//printf(&quot;begin free!\n&quot;);</span></span><br><span class="line">    <span class="comment">// 释放堆内存</span></span><br><span class="line">    <span class="keyword">if</span> (pool-&gt;taskQ)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(pool-&gt;taskQ);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//printf(&quot;begin free threadIds!\n&quot;);</span></span><br><span class="line">    <span class="keyword">if</span> (pool-&gt;threadIDs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(pool-&gt;threadIDs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_destroy(&amp;pool-&gt;mutexPool);</span><br><span class="line">    pthread_mutex_destroy(&amp;pool-&gt;mutexBusy);</span><br><span class="line">    pthread_cond_destroy(&amp;pool-&gt;notEmpty);</span><br><span class="line">    pthread_cond_destroy(&amp;pool-&gt;notFull);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(pool);</span><br><span class="line">    pool = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">threadPoolAdd</span><span class="params">(ThreadPool *pool, <span class="type">void</span> (*func)(<span class="type">void</span> *), <span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;pool-&gt;mutexPool);</span><br><span class="line">    <span class="keyword">while</span> (pool-&gt;queueSize == pool-&gt;queueCapacity &amp;&amp; !pool-&gt;shutdown)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 阻塞生产者线程</span></span><br><span class="line">        pthread_cond_wait(&amp;pool-&gt;notFull, &amp;pool-&gt;mutexPool);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pool-&gt;shutdown)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加任务</span></span><br><span class="line">    pool-&gt;taskQ[pool-&gt;queueRear].function = func;</span><br><span class="line">    pool-&gt;taskQ[pool-&gt;queueRear].arg = arg;</span><br><span class="line">    pool-&gt;queueRear = (pool-&gt;queueRear + <span class="number">1</span>) % pool-&gt;queueCapacity;</span><br><span class="line">    pool-&gt;queueSize++;</span><br><span class="line"></span><br><span class="line">    pthread_cond_signal(&amp;pool-&gt;notEmpty);</span><br><span class="line">    pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">threadPoolBusyNum</span><span class="params">(ThreadPool *pool)</span></span><br><span class="line">&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;pool-&gt;mutexBusy);</span><br><span class="line">    <span class="type">int</span> busyNum = pool-&gt;busyNum;</span><br><span class="line">    pthread_mutex_unlock(&amp;pool-&gt;mutexBusy);</span><br><span class="line">    <span class="keyword">return</span> busyNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">threadPoolAliveNum</span><span class="params">(ThreadPool *pool)</span></span><br><span class="line">&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;pool-&gt;mutexPool);</span><br><span class="line">    <span class="type">int</span> aliveNum = pool-&gt;liveNum;</span><br><span class="line">    pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line">    <span class="keyword">return</span> aliveNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">worker</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    ThreadPool *pool = (ThreadPool *)arg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;pool-&gt;mutexPool);</span><br><span class="line">        <span class="comment">// 当前任务队列是否为空</span></span><br><span class="line">        <span class="keyword">while</span> (pool-&gt;queueSize == <span class="number">0</span> &amp;&amp; !pool-&gt;shutdown)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 阻塞工作线程</span></span><br><span class="line">            <span class="comment">//printf(&quot;阻塞住了 %ld\n&quot;,pthread_self());</span></span><br><span class="line">            pthread_cond_wait(&amp;pool-&gt;notEmpty, &amp;pool-&gt;mutexPool);</span><br><span class="line">            <span class="comment">//printf(&quot;激活了 %ld\n&quot;, pthread_self());</span></span><br><span class="line">            <span class="comment">// 判断是不是要销毁线程</span></span><br><span class="line">            <span class="keyword">if</span> (pool-&gt;exitNum &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                pool-&gt;exitNum--;</span><br><span class="line">                <span class="keyword">if</span> (pool-&gt;liveNum &gt; pool-&gt;minNum)</span><br><span class="line">                &#123;</span><br><span class="line">                    pool-&gt;liveNum--;</span><br><span class="line">                    pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line">                    threadExit(pool);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断线程池是否被关闭了</span></span><br><span class="line">        <span class="keyword">if</span> (pool-&gt;shutdown)</span><br><span class="line">        &#123;</span><br><span class="line">            pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line">            threadExit(pool);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从任务队列中取出一个任务</span></span><br><span class="line">        Task task;</span><br><span class="line">        task.function = pool-&gt;taskQ[pool-&gt;queueFront].function;</span><br><span class="line">        task.arg = pool-&gt;taskQ[pool-&gt;queueFront].arg;</span><br><span class="line">        <span class="comment">// 移动头结点</span></span><br><span class="line">        pool-&gt;queueFront = (pool-&gt;queueFront + <span class="number">1</span>) % pool-&gt;queueCapacity;</span><br><span class="line">        pool-&gt;queueSize--;</span><br><span class="line">        <span class="comment">// 解锁</span></span><br><span class="line">        pthread_cond_signal(&amp;pool-&gt;notFull);</span><br><span class="line">        pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;thread %ld start working...\n&quot;</span>, pthread_self());</span><br><span class="line">        pthread_mutex_lock(&amp;pool-&gt;mutexBusy);</span><br><span class="line">        pool-&gt;busyNum++;</span><br><span class="line">        pthread_mutex_unlock(&amp;pool-&gt;mutexBusy);</span><br><span class="line">        task.function(task.arg);</span><br><span class="line">        <span class="built_in">free</span>(task.arg);</span><br><span class="line">        task.arg = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;thread %ld end working...\n&quot;</span>, pthread_self());</span><br><span class="line">        pthread_mutex_lock(&amp;pool-&gt;mutexBusy);</span><br><span class="line">        pool-&gt;busyNum--;</span><br><span class="line">        pthread_mutex_unlock(&amp;pool-&gt;mutexBusy);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">manager</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    ThreadPool *pool = (ThreadPool *)arg;</span><br><span class="line">    <span class="keyword">while</span> (!pool-&gt;shutdown)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 每隔3s检测一次</span></span><br><span class="line">        sleep(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取出线程池中任务的数量和当前线程的数量</span></span><br><span class="line">        pthread_mutex_lock(&amp;pool-&gt;mutexPool);</span><br><span class="line">        <span class="type">int</span> queueSize = pool-&gt;queueSize;</span><br><span class="line">        <span class="type">int</span> liveNum = pool-&gt;liveNum;</span><br><span class="line">        pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取出忙的线程的数量</span></span><br><span class="line">        pthread_mutex_lock(&amp;pool-&gt;mutexBusy);</span><br><span class="line">        <span class="type">int</span> busyNum = pool-&gt;busyNum;</span><br><span class="line">        pthread_mutex_unlock(&amp;pool-&gt;mutexBusy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加线程</span></span><br><span class="line">        <span class="comment">// 任务的个数&gt;存活的线程个数 &amp;&amp; 存活的线程数&lt;最大线程数</span></span><br><span class="line">        <span class="keyword">if</span> (queueSize &gt; liveNum &amp;&amp; liveNum &lt; pool-&gt;maxNum)</span><br><span class="line">        &#123;</span><br><span class="line">            pthread_mutex_lock(&amp;pool-&gt;mutexPool);</span><br><span class="line">            <span class="comment">// int counter = 0;</span></span><br><span class="line">            <span class="comment">// for (int i = 0; i &lt; pool-&gt;maxNum &amp;&amp; counter &lt; NUMBER &amp;&amp; pool-&gt;liveNum &lt; pool-&gt;maxNum; ++i)</span></span><br><span class="line">            <span class="comment">// &#123;</span></span><br><span class="line">            <span class="comment">//     if (pool-&gt;threadIDs[i] == 0)</span></span><br><span class="line">            <span class="comment">//     &#123;</span></span><br><span class="line">            <span class="comment">//         pthread_create(&amp;pool-&gt;threadIDs[i], NULL, worker, pool);</span></span><br><span class="line">            <span class="comment">//         counter++;</span></span><br><span class="line">            <span class="comment">//         pool-&gt;liveNum++;</span></span><br><span class="line">            <span class="comment">//     &#125;</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pool-&gt;maxNum&amp;&amp;pool-&gt;liveNum&lt;queueSize&amp;&amp;pool-&gt;liveNum&lt;pool-&gt;maxNum;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(pool-&gt;threadIDs[i]==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//printf(&quot;!!\n&quot;);</span></span><br><span class="line">                    pthread_create(&amp;pool-&gt;threadIDs[i], <span class="literal">NULL</span>, worker, pool);</span><br><span class="line">                    pool-&gt;liveNum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 销毁线程</span></span><br><span class="line">        <span class="comment">// 忙的线程*2 &lt; 存活的线程数 &amp;&amp; 存活的线程&gt;最小线程数</span></span><br><span class="line">        <span class="comment">// if (busyNum * 2 &lt; liveNum &amp;&amp; liveNum &gt; pool-&gt;minNum)</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     pthread_mutex_lock(&amp;pool-&gt;mutexPool);</span></span><br><span class="line">        <span class="comment">//     pool-&gt;exitNum = NUMBER;</span></span><br><span class="line">        <span class="comment">//     pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span></span><br><span class="line">        <span class="comment">//     // 让工作的线程自杀</span></span><br><span class="line">        <span class="comment">//     for (int i = 0; i &lt; NUMBER; ++i)</span></span><br><span class="line">        <span class="comment">//     &#123;</span></span><br><span class="line">        <span class="comment">//         pthread_cond_signal(&amp;pool-&gt;notEmpty);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">if</span>(busyNum&lt;liveNum&amp;&amp;liveNum&gt;pool-&gt;minNum)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> exitNumber=liveNum-busyNum;</span><br><span class="line">            <span class="keyword">if</span>(busyNum &lt; pool-&gt;minNum)</span><br><span class="line">            &#123;</span><br><span class="line">                exitNumber=liveNum-pool-&gt;minNum;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                exitNumber=liveNum-busyNum;</span><br><span class="line">            &#125;</span><br><span class="line">            pthread_mutex_lock(&amp;pool-&gt;mutexPool);</span><br><span class="line">            pool-&gt;exitNum = exitNumber;</span><br><span class="line">            pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line">            <span class="comment">// 让工作的线程自杀</span></span><br><span class="line">            <span class="comment">//printf(&quot;要杀死的个数：%d\n&quot;, exitNumber);</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; exitNumber; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                pthread_cond_signal(&amp;pool-&gt;notEmpty);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">threadExit</span><span class="params">(ThreadPool *pool)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> tid = pthread_self();</span><br><span class="line">    <span class="comment">//(&quot;begin que:\n&quot;);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pool-&gt;maxNum; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//printf(&quot;%d:%ld\n&quot;,i,pool-&gt;threadIDs[i]);</span></span><br><span class="line">        <span class="keyword">if</span> (pool-&gt;threadIDs[i] == tid)</span><br><span class="line">        &#123;</span><br><span class="line">            pthread_mutex_lock(&amp;pool-&gt;mutexPool);</span><br><span class="line">            pool-&gt;threadIDs[i] = <span class="number">0</span>;</span><br><span class="line">            pthread_mutex_unlock(&amp;pool-&gt;mutexPool);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;threadExit() called, %ld exiting...\n&quot;</span>, tid);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//printf(&quot;\n\n&quot;);</span></span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;threadPool.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">taskFunc</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = *(<span class="type">int</span> *)arg;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;thread %ld is working, number = %d\n&quot;</span>,</span><br><span class="line">           pthread_self(), num);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">threadPool_test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建线程池</span></span><br><span class="line">    ThreadPool *pool = threadPoolCreate(<span class="number">3</span>, <span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> *num = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">        *num = i + <span class="number">100</span>;</span><br><span class="line">        threadPoolAdd(pool, taskFunc, num);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;poolsestroy!\n&quot;</span>);</span><br><span class="line">    threadPoolDestroy(pool);</span><br><span class="line">    sleep(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">    threadPool_test();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	它返回一个非负整数，表示系统支持的并发线程数。如果该值不可计算或定义不正确，则返回0。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">thread::<span class="built_in">hardware_concurrency</span>()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>STC USB-Mini使用体验</title>
    <url>/posts/59dc.html</url>
    <content><![CDATA[<p>实验室购得了一批高级的STC下载工具，集普通USB转TTL、脱机下载、仿真调试多功能与一体的工具，仅仅是体验了他的所有功能，就花费了一天的时间。</p>
<span id="more"></span>

<p>引脚功能：</p>
<p><img src="/./youdaonote/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/images/WEBRESOURCEdbc75bbd6067aa6b125bf7e74a0f3171%E6%88%AA%E5%9B%BE.png"></p>
<p>一、在线下载（相当于普通的USB转TTL）</p>
<p>S-Vcc给单片机供电，单片机本身不能接自己的供电电源，下载成功后如果要做串口使用（USB转串口直通模式），按下 Key1 ➔ 按下 Key2 ➔ 松开 Key2 ➔ 松开 Key1，这时就和普通的USB转TTL无差别了，若想关闭直通模式，按下Key2即可</p>
<p>二、脱机下载模式</p>
<p>先把程序下载到USB-Mini中，然后有几种方案进行脱机下载（只拿USB-Mini去给单片机下载程序）</p>
<p>1、单片机本身有电源供电</p>
<p>用User-Vcc给USB-Mini供电，USB-mini不再需要电源，单片机反过来给USB-Mini供电，在冷启动后自动下载程序，不需要按键。</p>
<p>2、单片机无电源供电</p>
<p>用S-Vcc给USB-Mini供电，USB-Mini给单片机供电，在按下Key1后，下载程序。</p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title>ida</title>
    <url>/posts/343b.html</url>
    <content><![CDATA[<p>按下F5可以看伪代码</p>
<span id="more"></span>

]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title>alist网盘融合</title>
    <url>/posts/8225.html</url>
    <content><![CDATA[<p>手机端配置：</p>
<span id="more"></span>

<p>&#x9;可以使用CX文件管理器</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/Screenshot_2024-06-16-20-17-25-09_c2be9d5517208fe.jpg"></p>
<p>电脑端配置：</p>
<p>&#x9;可以使用RaiDrive</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20240616202327.png"></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title>git操作</title>
    <url>/posts/ef4.html</url>
    <content><![CDATA[<h1 id="记一次在ubuntun上使用拉取github问题"><a href="#记一次在ubuntun上使用拉取github问题" class="headerlink" title="记一次在ubuntun上使用拉取github问题"></a>记一次在ubuntun上使用拉取github问题</h1><span id="more"></span>

<p>​初始化：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">init</span></span><br></pre></td></tr></table></figure>

<p>添加远程仓库：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">git remote <span class="keyword">add </span><span class="keyword">origin </span>仓库url</span><br></pre></td></tr></table></figure>

<p>origin把服务器的仓库内容同步到本地仓库：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git pull origin 分支名</span><br><span class="line"></span><br><span class="line">//如果出现这种错误：fatal: refusing to merge unrelated histories，可以这样：</span><br><span class="line">git pull origin <span class="keyword">master</span> <span class="title">--allow-unrelated-histories</span></span><br></pre></td></tr></table></figure>

<p>把本地的内容更新到服务器：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将文件添加到Git的暂存区</span></span><br><span class="line"><span class="symbol">git</span> <span class="keyword">add</span> .    </span><br><span class="line"></span><br><span class="line"><span class="comment">//从Git的暂存区提交版本到仓库，参数-m后为当次提交的备注信息</span></span><br><span class="line"><span class="symbol">git</span> commit -m <span class="string">&quot;跟新过的&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将本地的Git仓库信息推送上传到服务器</span></span><br><span class="line"><span class="symbol">git</span> <span class="keyword">push</span> origin 分支名</span><br></pre></td></tr></table></figure>

<p>分支：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查看分支 </span></span><br><span class="line">    <span class="comment">//前面加*的分支，表示当前所在分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment">//新建分支</span></span><br><span class="line">git branch 新建分支名</span><br><span class="line"></span><br><span class="line"><span class="comment">//切换分支</span></span><br><span class="line">git checkout 要切换的分支名</span><br></pre></td></tr></table></figure>

<p>把仓库所有远程分支都拷贝到本地仓库一份：</p>
<p>详细教程:<a href="https://blog.csdn.net/weixin_41287260/article/details/98987135">(130条消息) 如何使用Git克隆GitHub仓库的所有分支_git克隆所有分支_秦时明月之君临天下的博客-CSDN博客</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>查看所有远程分支：</span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>执行这条命令，就能把远程分支都拷贝到本地仓库一份</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> `git branch -r | grep -v -- <span class="string">&#x27;-&gt;&#x27;</span>`; <span class="keyword">do</span> git branch --track <span class="variable">$&#123;b##origin/&#125;</span> <span class="variable">$b</span>; done</span><br></pre></td></tr></table></figure>

<p>迁移仓库，把原仓库所有东西移到新仓库：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span>以bare的方式克隆老仓库，克隆裸库</span><br><span class="line">git clone <span class="params">--bare</span> https:<span class="string">//github.com/exampleuser/old-repository.git</span></span><br><span class="line"></span><br><span class="line"><span class="string">//push</span>到新仓库</span><br><span class="line">git push <span class="params">--mirror</span> 新仓库</span><br></pre></td></tr></table></figure>

<p>直接在vscode上pull：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">//报错</span><br><span class="line">&gt; git pull --<span class="keyword">tags</span></span><br><span class="line">There <span class="keyword">is</span> <span class="keyword">no</span> tracking information <span class="keyword">for</span> the current branch.</span><br><span class="line">Please specify which branch you want <span class="keyword">to</span> merge with.</span><br><span class="line">See git-pull(<span class="number">1</span>) <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">    git pull <span class="symbol">&lt;remote&gt;</span> <span class="symbol">&lt;branch&gt;</span></span><br><span class="line"></span><br><span class="line">If you wish <span class="keyword">to</span> <span class="keyword">set</span> tracking information <span class="keyword">for</span> this branch you can <span class="keyword">do</span> <span class="keyword">so</span> with:</span><br><span class="line"></span><br><span class="line">    git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span>=origin/<span class="symbol">&lt;branch&gt;</span> master</span><br><span class="line">    </span><br><span class="line">//因为本地分支和远程分支没有建立联系</span><br><span class="line">git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span>=origin/远程分支的名字  本地分支的名字</span><br></pre></td></tr></table></figure>

<p>使用vscode配置完远程仓库地址后，要先在本地创建一个本地仓库，才能正常的拉取推送操作  git checkout master</p>
<p>拉取github上的仓库一直提示我输入密码，关键怎么也输不对，我把公钥也配给github后台了，用而同样的方法gittee就没有问题。这个问题困扰我了好久，今天终于算是解决了，弄懂了背后的原因。</p>
<p>ping github.com没有问题，ping ssh.github.com也没问题，但是：</p>
<p>(base) jiabao@jiabao-vm:~&#x2F;.ssh$ ssh -T -p 443 <a href="mailto:&#x67;&#x69;&#116;&#64;&#x73;&#115;&#x68;&#46;&#103;&#105;&#x74;&#104;&#117;&#98;&#x2e;&#99;&#111;&#x6d;">&#x67;&#x69;&#116;&#64;&#x73;&#115;&#x68;&#46;&#103;&#105;&#x74;&#104;&#117;&#98;&#x2e;&#99;&#111;&#x6d;</a></p>
<p>ssh: connect to host ssh.github.com port 443: Connection refused</p>
<p>解决方案：在<a href="https://ipaddress.com/website/ssh.github.com">https://ipaddress.com/website/ssh.github.com</a>网站找到ssh.github.com对应的ip地址，ssh -T -p 443 git@对应的ip地址 应该是没问题的，以后拉取推送总不能都把ssh.github.com替换成对应的ip地址吧，那样也太low了，可以在 ~&#x2F;.ssh&#x2F; 路径下新建一个config文件，编辑以下内容：</p>
<p>Host github.com</p>
<p>User <a href="mailto:&#x37;&#50;&#x34;&#x30;&#51;&#50;&#57;&#51;&#x31;&#x40;&#x71;&#x71;&#46;&#x63;&#x6f;&#109;">&#x37;&#50;&#x34;&#x30;&#51;&#50;&#57;&#51;&#x31;&#x40;&#x71;&#x71;&#46;&#x63;&#x6f;&#109;</a></p>
<p>Hostname ssh.github.com    改为  140.82.113.35</p>
<p>PreferredAuthentications publickey</p>
<p>IdentityFile ~&#x2F;.ssh&#x2F;id_rsa</p>
<p>Port 443</p>
<p>我的疑问是，看了一篇博主的文章说是域名解析被污染了，但是为什么 ping ssh.github.com 没问题， ssh -T -p 443 <a href="http://git@ssh.github.com/">git@ssh.github.com</a> 为什么会有问题？</p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title>nc网络军刀</title>
    <url>/posts/8c99.html</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><span id="more"></span>



<p>-g&lt;网关&gt; 设置路由器跃程通信网关，最多可设置 8 个。</p>
<p>-G&lt;指向器数目&gt; 设置来源路由指向器，其数值为 4 的倍数。</p>
<p>-h 在线帮助。</p>
<p>-i&lt;延迟秒数&gt; 设置时间间隔，以便传送信息及扫描通信端口。</p>
<p>-l 使用监听模式，管控传入的资料。</p>
<p>-n 直接使用 IP 地址，而不通过域名服务器。</p>
<p>-o&lt;输出文件&gt; 指定文件名称，把往来传输的数据以 16 进制字码倾倒成该文件保存。</p>
<p>-p&lt;通信端口&gt; 设置本地主机使用的通信端口。</p>
<p>-r 乱数指定本地与远端主机的通信端口。</p>
<p>-s&lt;来源位址&gt; 设置本地主机送出数据包的 IP 地址。</p>
<p>-u 使用 UDP 传输协议。</p>
<p>-v 显示指令执行过程。</p>
<p>-w&lt;超时秒数&gt; 设置等待连线的时间。</p>
<p>-z 使用 0字节 输入&#x2F;输出模式，只在扫描通信端口时使用。</p>
<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><h3 id="测试TCP-UDP指定端口通不通"><a href="#测试TCP-UDP指定端口通不通" class="headerlink" title="测试TCP&#x2F;UDP指定端口通不通"></a>测试TCP&#x2F;UDP指定端口通不通</h3><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -zv ip port</span><br><span class="line"></span><br><span class="line">(base) jiabao@jiabao-vm:~/桌面$ nc -zv  192.168.73.1 8080</span><br><span class="line">Connection to 192.168.73.1 8080 port [tcp/http-alt] succeeded!</span><br></pre></td></tr></table></figure>

<h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -zuv ip port</span><br><span class="line"></span><br><span class="line">(base) jiabao@jiabao-vm:~/桌面$ nc -zuv  192.168.73.1 8080</span><br><span class="line">Connection to 192.168.73.1 8080 port [udp/*] succeeded!</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="作为客户端进行消息透传"><a href="#作为客户端进行消息透传" class="headerlink" title="作为客户端进行消息透传"></a>作为客户端进行消息透传</h3><p>输入消息，按下回车发送（还不清楚怎么发送换行），服务端返回的消息也可以显示</p>
<h4 id="TCP-1"><a href="#TCP-1" class="headerlink" title="TCP"></a>TCP</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -v 192.168.73.1 8080</span><br></pre></td></tr></table></figure>

<h4 id="UDP-1"><a href="#UDP-1" class="headerlink" title="UDP"></a>UDP</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -uv 192.168.7.1 8080</span><br></pre></td></tr></table></figure>

<h3 id="作为服务端进行消息透传"><a href="#作为服务端进行消息透传" class="headerlink" title="作为服务端进行消息透传"></a>作为服务端进行消息透传</h3><p>输入消息，按下回车发送（还不清楚怎么发送换行），客户端返回的消息也可以显示</p>
<h4 id="TCP-2"><a href="#TCP-2" class="headerlink" title="TCP"></a>TCP</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lp 8888	<span class="comment">#-pl就不行 加-v想显示详细信息也不行</span></span><br></pre></td></tr></table></figure>

<h4 id="UDP-2"><a href="#UDP-2" class="headerlink" title="UDP"></a>UDP</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -ulp 8888	</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu虚拟机</title>
    <url>/posts/6f69.html</url>
    <content><![CDATA[<p>一、安装VMware Workstation Pro</p>
<span id="more"></span>

<p>直接去官网下载最新即可，下载速度也很快，网上也有很多密钥</p>
<p>二、下载ununtu镜像文件</p>
<p>ubuntu官网下载太慢，可以去清华镜像</p>
<p>三、安装ubuntu</p>
<p>3.1新建虚拟机</p>
<p>Ubuntun 64位</p>
<p>使用网络地址转换（NAT）</p>
<p><img src="https://s2.loli.net/2024/09/21/3C5U9DtObhBrweY.png"></p>
<p>安装Ubuntu的时候屏幕太小看不到下一步，点不到继续按钮：</p>
<p>alt + f7</p>
<p>sudo 不用输密码：</p>
<ol>
<li><p>先切换到root用户，首次切换root用户需要初始化密码 sudo passwd</p>
</li>
<li><p>sudo vim &#x2F;etc&#x2F;sudoers</p>
</li>
<li><p>在文件最后一行添加  用户名 ALL&#x3D;(ALL)	NOPASSWD:ALL</p>
</li>
</ol>
<p>三种网络模式：</p>
<ol>
<li><p>桥接模式</p>
</li>
<li><p>就相当与一台实际的物理机，有实际的IP地址</p>
</li>
<li><p>NAT模式</p>
</li>
<li><p>虚拟机使用主机的网络，有一个虚拟的路由器和虚拟的IP，相当于主机是一个路由器，可以访问外网，但是外网访问不了虚拟机</p>
</li>
<li><p>仅主机模式</p>
</li>
<li><p>只有主机与虚拟机之间可以通讯</p>
</li>
</ol>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title>低代码&amp;编程思维训练</title>
    <url>/posts/c6ba.html</url>
    <content><![CDATA[<h1 id="​shineblink"><a href="#​shineblink" class="headerlink" title="​shineblink"></a>​shineblink</h1><span id="more"></span>



<p>特点：官网资料详细，用Lua编程语言（介于c与python之间），不需要开发环境，板子内置编译器，导致下载代码方便（把代码放到TF卡中就不用管了），与机智云很好的配合，联网容易上手。</p>
<p>官网：<a href="http://www.shineblink.com/" title="shineblink">shineblink</a></p>
<h1 id="x20-天问Block"><a href="#x20-天问Block" class="headerlink" title="&#x20;天问Block"></a>&#x20;天问Block</h1><p>51STC图形化编程，拖拉拽方式，习惯了写代码的方式后我试了下感觉不是很好</p>
<p>官网：<a href="http://www.haohaodada.com/" title="好好搭搭在线">好好搭搭在线</a></p>
<h1 id="原型图设计"><a href="#原型图设计" class="headerlink" title="原型图设计"></a>原型图设计</h1><p><code>axureRP</code></p>
<h1 id="代码战争"><a href="#代码战争" class="headerlink" title="代码战争"></a>代码战争</h1><p>像过关打游戏一样，训练编程思维</p>
<p>官网需要开会员</p>
<p>官网：<a href="https://codecombat.cn/">CodeCombat - 玩游戏学编程|零基础Python, Javascript入门|CodeCombat 个人版 | CodeCombat</a></p>
<h1 id="Scratch"><a href="#Scratch" class="headerlink" title="Scratch"></a>Scratch</h1><p>像搭积木一样，训练编程思维</p>
<p>官网：<a href="https://www.scratch5.com/">Scratch编程</a></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title>云服务器</title>
    <url>/posts/c933.html</url>
    <content><![CDATA[<h1 id="frp内网穿透"><a href="#frp内网穿透" class="headerlink" title="frp内网穿透"></a>frp内网穿透</h1><span id="more"></span>

<pre><code>123.56.109.110
</code></pre>
<p>密码：123456sji.</p>
<p>wget <a href="https://github.com/fatedier/frp/releases/download/v0.15.1/frp_0.15.1_linux_amd64.tar.gz">https://github.com/fatedier/frp/releases/download/v0.15.1/frp_0.15.1_linux_amd64.tar.gz</a><br>tar xzvf frp_0.15.1_linux_amd64.tar.gz</p>
<p><a href="https://github.com/fatedier/frp/releases/download/v0.58.1/frp_0.58.1_linux_arm64.tar.gz">https://github.com/fatedier/frp/releases/download/v0.58.1/frp_0.58.1_linux_arm64.tar.gz</a></p>
<p><a href="https://github.com/fatedier/frp/releases/download/v0.58.1/frp_0.58.1_linux_amd64.tar.gz">https://github.com/fatedier/frp/releases/download/v0.58.1/frp_0.58.1_linux_amd64.tar.gz</a></p>
<p>使用 <code>arch</code> 查看架构，下载对应版本</p>
<p>服务端：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bindPort = 7000</span><br><span class="line"><span class="comment">#vHostHTTPPort = 1234</span></span><br><span class="line">webServer.addr = <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">webServer.port = 8500</span><br><span class="line">webServer.user = <span class="string">&quot;admin&quot;</span></span><br><span class="line">webServer.password = <span class="string">&quot;200105&quot;</span></span><br></pre></td></tr></table></figure>

<p>客户端：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">serverAddr = <span class="string">&quot;123.56.109.110&quot;</span></span><br><span class="line">serverPort = 7000</span><br><span class="line"></span><br><span class="line">[[proxies]]</span><br><span class="line">name = <span class="string">&quot;ssh&quot;</span></span><br><span class="line"><span class="built_in">type</span> = <span class="string">&quot;tcp&quot;</span></span><br><span class="line">localIP = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">localPort = 8022</span><br><span class="line">remotePort = 1235</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="apache–web服务器"><a href="#apache–web服务器" class="headerlink" title="apache–web服务器"></a>apache–web服务器</h1><ol>
<li>安装：pkg install apache2</li>
<li>启动：apachectl start</li>
<li>停止：apachectl stop</li>
<li>重启：apachectl restart</li>
</ol>
<p>修改配置文件：<code>vim $PREFIX/etc/apache2/httpd.conf</code>,找到<code>ServerName</code>解开注释,<code>www.example.com</code>改为<code>127.0.0.1:8080</code></p>
<p>&#x2F;data&#x2F;data&#x2F;com.termux&#x2F;files&#x2F;usr&#x2F;share&#x2F;apache2&#x2F;default-site&#x2F;htdocs&#x2F;</p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title>虚拟摄像头</title>
    <url>/posts/6264.html</url>
    <content><![CDATA[<p><a href="https://www.52pojie.cn/thread-1610562-1-1.html">Iriun Webcam 手机变成PC摄像头V2.7.2 - 『精品软件区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p>
<span id="more"></span>

<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20240114200553.png"></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title>adb命令</title>
    <url>/posts/771d.html</url>
    <content><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><span id="more"></span>



<h2 id="可以看是否与手机建立连接-adb-devices"><a href="#可以看是否与手机建立连接-adb-devices" class="headerlink" title="可以看是否与手机建立连接 adb devices"></a>可以看是否与手机建立连接 adb devices</h2><p>建立连接：</p>
<p>List of devices attached<br>10AD5C2HHQ0012H device</p>
<p>没有建立连接：</p>
<p>List of devices attached</p>
<h2 id="查看当前页面的包名以及活动名-adb-shell-dumpsys-window-findstr-mCurrentFocus"><a href="#查看当前页面的包名以及活动名-adb-shell-dumpsys-window-findstr-mCurrentFocus" class="headerlink" title="查看当前页面的包名以及活动名 adb shell dumpsys window | findstr mCurrentFocus"></a>查看当前页面的包名以及活动名 adb shell dumpsys window | findstr mCurrentFocus</h2>]]></content>
      <categories>
        <category>手机端</category>
      </categories>
  </entry>
  <entry>
    <title>手机端部署HomeAssistant</title>
    <url>/posts/eb39.html</url>
    <content><![CDATA[<p>&#x9;利用闲置的手机部署HomeAssistant，无需Root，前提是安装过Termux，最好也安装过ssh</p>
<span id="more"></span>

<p>刚开始安装的python版本是python3.11</p>
<p>alias python1&#x3D;’python3.11’</p>
<p>查看pip是使用的哪个版本的python：</p>
<p>pip -V</p>
<p>指定pip版本安装：</p>
<p>pip3.9 install</p>
<p>pip3.11 install</p>
<p>退出python虚拟环境：deactivate</p>
<p><a href="https://github.com/talss89/termux-home-assistant-installer">talss89&#x2F;termux-home-assistant-installer: A script to provision Home Assistant Core on an Android &#x2F; Termux device. This is not officially supported. (github.com)</a></p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20240605192701.png"></p>
<p>使用阿里云镜像安装docker：</p>
<p><a href="https://blog.csdn.net/qq_45689158/article/details/140006211">ubuntu上使用阿里镜像源安装docker，以及配置docker的镜像环境_ubuntu docker 镜像源-CSDN博客</a></p>
<p>“<a href="https://3rvgweq4.mirror.aliyuncs.com&quot;,/">https://3rvgweq4.mirror.aliyuncs.com&quot;，</a></p>
<p>sudo docker run -d   –name homeassistant   –privileged   –restart&#x3D;unless-stopped   -e TZ&#x3D;Asia&#x2F;Shanghai   -v &#x2F;home&#x2F;jiabao&#x2F;桌面&#x2F;HA:&#x2F;config   –network&#x3D;host   homeassistant&#x2F;home-assistant:stable</p>
]]></content>
      <categories>
        <category>手机端</category>
      </categories>
  </entry>
  <entry>
    <title>windows建立FTP站点</title>
    <url>/posts/79bc.html</url>
    <content><![CDATA[<h1 id="一、开启FTP服务"><a href="#一、开启FTP服务" class="headerlink" title="一、开启FTP服务"></a>一、开启FTP服务</h1><span id="more"></span>



<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20231218183557.png"></p>
<h1 id="二、开启FTP的防火墙"><a href="#二、开启FTP的防火墙" class="headerlink" title="二、开启FTP的防火墙"></a>二、开启FTP的防火墙</h1><p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20231218183804.png"></p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20231218183928.png"></p>
<h1 id="三、在IIS控制台添加站点"><a href="#三、在IIS控制台添加站点" class="headerlink" title="三、在IIS控制台添加站点"></a>三、在IIS控制台添加站点</h1><p>如果打开IIS控制台没出现在频幕上，可能是没接扩展屏但出现在了原来扩展屏的位置上，在win+r运行 <code>inetmgr.exe /reset</code></p>
<h1 id="四、遇到的问题"><a href="#四、遇到的问题" class="headerlink" title="四、遇到的问题"></a>四、遇到的问题</h1><ol>
<li>用网络登录windows不可以，在你输入用户名和密码怎么都不对（远程桌面也是这样），切换到本地用户就行了</li>
<li>匿名登录的用户名是：<code>anonymous</code> ，密码是随意输入一个邮箱就行，如果不能登录把FTP站点文件夹的权限增加一个everyone完全控制</li>
</ol>
<h1 id="五、基本FTP命令"><a href="#五、基本FTP命令" class="headerlink" title="五、基本FTP命令"></a>五、基本FTP命令</h1><p><a href="https://blog.csdn.net/LLittleF/article/details/105492175">关于FTP服务器出现227 Entering Passive Mode错误的解决思路-CSDN博客</a></p>
<p><a href="https://www.cnblogs.com/bkywanly/p/9767246.html">常见的错误：FTP连接时出现“227 Entering Passive Mode” - wanly - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>网页</category>
      </categories>
  </entry>
  <entry>
    <title>外网访问本地站点</title>
    <url>/posts/b506.html</url>
    <content><![CDATA[<h1 id="一、利用IIS"><a href="#一、利用IIS" class="headerlink" title="一、利用IIS"></a>一、利用IIS</h1><span id="more"></span>

<p>使用花生壳内网穿透，把本地ip与端口映射到外网，使其不在同一个局域网内也可访问，这里介绍两个方法供参考，少踩坑。</p>
<h2 id="1、开启IIS服务"><a href="#1、开启IIS服务" class="headerlink" title="1、开启IIS服务"></a>1、开启IIS服务</h2><p>控制面板 – 程序与功能 – 启动或关闭Windows功能 </p>
<p>最好都激活一下</p>
<p><img src="https://s2.loli.net/2024/09/21/NyhQPLoeYrAsGS7.png"></p>
<h2 id="2、配置IIS"><a href="#2、配置IIS" class="headerlink" title="2、配置IIS"></a>2、配置IIS</h2><p>控制面板 – 管理工具 – IIS管理器</p>
<p>添加网站，把  网站名称、物理路径、IP地址、端口  这四个填写好。</p>
<p>坑一：若打开为这个界面</p>
<p><img src="https://s2.loli.net/2024/09/21/nReN921aXJC7bSl.png"></p>
<p>则是，没有权限</p>
<p><img src="https://s2.loli.net/2024/09/21/FxmQud2e5W3nrkp.png"></p>
<p>如果是局域网内打不开，则是防火墙拦截了，开启防火墙</p>
<p><img src="https://s2.loli.net/2024/09/21/X6rbWwNFsienTKI.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/Dho7rWCKizc364b.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/jSgKfVahYAzisl8.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/vrYskycHRO3U9ql.png"></p>
<p>至此，局域网内就能完美访问了</p>
<h2 id="3、花生壳内网穿透"><a href="#3、花生壳内网穿透" class="headerlink" title="3、花生壳内网穿透"></a>3、花生壳内网穿透</h2><p>必须下载客户端，仅仅在网页上配置是没有用的</p>
<p><img src="https://s2.loli.net/2024/09/21/OdUo2YKn1rZEA7j.png"></p>
<h1 id="二、利用VsCode插件Live-Serve"><a href="#二、利用VsCode插件Live-Serve" class="headerlink" title="二、利用VsCode插件Live Serve"></a>二、利用VsCode插件Live Serve</h1><p>这款软件很好用，在代码编辑界面就可以直接跳往浏览器查看效果，而且省去了配置IIS的步骤，直接进行花生壳内网穿透就行。</p>
]]></content>
      <categories>
        <category>网页</category>
      </categories>
  </entry>
  <entry>
    <title>js注意事项</title>
    <url>/posts/b39d.html</url>
    <content><![CDATA[<p>1、按键事件</p>
<span id="more"></span>

<p>onkeydown和onkeyup不区分字母大小写，onkeypress区分字母大小写。</p>
<p>在我们实际开发中，我们更多的使用keydowni和keyup,，它能识别所有的键（包括功能键）</p>
<p>Keypress不识别功能键，但是keyCode属性能区分大小写，返回不同的ASCIH值</p>
]]></content>
      <categories>
        <category>网页</category>
      </categories>
  </entry>
  <entry>
    <title>配置Termux</title>
    <url>/posts/e637.html</url>
    <content><![CDATA[<h1 id="去GitHub下载最新的app"><a href="#去GitHub下载最新的app" class="headerlink" title="去GitHub下载最新的app"></a>去GitHub下载最新的app</h1><span id="more"></span>



<h2 id="查看手机v7还是v8架构"><a href="#查看手机v7还是v8架构" class="headerlink" title="查看手机v7还是v8架构"></a>查看手机v7还是v8架构</h2><h1 id="换国内源"><a href="#换国内源" class="headerlink" title="换国内源"></a>换国内源</h1><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/termux/">termux | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a>下的命令行替换</p>
<h1 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装ssh</h1><p>1、ssh 客户端向 ssh 服务器端发送连接请求</p>
<p>2、ssh 服务器端发送一个随机的信息</p>
<p>3、ssh 客户端使用本地的私钥对服务器端发送过来的信息进行加密</p>
<p>4、ssh 客户端向服务器端发送加密过后的信息</p>
<p>5、ssh 服务器端使用公钥对该信息进行解密</p>
<p>6、若解密之后的信息和之前发送的信息匹配，则信任客户端，否则不信任。</p>
<p>把客户端的公钥给服务器：</p>
<p>ssh-copy-id u0a_362@192.168.150.212 -p 8022</p>
<p>vscode试了不行</p>
<h1 id="root"><a href="#root" class="headerlink" title="root"></a>root</h1><p>&#x9;这里的root只是termux有</p>
<ol>
<li>pkg install proot</li>
<li>进入root：termux-chroot</li>
<li>退出root：exit</li>
</ol>
<h1 id="查看端口占用"><a href="#查看端口占用" class="headerlink" title="查看端口占用"></a>查看端口占用</h1><p>Andorid 10 以下的版本是可以正常使用 netstat 命令</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有端口</span></span><br><span class="line">~ <span class="variable">$ </span>netstat -an</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看8022端口的开放情况</span></span><br><span class="line">~ <span class="variable">$ </span>netstat -an | grep <span class="number">8022</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Andorid 10 及以上版本的 Termux 下无法正常使用 netstat -an 命令</p>
<pre><code># 安装nmap端口扫描神器
~ $ pkg install nmap
 
# 扫描本地端口
~ $ nmap 127.0.0.1
</code></pre>
<h1 id="自启动"><a href="#自启动" class="headerlink" title="自启动"></a>自启动</h1><p>打开Termux会先启动<code>~/.bashrc</code>	 ，在里面编写自启动脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;用户：&quot;</span>$(<span class="built_in">whoami</span>)</span><br><span class="line"><span class="keyword">if</span> pgrep -x <span class="string">&quot;sshd&quot;</span> &gt;/dev/null</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;sshd运行中...&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">nohup</span> sshd &amp;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;自动启动sshd&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> pgrep -x <span class="string">&quot;alist&quot;</span> &gt;/dev/null</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;alist运行中...&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">nohup</span> alist server &amp;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;自动启动alist&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p><code>nohup &amp;</code> 为后台启动，日志也不再当前终端显示，而是在<code>nohup.out</code> 文件中</p>
]]></content>
      <categories>
        <category>手机端</category>
      </categories>
  </entry>
  <entry>
    <title>FFmpeg</title>
    <url>/posts/a4f0.html</url>
    <content><![CDATA[<p>组成：</p>
<span id="more"></span>

<ul>
<li>封装模块AVFormat</li>
<li>编解码AVCodec</li>
<li>滤镜模块AVFilter</li>
<li>视频图像转换swscale</li>
<li>音频转换计算swresample</li>
</ul>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
  </entry>
  <entry>
    <title>51制作贪吃蛇小游戏，附带Proteus仿真</title>
    <url>/posts/a388.html</url>
    <content><![CDATA[<h1 id="一、代码解读"><a href="#一、代码解读" class="headerlink" title="一、代码解读"></a>一、代码解读</h1><span id="more"></span>



<p>一个按钮来启动游戏的开始，开始以后LCD1602上显示当前的关卡和得分，当长到一定长度后会进入下一个关卡，每个关卡移动的速度不一样（越到后面速度越快，用到定时器）</p>
<p>有关蛇和食物里的属性都有很多，考虑使用结构体来存储：</p>
<p>结构体一定要初始化，有的编译器全局结构体可能会初始化0，但最好初始化一下。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Food</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> x;    <span class="comment">// 食物的横坐标</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> y;    <span class="comment">// 食物的纵坐标</span></span><br><span class="line">&#125;food;  <span class="comment">// 食物结构体</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Snake</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> x[SNAKE_Max_Long];</span><br><span class="line">    <span class="type">char</span> y[SNAKE_Max_Long];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Long;     <span class="comment">// 蛇的长度</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Life;     <span class="comment">// 蛇的生命</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Score;    <span class="comment">// 蛇的分数</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Level;    <span class="comment">// 蛇的等级</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Dir;      <span class="comment">// 蛇移动方向</span></span><br><span class="line">&#125;snake; <span class="comment">// 蛇结构体</span></span><br></pre></td></tr></table></figure>

<p>结构体初始化：</p>
<p>每次默认都从一个地方出生，而且方向都向右。</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">//****************初始化蛇的位置等***********************//</span><br><span class="line">static void initSnake()</span><br><span class="line">&#123;</span><br><span class="line">    //********清除内存数据**********//</span><br><span class="line">    unsigned char i<span class="comment">;</span></span><br><span class="line">    for(i<span class="operator">=</span><span class="number">0</span><span class="comment">; i&lt;SNAKE_Max_Long; i++)</span></span><br><span class="line">    &#123;</span><br><span class="line">        snake.x[i]<span class="operator">=</span>-<span class="number">1</span><span class="comment">;</span></span><br><span class="line">        snake.y[i]<span class="operator">=</span>-<span class="number">1</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //********初始化蛇参数**********//</span><br><span class="line">    snake.Long<span class="operator">=</span><span class="number">2</span><span class="comment">;   // 初始化蛇的长度为两节</span></span><br><span class="line">    snake.Life<span class="operator">=</span><span class="number">1</span><span class="comment">;   //初始化蛇活着</span></span><br><span class="line">    if(snake.Level&gt;<span class="number">1</span>)   //不是重新开始，而是新关卡</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        snake.Level <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line">        snake.Score <span class="operator">=</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    snake.Dir<span class="operator">=</span>right<span class="comment">;</span></span><br><span class="line">    snake.x[<span class="number">1</span>]<span class="operator">=</span><span class="number">0</span><span class="comment">;</span></span><br><span class="line">    snake.y[<span class="number">1</span>]<span class="operator">=</span><span class="number">2</span><span class="comment">;</span></span><br><span class="line">    snake.x[<span class="number">0</span>]<span class="operator">=</span><span class="number">1</span><span class="comment">;</span></span><br><span class="line">    snake.y[<span class="number">0</span>]<span class="operator">=</span><span class="number">2</span><span class="comment">;</span></span><br><span class="line">    createFood()<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>食物随机产生：</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> void createFood()</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char i;</span><br><span class="line">    food.<span class="variable language_">x</span> = rand()%WIDTH;</span><br><span class="line">    food.<span class="variable language_">y</span> = rand()%LENGTH;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;snake.Long; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(food.<span class="variable language_">x</span>==snake.<span class="variable language_">x</span>[i] &amp;&amp; food.<span class="variable language_">y</span>==snake.<span class="variable language_">y</span>[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//产生食物成功</span></span><br><span class="line">    <span class="keyword">if</span>(i==snake.Long)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//失败</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        createFood();   <span class="comment">//重新产生</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>蛇运动坐标刷新：</p>
<p>到了一定时间才刷新，这个时间用定时器控制。</p>
<p>看到这个，是不是也想到了滚动字符，也可以这样做，当然也可以在数组里用%来解决。</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> void runSnake()</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char i;</span><br><span class="line">    <span class="comment">// 蛇身体坐标移动，蛇头方向坐标逐渐向蛇尾方向移动</span></span><br><span class="line">    <span class="keyword">for</span>(i=snake.Long; i&gt;<span class="number">0</span>; i--)</span><br><span class="line">    &#123;   </span><br><span class="line">        snake.<span class="variable language_">y</span>[i]=snake.<span class="variable language_">y</span>[i<span class="number">-1</span>];</span><br><span class="line">        snake.<span class="variable language_">x</span>[i]=snake.<span class="variable language_">x</span>[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重新获得蛇的头部位置</span></span><br><span class="line">    <span class="keyword">switch</span>(snake.Dir)</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="keyword">case</span> up:    snake.<span class="variable language_">y</span>[<span class="number">0</span>]-=<span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> down:  snake.<span class="variable language_">y</span>[<span class="number">0</span>]+=<span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> left:  snake.<span class="variable language_">x</span>[<span class="number">0</span>]-=<span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> right: snake.<span class="variable language_">x</span>[<span class="number">0</span>]+=<span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 蛇吃到食物</span></span><br><span class="line">    <span class="keyword">if</span>(snake.<span class="variable language_">x</span>[<span class="number">0</span>]==food.<span class="variable language_">x</span> &amp;&amp; snake.<span class="variable language_">y</span>[<span class="number">0</span>]==food.<span class="variable language_">y</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        snake.Long++;</span><br><span class="line">        snake.Score++;</span><br><span class="line">        createFood();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判定蛇死：</p>
<p>两种情况判定蛇死了。</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">        <span class="comment">// 限定蛇活动范围，超范围就dead</span></span><br><span class="line">        <span class="keyword">if</span>((snake.<span class="variable language_">x</span>[<span class="number">0</span>]&gt;(WIDTH<span class="number">-1</span>)) || (snake.<span class="variable language_">x</span>[<span class="number">0</span>]&lt;<span class="number">0</span>) || (snake.<span class="variable language_">y</span>[<span class="number">0</span>]&gt;(LENGTH<span class="number">-1</span>)) || (snake.<span class="variable language_">y</span>[<span class="number">0</span>]&lt;<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            snake.Life=<span class="number">0</span>;   </span><br><span class="line">            snake.Level=<span class="number">1</span>;</span><br><span class="line">            speedLevel=<span class="number">25</span>;</span><br><span class="line">            keyVal=right;</span><br><span class="line">            LcdShowOver();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 蛇自杀检测</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">4</span>; i&lt;=snake.Long; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(snake.<span class="variable language_">x</span>[i<span class="number">-1</span>]==snake.<span class="variable language_">x</span>[<span class="number">0</span>] &amp;&amp; snake.<span class="variable language_">y</span>[i<span class="number">-1</span>]==snake.<span class="variable language_">y</span>[<span class="number">0</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                snake.Life=<span class="number">0</span>;</span><br><span class="line">                snake.Level=<span class="number">1</span>;</span><br><span class="line">                speedLevel=<span class="number">25</span>;</span><br><span class="line">                keyVal=right;</span><br><span class="line">                LcdShowOver();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>在8*8点阵上显示：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">void drawSnake()</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char <span class="attribute">i</span>=0;</span><br><span class="line">    <span class="keyword">for</span>(<span class="attribute">i</span>=0; i&lt;8; i++) DispRAM[i]=0;</span><br><span class="line">    <span class="keyword">for</span>(<span class="attribute">i</span>=0; i&lt;snake.Long; i++)</span><br><span class="line">        DispRAM[snake.y[i]] |= 1&lt;&lt;snake.x[i];</span><br><span class="line">    scanDisplay(DispRAM);</span><br><span class="line">    drawPoint(food.x, food.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、Proteus图"><a href="#二、Proteus图" class="headerlink" title="二、Proteus图"></a>二、Proteus图</h1><p><img src="https://s2.loli.net/2024/09/21/o6wkCm9lvjHYOeG.png"></p>
<h1 id="三、演示"><a href="#三、演示" class="headerlink" title="三、演示"></a>三、演示</h1>]]></content>
      <categories>
        <category>嵌入式</category>
        <category>MCU</category>
      </categories>
  </entry>
  <entry>
    <title>Yolov5s算法从训练到部署</title>
    <url>/posts/720c.html</url>
    <content><![CDATA[<h1 id="PyTorch-GPU环境搭建"><a href="#PyTorch-GPU环境搭建" class="headerlink" title="PyTorch GPU环境搭建"></a>PyTorch GPU环境搭建</h1><span id="more"></span>

<p>[TOC]</p>
<p>&#x9;本文主要介绍的是使用PyTorch开源神经网络框架GPU版本训练自己制作数据集的Yolov5s目标检测算法，并量化转化为瑞芯微RK系列搭载的NPU加速单元可以推理的rknn格式模型全流程。</p>
<p>&#x9;使用Anaconda虚拟Python环境，在此环境上安装相应显卡驱动版本的PyTorch GPU版本，在PyCharm上训练测试。</p>
<h2 id="查看显卡CUDA版本"><a href="#查看显卡CUDA版本" class="headerlink" title="查看显卡CUDA版本"></a>查看显卡CUDA版本</h2><p>&#x9;显卡型号可以去设备管理器中查看，显卡驱动以及CUDA版本可以在cmd输入以下命令查看：</p>
<pre><code>nvidia-smi
</code></pre>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230530104547.png"></p>
<p>&#x9;可以根据结果看到驱动版本以及CUDA版本，这个CUDA版本要记好，是最高支持的CUDA版本，安装PyTorch时，要安装CUDA版本以下的，根据我的情况，我在接下来要安装CUDA11.2以下版本的PyTorch。</p>
<h2 id="Anaconda安装"><a href="#Anaconda安装" class="headerlink" title="Anaconda安装"></a>Anaconda安装</h2><p>&#x9;去Anaconda官网下载就好，<a href="https://www.anaconda.com/">Anaconda | The World’s Most Popular Data Science Platform</a>，，傻瓜式安装。</p>
<h2 id="PyTorch环境安装"><a href="#PyTorch环境安装" class="headerlink" title="PyTorch环境安装"></a>PyTorch环境安装</h2><p>&#x9;上一步Anaconda安装好后，会在开始栏中有Anaconda终端 Anaconda Prompt，后面会经常使用，可以在桌面上创建一个快捷方式，打开。</p>
<p>&#x9;可以使用如下命令查看有哪些环境存在：</p>
<pre><code>conda env list
</code></pre>
<p>&#x9;新装的肯定只有一个base环境，我们可以再创建一个pytorch虚拟环境来专门安装PyTorch，我的理解是Anaconda相当于VMware一样，WMware是虚拟出操作系统，Anaconda是虚拟出不同的Python环境，我们当然可以在Anaconda下创建多个环境来安装不同版本的PyTorch。</p>
<p>&#x9;创建一个名叫pytorch（随意）的Python3.8的虚拟环境：</p>
<pre><code>conda create -n pytorch python=3.8
</code></pre>
<p>&#x9;当安装好之后呢，就会多出来一个与base并列的pytorch环境，切换到此环境上：</p>
<pre><code>conda activate pytorch
</code></pre>
<p>&#x9;下面就到了安装PyTorch-GPU的环境了，可能会出现各种各样的问题，出现的问题也都不一样，主要还是因为PyTorch包在国外。</p>
<p>&#x9;给环境换国内源；</p>
<pre><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/
conda config --set show_channel_urls yes
</code></pre>
<p>&#x9;生成的配置在系统用户.condarc文件下，也可直接更改此文件。</p>
<p>&#x9;然后去PyTorch官网<a href="https://pytorch.org/">PyTorch</a>去找适合自己显卡CUDA版本的安装命令，最新版可能没有适合的版本，去历史版本中<a href="https://pytorch.org/get-started/previous-versions/#v182-with-lts-support">Previous PyTorch Versions | PyTorch</a>去寻找，</p>
<p>&#x9;我发现这一版本挺合适：</p>
<pre><code>conda install pytorch==1.10.1 torchvision==0.11.2 torchaudio==0.10.1 cudatoolkit=10.2 -c pytorch
</code></pre>
<p>&#x9;一定不要把后面的 ‘-c pytorch (有的版本还有-c conda-forge)’也复制下来，因为这样还是在国外源中下载。pytorch虚拟环境中运行：</p>
<pre><code>conda install pytorch==1.10.1 torchvision==0.11.2 torchaudio==0.10.1 cudatoolkit=10.2
</code></pre>
<p>&#x9;这里总结下可能出现的问题以及解决办法：</p>
<ul>
<li>安装过程中不能科学上网</li>
<li>可能要安装的版本镜像内没有，换其他镜像</li>
<li>当前网络频繁访问镜像，被拒绝访问了，换一个网络试试</li>
<li>实在安装不成功也可离线安装</li>
</ul>
<h2 id="PyCharm中验证"><a href="#PyCharm中验证" class="headerlink" title="PyCharm中验证"></a>PyCharm中验证</h2><p>&#x9;在官网中傻瓜式安装，安装免费社区版就已经够用了。</p>
<p>&#x9;新建一个工程后，选择在Anaconda里已经安装了PyTorch的虚拟环境：</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230530114835.png"><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230530114913.png"></p>
<p>&#x9;验证脚本：</p>
<pre><code>import torch
print(torch.cuda.is_available())
print(torch.backends.cudnn.is_available())
print(torch.cuda_version)
print(torch.backends.cudnn.version())
</code></pre>
<p>&#x9;如果打印的是false，也就是没调用GPU版本的，很有可能是安装了有cpuonly的模块，使用 conda list查看，如果有，用 conda uninstall cpuonly 就好了！</p>
<h1 id="训练算法模型"><a href="#训练算法模型" class="headerlink" title="训练算法模型"></a>训练算法模型</h1><p>&#x9;这里以训练口罩算法模型为例。</p>
<h2 id="克隆Yolov5代码工程"><a href="#克隆Yolov5代码工程" class="headerlink" title="克隆Yolov5代码工程"></a>克隆Yolov5代码工程</h2><p>&#x9;去github仓库克隆<a href="https://github.com/ultralytics/yolov5/tree/v5.0">GitHub - ultralytics&#x2F;yolov5 at v5.0</a>这个版本即可。</p>
<p>&#x9;把工程下repuirements.txt依赖包安装一下：</p>
<pre><code>pip install -r requirements.txt -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com
pip install pyqt5 -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com	
pip install pyqt5 -i https://pypi.mirrors.ustc.edu.cn/simple/ --trusted-host pypi.mirrors.ustc.edu.cn
pip install pyqt5 -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com
pip install pyqt5 -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com
pip install pyqt5 -i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.edu.cn
pip install pyqt5 -i http://pypi.mirrors.ustc.edu.cn/simple/ --trusted-host pypi.mirrors.ustc.edu.cn

永久换源
# 清华源
pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
# 阿里源
pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/
# 腾讯源
pip config set global.index-url http://mirrors.cloud.tencent.com/pypi/simple
# 豆瓣源
pip config set global.index-url http://pypi.douban.com/simple/
# 换回默认源
pip config unset global.index-url
</code></pre>
<h2 id="制作数据集"><a href="#制作数据集" class="headerlink" title="制作数据集"></a>制作数据集</h2><p>&#x9;首先要准备含有检测目标（戴口罩和不带口罩）的图片集，这里我使用OpenCV库写了一个小工具，显示摄像头实时视频流，按下空格键就会保存当前图片帧数据以当前时间戳的方式命名（不会造成重复）保存到指定文件夹。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************************************************</span></span><br><span class="line"><span class="comment"> *** @Description: 从videoUrl中按下空格截取图片到directory目录中，以时间戳命名</span></span><br><span class="line"><span class="comment"> *** @param &#123;string&#125; &amp;videoUrl 视频流</span></span><br><span class="line"><span class="comment"> *** @param &#123;string&#125; &amp;directory 截取图片保存目录</span></span><br><span class="line"><span class="comment"> *** @return &#123;void&#125;</span></span><br><span class="line"><span class="comment"> ***********************************************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">capture_imgs</span><span class="params">(<span class="type">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;videoUrl, <span class="type">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;directory)</span></span><br><span class="line">&#123;</span><br><span class="line">    cv::Mat frame;</span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="type">datetime_t</span> dt;</span><br><span class="line">    <span class="built_in">string</span> imgName;</span><br><span class="line">    <span class="type">char</span> buf1[DATETIME_FMT_BUFLEN];</span><br><span class="line">    cv::VideoCapture capture;</span><br><span class="line">    <span class="keyword">if</span>(videoUrl.size()&amp;&amp;videoUrl.front()==<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        capture.open(atoi(videoUrl.c_str()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        capture.open(videoUrl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!capture.isOpened())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;could not read this video file...\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> fps = capture.get(cv::CAP_PROP_FPS);</span><br><span class="line">    <span class="type">int</span> delay = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (fps)</span><br><span class="line">    &#123;</span><br><span class="line">        delay = <span class="number">1000</span> / fps;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;delay:&quot;</span> &lt;&lt; delay &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fps:&quot;</span> &lt;&lt; fps &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mkdir(directory.c_str());</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (capture.read(frame))</span><br><span class="line">        &#123;</span><br><span class="line">            imshow(videoUrl, frame);</span><br><span class="line">            key = waitKey(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (key == <span class="number">27</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="number">32</span>) <span class="comment">// 空格</span></span><br><span class="line">            &#123;</span><br><span class="line">                dt = datetime_now();</span><br><span class="line">                imgName = datetime_fmt_iso(&amp;dt, buf1);</span><br><span class="line">                <span class="built_in">string</span> filePath = directory + imgName;</span><br><span class="line">                filePath.pop_back();</span><br><span class="line">                filePath += <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">                filePath = regex_replace(filePath, regex(<span class="string">&quot;:&quot;</span>), <span class="string">&quot;-&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;imgname:%s\n&quot;</span>, filePath.c_str());</span><br><span class="line">                <span class="keyword">if</span> (imwrite(filePath, frame))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;save success!\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;save fail!\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            capture.release(); <span class="comment">// 必须加release释放，否则会内存泄漏</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;未获取到帧数据,重新获取打开&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">if</span> (videoUrl.size() &amp;&amp; videoUrl.front() == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                capture.open(atoi(videoUrl.c_str()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                capture.open(videoUrl);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x9;然后使用labelImg目标检测标注工具生成这些图片的标签文件，注意labelImg必须是Python3.9的版本，我们可以使用Anaconda虚拟出来一个，手动绘制图片内所有戴口罩或不带口罩区域，然后选择标签，绘制出图片区域内所有目标，切换下一张图片后，会自动生成Yolov5s支持的YOLO格式标签文件。标注界面如下图所示：</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230530120808.png"></p>
<p>&#x9;YOLO标签格式为：&lt;object-class&gt; &lt;x&gt; &lt;y&gt; &lt;width&gt; &lt;height&gt;，object-class是目标类型的整形索引，x、y是目标的中心坐标，width、height是目标的宽和高。这些坐标是通过归一化处理，其中x、width是使用原图的width进行归一化处理；而y、height是使用原图的height进行归一化处理得到的。以上图生成的标签为例，生成的标签为：1  0.576302  0.344907  0.096354  0.184259，说明如下表所示：</p>
<table>
<thead>
<tr>
<th align="left">1</th>
<th align="left">0.576302</th>
<th align="left">0.344907</th>
<th align="left">0.096354</th>
<th align="left">0.184259</th>
</tr>
</thead>
<tbody><tr>
<td align="left">标签的类别</td>
<td align="left">框的中心横坐标与图像宽度之比</td>
<td align="left">框的中心横坐标与图像宽度之比</td>
<td align="left">框的宽度</td>
<td align="left">框的高度</td>
</tr>
</tbody></table>
<p>&#x9;结构：</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230530121907.png"></p>
<p>imgs：要标注的图片存放目录</p>
<p>labels：生成的标签文件存放目录</p>
<p>classes.txt：标签目录，增加这个的好处是在labelImg中可以直接选择，而不用在再输入标签。</p>
<h2 id="划分训练集、验证集"><a href="#划分训练集、验证集" class="headerlink" title="划分训练集、验证集"></a>划分训练集、验证集</h2><p>&#x9;把生成的标签文件与图像集还要划分为训练集与验证集，这里我写了一个脚本使用随机种子数按照训练集与验证集以3：1的比例随机划分，我看网上有些教程需要先将yolo格式（txt）转为voc格式（xml），再用代码直接将voc格式转为yolo并直接划分训练集与验证集，不然会出错，我认为完全没有这个必要，我也验证过，下面的代码就是yolo直接划分，没有一点问题，就算是手动不用程序划分也是没问题的。</p>
<pre><code>import xml.etree.ElementTree as ET
import pickle
import os
from os import listdir, getcwd
from os.path import join
import random
from shutil import copyfile
import shutil
classes = [&quot;no_mask&quot;, &quot;mask&quot;]
TRAIN_RATIO = 75    #训练集所占比例
def clear_hidden_files(path):
    dir_list = os.listdir(path)
    for i in dir_list:
        abspath = os.path.join(os.path.abspath(path), i)
        if os.path.isfile(abspath): #文件
            if i.startswith(&quot;._&quot;):
                os.remove(abspath)
        else:   #文件夹
            clear_hidden_files(abspath)
def convert(size, box):
    dw = 1. / size[0]
    dh = 1. / size[1]
    x = (box[0] + box[1]) / 2.0
    y = (box[2] + box[3]) / 2.0
    w = box[1] - box[0]
    h = box[3] - box[2]
    x = x * dw
    w = w * dw
    y = y * dh
    h = h * dh
    return (x, y, w, h)
def convert_annotation(image_id):
    in_file = open(&#39;./data/source/voc/%s.xml&#39; % image_id)   #voc格式
    out_file = open(&#39;./data/source/yolo/%s.txt&#39; % image_id, &#39;w&#39;) #yolo格式
    tree = ET.parse(in_file)
    root = tree.getroot()
    size = root.find(&#39;size&#39;)
    w = int(size.find(&#39;width&#39;).text)
    h = int(size.find(&#39;height&#39;).text)

    for obj in root.iter(&#39;object&#39;):
        difficult = obj.find(&#39;difficult&#39;).text
        cls = obj.find(&#39;name&#39;).text
        if cls not in classes or int(difficult) == 1:
            continue
        cls_id = classes.index(cls)
        xmlbox = obj.find(&#39;bndbox&#39;)
        b = (float(xmlbox.find(&#39;xmin&#39;).text), float(xmlbox.find(&#39;xmax&#39;).text), float(xmlbox.find(&#39;ymin&#39;).text),
             float(xmlbox.find(&#39;ymax&#39;).text))
        bb = convert((w, h), b)
        out_file.write(str(cls_id) + &quot; &quot; + &quot; &quot;.join([str(a) for a in bb]) + &#39;\n&#39;)
    in_file.close()
    out_file.close()

wd = os.getcwd()
data_base_dir = os.path.join(wd, &quot;./data/&quot;)
if not os.path.isdir(data_base_dir):
    os.mkdir(data_base_dir)
work_sapce_dir = os.path.join(data_base_dir, &quot;source/&quot;)
if not os.path.isdir(work_sapce_dir):
    os.mkdir(work_sapce_dir)
image_dir = os.path.join(work_sapce_dir, &quot;imgs/&quot;)
if not os.path.isdir(image_dir):
    print(&quot;没有图片文件夹！\n&quot;)
    exit(0)
clear_hidden_files(image_dir)
yolo_labels_dir = os.path.join(work_sapce_dir, &quot;yolo/&quot;)
if not os.path.isdir(yolo_labels_dir):
    print(&quot;没有yolo标签文件夹&quot;)
    exit(0)
clear_hidden_files(yolo_labels_dir)

yolov5_images_dir = os.path.join(data_base_dir, &quot;images/&quot;)
if os.path.isdir(yolov5_images_dir):
    shutil.rmtree(yolov5_images_dir)
os.mkdir(yolov5_images_dir)
clear_hidden_files(yolov5_images_dir)

yolov5_labels_dir = os.path.join(data_base_dir, &quot;labels/&quot;)
if os.path.isdir(yolov5_labels_dir):
        shutil.rmtree(yolov5_labels_dir)
os.mkdir(yolov5_labels_dir)
clear_hidden_files(yolov5_labels_dir)

yolov5_images_train_dir = os.path.join(yolov5_images_dir, &quot;train/&quot;)
if not os.path.isdir(yolov5_images_train_dir):
    os.mkdir(yolov5_images_train_dir)
clear_hidden_files(yolov5_images_train_dir)
yolov5_images_test_dir = os.path.join(yolov5_images_dir, &quot;verify/&quot;)
if not os.path.isdir(yolov5_images_test_dir):
    os.mkdir(yolov5_images_test_dir)
clear_hidden_files(yolov5_images_test_dir)
yolov5_labels_train_dir = os.path.join(yolov5_labels_dir, &quot;train/&quot;)
if not os.path.isdir(yolov5_labels_train_dir):
    os.mkdir(yolov5_labels_train_dir)
clear_hidden_files(yolov5_labels_train_dir)
yolov5_labels_test_dir = os.path.join(yolov5_labels_dir, &quot;verify/&quot;)
if not os.path.isdir(yolov5_labels_test_dir):
    os.mkdir(yolov5_labels_test_dir)
clear_hidden_files(yolov5_labels_test_dir)

train_file = open(os.path.join(wd, &quot;yolov5_train.txt&quot;), &#39;w&#39;)
verify_file = open(os.path.join(wd, &quot;yolov5_verify.txt&quot;), &#39;w&#39;)
# train_file.close()
# verify_file.close()
# train_file = open(os.path.join(wd, &quot;yolov5_train.txt&quot;), &#39;a&#39;)
# verify_file = open(os.path.join(wd, &quot;yolov5_verify.txt&quot;), &#39;a&#39;)
list_imgs = os.listdir(image_dir)  # list image files

for i in range(0, len(list_imgs)):
    path = os.path.join(image_dir, list_imgs[i])
    if os.path.isfile(path):
        image_path = image_dir + list_imgs[i]
        image_name = list_imgs[i]
        (nameWithoutExtention, extention) = os.path.splitext(image_name)
        label_name = nameWithoutExtention + &#39;.txt&#39;
        label_path = os.path.join(yolo_labels_dir, label_name)
    else:   #如果不存在图片文件，就不再找标签
        continue
    #随机划分
    prob = random.randint(1, 100)
    print(&quot;Probability: %d&quot; % prob)
    if (prob &lt; TRAIN_RATIO):  # train dataset
        if os.path.exists(label_path):
            train_file.write(image_path + &#39;\n&#39;)
            copyfile(image_path, yolov5_images_train_dir + image_name)
            copyfile(label_path, yolov5_labels_train_dir + label_name)
    else:  # verify dataset
        if os.path.exists(label_path):
            verify_file.write(image_path + &#39;\n&#39;)
            copyfile(image_path, yolov5_images_test_dir + image_name)
            copyfile(label_path, yolov5_labels_test_dir + label_name)
train_file.close()
verify_file.close()
</code></pre>
<p>&#x9;生成的文件结构如下图所示：</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230530122239.png"></p>
<h2 id="修改工程"><a href="#修改工程" class="headerlink" title="修改工程"></a>修改工程</h2><h3 id="相关文件配置"><a href="#相关文件配置" class="headerlink" title="相关文件配置"></a>相关文件配置</h3><h4 id="预训练权重文件配置"><a href="#预训练权重文件配置" class="headerlink" title="预训练权重文件配置"></a>预训练权重文件配置</h4><p>&#x9;Yolov5又分为Yolov5s、Yolov5m、Yolov5l、Yolov5x，按照其所含的残差结构的个数依次增多，网络的特征提取、融合能力不断加强，检测精度得到提高，但相应的检测花费的时间和消耗的资源也依次在增加。因为训练出的算法模型最终是要部署到嵌入式神经网络处理器上，考虑到其算力性能以及系统实时性等多方面的考量，最终选择Yolov5s版本来进行。使用预训练权重呢，一般是为了缩短网络的训练时间，达到更好的精度。</p>
<p>&#x9;我们去GitHub <a href="https://github.com/ultralytics/yolov5/releases">Releases · ultralytics&#x2F;yolov5 (github.com)</a>找到对应版本的预训练权重 yolov5s.pt，放到weights目录下。</p>
<h4 id="数据文件配置"><a href="#数据文件配置" class="headerlink" title="数据文件配置"></a>数据文件配置</h4><p>&#x9;在data下找到voc.yaml，复制一份再命名为mask.yaml，将其修改为：</p>
<pre><code># download command/URL (optional)
#download: bash data/scripts/get_voc.sh

# train and val data as 1) directory: path/images/, 2) file: path/images.txt, or 3) list: [path1/images/, path2/images/]
train: divide_yoloData/data/images/train/
val: divide_yoloData/data/images/verify/

# number of classes
nc: 2

# class names
names: [ &#39;no_mask&#39;, &#39;mask&#39;]
</code></pre>
<p>&#x9;注释到下载字段，train字段存放训练集图片目录，val字段存放验证集图片目录，刚开始很好奇不用配置标签目录，我的理解是会自动寻找labels目录。</p>
<h4 id="模型文件配置"><a href="#模型文件配置" class="headerlink" title="模型文件配置"></a>模型文件配置</h4><p>&#x9;在models目录下找到yolov5s.yaml，复制一份命名为mask.yaml，把nc字段修改为2即可。</p>
<h3 id="超参数配置"><a href="#超参数配置" class="headerlink" title="超参数配置"></a>超参数配置</h3><p>&#x9;找到train.py的main函数入口，修改几个超参数，模型主要参数解析如下：</p>
<pre><code>    opt模型主要参数解析：
    --weights：初始化的权重文件的路径地址
    --cfg：模型yaml文件的路径地址
    --data：数据yaml文件的路径地址
    --hyp：超参数文件路径地址
    --epochs：训练轮次
    --batch-size：喂入批次文件的多少
    --img-size：输入图片尺寸
    --rect:是否采用矩形训练，默认False
    --resume:接着打断训练上次的结果接着训练
    --nosave:不保存模型，默认False
    --notest:不进行test，默认False
    --noautoanchor:不自动调整anchor，默认False
    --evolve:是否进行超参数进化，默认False
    --bucket:谷歌云盘bucket，一般不会用到
    --cache-images:是否提前缓存图片到内存，以加快训练速度，默认False
    --image-weights：使用加权图像选择进行训练
    --device:训练的设备，cpu；0(表示一个gpu设备cuda:0)；0,1,2,3(多个gpu设备)
    --multi-scale:是否进行多尺度训练，默认False
    --single-cls:数据集是否只有一个类别，默认False
    --adam:是否使用adam优化器
    --sync-bn:是否使用跨卡同步BN,在DDP模式使用
    --local_rank：DDP参数，请勿修改
    --workers：最大工作核心数
    --project:训练模型的保存位置
    --name：模型保存的目录名称
    --exist-ok：模型目录是否存在，不存在就创建
</code></pre>
<p>&#x9;将预训练权重的相对路径放到这里：</p>
<pre><code>parser.add_argument(&#39;--weights&#39;, type=str, default=&#39;weights/yolov5s.pt&#39;, help=&#39;initial weights path&#39;)
</code></pre>
<p>&#x9;将数据文件、模型文件分别放到这里：</p>
<pre><code>parser.add_argument(&#39;--cfg&#39;, type=str, default=&#39;models/mask.yaml&#39;, help=&#39;model.yaml path&#39;)
parser.add_argument(&#39;--data&#39;, type=str, default=&#39;data/mask.yaml&#39;, help=&#39;data.yaml path&#39;)
</code></pre>
<p>&#x9;epochs训练次数、batch-size每次投入的图片次数、workers CPU的核心数，都要根据自己的电脑配置情况改。</p>
<p>&#x9;超参数配置完成后，就可以开始训练了，如果报错可能是以下问题：</p>
<ul>
<li><p>&#x9;在utils路径下找到datasets.py这个文件，将里面的81行里面的参数num_workers改成0</p>
</li>
<li><p>&#x20;  添加SPPF类，需要到github下载yolov5-6.0,打开文件找到models文件下的common.py，到里面复制SPPF类，并将这段代码(下面)复制到自己项目文件的models&#x2F;common.py里去，放在了149的SPP类之后。</p>
<pre><code>class SPPF(nn.Module):
    # Spatial Pyramid Pooling - Fast (SPPF) layer for YOLOv5 by Glenn Jocher
    def __init__(self, c1, c2, k=5):  # equivalent to SPP(k=(5, 9, 13))
        super().__init__()
        c_ = c1 // 2  # hidden channels
        self.cv1 = Conv(c1, c_, 1, 1)
        self.cv2 = Conv(c_ * 4, c2, 1, 1)
        self.m = nn.MaxPool2d(kernel_size=k, stride=1, padding=k // 2)

    def forward(self, x):
        x = self.cv1(x)
        with warnings.catch_warnings():
            warnings.simplefilter(&#39;ignore&#39;)  # suppress torch 1.9.0 max_pool2d() warning
            y1 = self.m(x)
            y2 = self.m(y1)
            return self.cv2(torch.cat([x, y1, y2, self.m(y2)], 1))
</code></pre>
</li>
</ul>
<p>&#x9;然后就可以愉快的去玩耍，让电脑吭哧吭哧的训练模型了。</p>
<p>&#x9;如果想要停止后接着上次的结果继续训练，当然也是可以的，好像就算更新过数据集后也是可以接着训练的，步骤：</p>
<ol>
<li>找到exp数值最大的目录下的opt.yaml文件，修改你想改的配置（epochs、batch-size等）</li>
<li>把超参数 –resume 改为True</li>
</ol>
<h2 id="测试训练出来的算法模型"><a href="#测试训练出来的算法模型" class="headerlink" title="测试训练出来的算法模型"></a>测试训练出来的算法模型</h2><p>&#x9;训练结束后可以在终端输入以下命令启用tensorbord查看训练结果：</p>
<pre><code>tensorboard --logdir=runs
</code></pre>
<p>&#x9;打开网址就可以看到，里面有很多图表，很多也看不懂什么意思。</p>
<p>&#x9;训练好的模型在 runs&#x2F;train&#x2F;exp数字最大&#x2F;weights 的目录下，有最后一次（last）和最好的（best）两个模型。</p>
<p>&#x9;在detect.py下可以测试算法，–weights 配置为算法模型文件的路径，–source 配置为要推理的数据来源，可以为图片、电脑摄像头（0）、RTSP网络摄像头等。</p>
<p>&#x9;测了一下训练出来的还是还不错的。</p>
<p>&#x9;<img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230531111235.png"></p>
<h1 id="量化转换算法模型"><a href="#量化转换算法模型" class="headerlink" title="量化转换算法模型"></a>量化转换算法模型</h1><p>&#x9;训练出来pt格式的算法模型的Tensor精度是单精度浮点型的float32，而RK系列支持的是整型的uint8，想要最终部署到板子中，还需要进行一系列量化最终转换为rknn格式的算法模型。</p>
<h2 id="pt转onnx"><a href="#pt转onnx" class="headerlink" title="pt转onnx"></a>pt转onnx</h2><p>&#x9;工程下的models&#x2F;export.py，–weights 配置为算法模型文件的路径，此外还需要修改models&#x2F;yolo.py文件的后处理部分，将class Detect(nn.Module) 类的子函数forward改为（训练的时候不能改）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        z = []  <span class="comment"># inference output</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.nl):</span><br><span class="line">            x[i] = <span class="variable language_">self</span>.m[i](x[i])  <span class="comment"># conv</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>

<p>&#x9;然后根据介绍执行脚本即可完成转换。</p>
<h2 id="onnx转rknn"><a href="#onnx转rknn" class="headerlink" title="onnx转rknn"></a>onnx转rknn</h2><p>&#x9;需要用到RKNN Toolkit，RK不同系列板子用到的版本不一样，在Windows、Ubuntu系统都可以完成转换，但windows系统不支持模拟仿真功能不全，所以最好是在Ubuntu上进行。</p>
<p>&#x9;我是在Ubuntu20.04上安装的，在Anaconda上虚拟出的Python3.8环境中安装所需依赖。</p>
<p>&#x9;GitHub仓库中doc有pdf中文手册专门讲解Toolkit</p>
<p>&#x9;在example&#x2F;onnx&#x2F;yolov5工程下，把onnx模型路径、带预测图片路径、标签类别、板子平台更改下运行即可完成onnx到rknn的转换。</p>
<p>&#x9;量化转换后的rknn模型通过Netron神经网络可视化工具可以查看网络结构以及模型参数：</p>
<p><img src="https://gitee.com/samll_planet/drawing-bed/raw/master/img/20230531153523.png"></p>
<p>&#x9;	从上图可以看出算法模型已经量化为uint8精度，支持板子Tensor整形精度。</p>
<h1 id="部署到RK系列板子"><a href="#部署到RK系列板子" class="headerlink" title="部署到RK系列板子"></a>部署到RK系列板子</h1><p>&#x9;在GitHub仓库rknpu、rknpu2、RK3399Pro_npu有各自板子适用的python、c++版本npu推理例程。</p>
<p>&#x9;<a href="https://github.com/rockchip-linux/rknpu">GitHub - rockchip-linux&#x2F;rknpu</a></p>
<p>&#x9;例程一般都是推理图片的，可以先根据例程把推理流程给熟悉一下给跑通，然后再进行拉取摄像头流实时推理、多流多算法等更进一步的探索。</p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
  </entry>
  <entry>
    <title>K210 学习笔记（三、spi串口屏使用）</title>
    <url>/posts/1a29.html</url>
    <content><![CDATA[<h1 id="一、SPI串口屏"><a href="#一、SPI串口屏" class="headerlink" title="一、SPI串口屏"></a>一、SPI串口屏</h1><span id="more"></span>



<p>这是spi屏，没错，只不过不是平时常见的SCK、CS、MISO、MOSI的四线结构，这种四线的是全双工的，而这个屏是半双工</p>
<p>SPI通信发送是先发高字节再发字节。接收是先收高字节再收低字节。</p>
<p>功能引脚：</p>
<table>
<thead>
<tr>
<th></th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>CS</td>
<td>片选，低电平选中</td>
</tr>
<tr>
<td>RST</td>
<td>硬复位，低电平有效</td>
</tr>
<tr>
<td>DC</td>
<td>0：命令   1：数据</td>
</tr>
<tr>
<td>WR</td>
<td>sclk</td>
</tr>
<tr>
<td>DB0~DB7</td>
<td>八线并口，相当于MOSI，带宽直接增加八倍</td>
</tr>
</tbody></table>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//帧格式，我们先择SPI_FF_OCTAL</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> <span class="title class_">_spi_frame_format</span></span><br><span class="line">&#123;</span><br><span class="line">    SPI_FF_STANDARD,     <span class="comment">//单线</span></span><br><span class="line">    SPI_FF_DUAL,         <span class="comment">//双线   </span></span><br><span class="line">    SPI_FF_QUAD,         <span class="comment">//四线</span></span><br><span class="line">    SPI_FF_OCTAL         <span class="comment">//八线</span></span><br><span class="line">&#125; <span class="type">spi_frame_format_t</span>;</span><br></pre></td></tr></table></figure>

<p>用Image2Lcd把图像转为RGB565数组，直接放到代码里，这里我放了三张图片，也就是三个数据，然后幻灯片放映：</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">unsigned char *imageArray<span class="comment">[3]</span>;</span><br><span class="line">imageArray<span class="comment">[0]</span> = gImage_pay;</span><br><span class="line">imageArray<span class="comment">[1]</span> = gImage_baby;</span><br><span class="line">imageArray<span class="comment">[2]</span> = gImage_logo;</span><br><span class="line">  while (1) &#123;</span><br><span class="line">  for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">    lcd_draw_picture_half(0, 0, 320, 240, imageArray<span class="comment">[i]</span>);</span><br><span class="line">    sleep(5);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>坑：</p>
<p>刚开始直接用源码图像显示这样：</p>
<p><img src="/./youdaonote/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/images/WEBRESOURCEd4138cb0fe9c09c81eda206901601c3d%E6%88%AA%E5%9B%BE.png"></p>
<p>明现与原图不一样，结果是我直接把数据取反了，就是你让他白，结果它显示黑</p>
<p>就是这句：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 打开显示反转 */</span></span><br><span class="line"><span class="comment">// tft_write_command(INVERSION_DISPLAY_ON);</span></span><br></pre></td></tr></table></figure>

<p>显示二维码也可以扫的，欢迎大家扫一扫，哈哈</p>
<p><img src="/./youdaonote/%E5%B5%8C%E5%85%A5%E5%BC%8F/MCU/images/WEBRESOURCE7661f02f9b202cecae58abecdb705e9e%E6%88%AA%E5%9B%BE.png"></p>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>MCU</category>
      </categories>
  </entry>
  <entry>
    <title>K210 学习笔记（一、GPIO、串口使用）</title>
    <url>/posts/819.html</url>
    <content><![CDATA[<h1 id="一、开发环境"><a href="#一、开发环境" class="headerlink" title="一、开发环境"></a>一、开发环境</h1><span id="more"></span>

<p>实验室买来了K210的开发板，型号是Spieed家的 MAiXDOCK，他家官网给的资料都是MicroPython的，使用c编程开发的都非常稀少，但我还是希望用c开开发嵌入式板子，用python总感觉怪怪的的，下面是我用cSDK编程的经历，把我踩的坑都写出来。资料是看的亚博智能的k210，他家感觉做的真心挺不错的，白嫖了他的资料，下一有机会一定支持一波。</p>
<p>我用的是配置非常简单的魔改VSCODE的编辑器KendryteIDE，配置非常简单，图形化操作，省去了我们配置的过程，让我们专注于底层开发。</p>
<p>界面：</p>
<p><img src="https://s2.loli.net/2024/09/21/1tWKkcUgxOmIXE3.png"></p>
<h1 id="二、下载串口回显示例代码"><a href="#二、下载串口回显示例代码" class="headerlink" title="二、下载串口回显示例代码"></a>二、下载串口回显示例代码</h1><p>自带了很多例程和库供我们入门</p>
<p><img src="https://s2.loli.net/2024/09/21/OBRdzhFYUQLco98.png"></p>
<h1 id="三、代码分析"><a href="#三、代码分析" class="headerlink" title="三、代码分析"></a>三、代码分析</h1><p>我只是用了他的这个框架，里面的内容我修改了一下，代码里面有错误，没想到原理图里面也有，真是到处是坑。</p>
<p>串口打印回显、驱动板子自带RGB3528</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fpioa-config.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fpioa.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gpiohs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sleep.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;uart.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hardware_init</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//串口 端口映射</span></span><br><span class="line">  <span class="built_in">fpioa_set_function</span>(<span class="number">4</span>, FUNC_UART3_RX);  <span class="comment">// RX</span></span><br><span class="line">  <span class="built_in">fpioa_set_function</span>(<span class="number">5</span>, FUNC_UART3_TX);  <span class="comment">// TX</span></span><br><span class="line">  <span class="comment">// RGB灯</span></span><br><span class="line">  <span class="comment">//蓝灯 IO12</span></span><br><span class="line">  <span class="built_in">fpioa_set_function</span>(<span class="number">12</span>, FUNC_GPIOHS12);</span><br><span class="line">  <span class="built_in">gpiohs_set_drive_mode</span>(<span class="number">12</span>, GPIO_DM_OUTPUT);</span><br><span class="line">  <span class="comment">//绿灯 IO13</span></span><br><span class="line">  <span class="built_in">fpioa_set_function</span>(<span class="number">13</span>, FUNC_GPIOHS13);</span><br><span class="line">  <span class="built_in">gpiohs_set_drive_mode</span>(<span class="number">13</span>, GPIO_DM_OUTPUT);</span><br><span class="line">  <span class="comment">//红灯 IO14</span></span><br><span class="line">  <span class="built_in">fpioa_set_function</span>(<span class="number">14</span>, FUNC_GPIOHS14);</span><br><span class="line">  <span class="built_in">gpiohs_set_drive_mode</span>(<span class="number">14</span>, GPIO_DM_OUTPUT);</span><br><span class="line">  <span class="built_in">gpiohs_set_pin</span>(<span class="number">12</span>, GPIO_PV_HIGH);</span><br><span class="line">  <span class="built_in">gpiohs_set_pin</span>(<span class="number">13</span>, GPIO_PV_HIGH);</span><br><span class="line">  <span class="built_in">gpiohs_set_pin</span>(<span class="number">14</span>, GPIO_PV_HIGH);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">hardware_init</span>();</span><br><span class="line">  <span class="built_in">uart_init</span>(UART_DEVICE_3);</span><br><span class="line">  <span class="built_in">uart_configure</span>(UART_DEVICE_3, <span class="number">115200</span>, UART_BITWIDTH_8BIT, UART_STOP_1,</span><br><span class="line">                 UART_PARITY_NONE);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">uart_send_data</span>(UART_DEVICE_3, <span class="string">&quot;Hello World!&quot;</span>, <span class="number">12</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hello world!!\r\n&quot;</span>);</span><br><span class="line">  <span class="type">char</span> c;</span><br><span class="line">  <span class="type">char</span> f = <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//全灭</span></span><br><span class="line">    <span class="built_in">gpiohs_set_pin</span>(<span class="number">12</span>, GPIO_PV_HIGH);</span><br><span class="line">    <span class="built_in">gpiohs_set_pin</span>(<span class="number">13</span>, GPIO_PV_HIGH);</span><br><span class="line">    <span class="built_in">gpiohs_set_pin</span>(<span class="number">14</span>, GPIO_PV_HIGH);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">gpiohs_set_pin</span>(f, GPIO_PV_LOW);</span><br><span class="line">    f++;</span><br><span class="line">    <span class="keyword">if</span> (f &gt; <span class="number">14</span>) &#123;</span><br><span class="line">      f = <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);  <span class="comment">//延时1s</span></span><br><span class="line">    <span class="comment">//串口回显</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">uart_receive_data</span>(UART_DEVICE_3, &amp;c, <span class="number">1</span>)) &#123;</span><br><span class="line">      <span class="built_in">uart_send_data</span>(UART_DEVICE_3, &amp;c, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>坑1：</p>
<p>RGB3528原理图引脚错：</p>
<p><img src="https://s2.loli.net/2024/09/21/gJ4lMCf6YqOQhdx.png"></p>
<p>代码上的IO引脚才是正确的！</p>
<p>坑2：</p>
<p>源码配置串口错误</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">源码是：uart_configure(UART_DEVICE_<span class="number">1</span><span class="punctuation">,</span> <span class="number">115200</span><span class="punctuation">,</span> DMAC_TRANS_WIDTH_<span class="number">8</span><span class="punctuation">,</span> UART_STOP_<span class="number">1</span><span class="punctuation">,</span> UART_PARITY_NONE)<span class="comment">;</span></span><br><span class="line">    而DMAC_TRANS_WIDTH_<span class="number">8</span>我转过去看是 DMAC_TRANS_WIDTH_<span class="number">8</span> <span class="operator">=</span> <span class="number">0x0</span> 也就是<span class="number">0</span></span><br><span class="line">    配置函数里面有位宽断言，configASSERT(data_width &gt;<span class="operator">=</span> <span class="number">5</span> &amp;&amp; data_width &lt;<span class="operator">=</span> <span class="number">8</span>)<span class="comment">;</span></span><br><span class="line">    #<span class="keyword">define</span> configASSERT(<span class="keyword">x</span>)                                   \</span><br><span class="line">    if((<span class="keyword">x</span>) <span class="operator">=</span><span class="operator">=</span> <span class="number">0</span>)                                          \</span><br><span class="line">    &#123;                                                     \</span><br><span class="line">        printf(<span class="string">&quot;(%s:%d) %s\r\n&quot;</span><span class="punctuation">,</span> __FILE__<span class="punctuation">,</span> __LINE__<span class="punctuation">,</span> #<span class="keyword">x</span>)<span class="comment">; \</span></span><br><span class="line">        for(<span class="comment">;;)                                           \</span></span><br><span class="line">            <span class="comment">;                                             \</span></span><br><span class="line">    &#125;</span><br><span class="line">    也就是会一直si</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>MCU</category>
      </categories>
  </entry>
  <entry>
    <title>K210 学习笔记（二、双核、定时器、pwm使用）</title>
    <url>/posts/c7b5.html</url>
    <content><![CDATA[<h1 id="一、双核系统"><a href="#一、双核系统" class="headerlink" title="一、双核系统"></a>一、双核系统</h1><span id="more"></span>



<p>k210有两个核，分别是core0和core1，系统默认启动core0，如果想要使用core1就需要注册。</p>
<p>注册的过程有点类似与我们的RTOS里的任务，但要知道，他们本质上是不同的，两个核是同步进行的，在一个时间内两个核都可以都是在运行的，而RTOS中的两个任务之间是时间轮询的，在一个确定时间内两个任务只能有一个任务是运行态。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取当前运行的核心编号</span></span><br><span class="line">uint64_t core <span class="punctuation">=</span> current_coreid<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">;</span></span><br><span class="line"><span class="comment">//注册核心1</span></span><br><span class="line">register_core1<span class="punctuation">(</span>core1_main<span class="punctuation">,</span> <span class="literal">NULL</span><span class="punctuation">)</span><span class="punctuation">;</span>  <span class="comment">//core1_main是随便设的函数名，像正常函数写就行，也可以向main函数一样，用while(1)循环</span></span><br><span class="line"></span><br><span class="line">corelock_t lock<span class="punctuation">;</span></span><br><span class="line"><span class="comment">//上锁，一个核上锁后另一个核不再运行，可以嵌套</span></span><br><span class="line">corelock_lock<span class="punctuation">(</span><span class="meta">&amp;lock);</span></span><br><span class="line"><span class="comment">//解锁</span></span><br><span class="line">corelock_unlock<span class="punctuation">(</span><span class="meta">&amp;lock);</span></span><br></pre></td></tr></table></figure>

<p>用的例程：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="type">corelock_t</span> lock;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">get_time</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="type">uint64_t</span> v_cycle = <span class="built_in">read_cycle</span>();</span><br><span class="line">  <span class="keyword">return</span> v_cycle * <span class="number">1000000</span> / <span class="built_in">sysctl_clock_get_freq</span>(SYSCTL_CLOCK_CPU);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">core1_function</span><span class="params">(<span class="type">void</span> *ctx)</span> </span>&#123;</span><br><span class="line">  <span class="type">uint64_t</span> core = <span class="built_in">current_coreid</span>();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Core %ld Hello worldn\r\n&quot;</span>, core);</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="type">uint64_t</span> start = <span class="built_in">get_time</span>();</span><br><span class="line">    <span class="built_in">corelock_lock</span>(&amp;lock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Core %ld Hello worldn\r\n&quot;</span>, core);</span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">corelock_unlock</span>(&amp;lock);</span><br><span class="line">    <span class="type">uint64_t</span> stop = <span class="built_in">get_time</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Core %ld lock time is %ld usn\r\n&quot;</span>, core, stop - start);</span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">hardware_init</span>();</span><br><span class="line">  <span class="built_in">uart_init</span>(UART_DEVICE_3);</span><br><span class="line">  <span class="built_in">uart_configure</span>(UART_DEVICE_3, <span class="number">115200</span>, UART_BITWIDTH_8BIT, UART_STOP_1,</span><br><span class="line">                 UART_PARITY_NONE);</span><br><span class="line">  <span class="type">uint64_t</span> core = <span class="built_in">current_coreid</span>();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Core %ld Hello worldn\r\n&quot;</span>, core);</span><br><span class="line">  <span class="built_in">register_core1</span>(core1_function, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">corelock_lock</span>(&amp;lock);</span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1&gt; Core %ld sleep 1n\r\n&quot;</span>, core);</span><br><span class="line">    <span class="built_in">corelock_lock</span>(&amp;lock);</span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2&gt; Core %ld sleep 2n\r\n&quot;</span>, core);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2&gt; Core unlockn\r\n&quot;</span>);</span><br><span class="line">    <span class="built_in">corelock_unlock</span>(&amp;lock);</span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1&gt; Core unlockn\r\n&quot;</span>);</span><br><span class="line">    <span class="built_in">corelock_unlock</span>(&amp;lock);</span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>非常不理解Core 1 lock time is 5002477 usn，为什么core1上锁的时间是5s，理论上来说应该是1s，用肉眼可见的也应该是1s，不知道为什么是5s</p>
<p><img src="https://s2.loli.net/2024/09/21/oqMAgL7GP3ID5N9.png"></p>
<h1 id="二、定时器"><a href="#二、定时器" class="headerlink" title="二、定时器"></a>二、定时器</h1><p>k210有3个定时器，每个定时器有4个通道</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定时器</span></span><br><span class="line"><span class="built_in">timer_init</span>(TIM3ER_DEVICE_1);</span><br><span class="line"><span class="built_in">timer_set_interval</span>(TIMER_DEVICE_1, TIMER_CHANNEL_1, <span class="number">1</span>E8);  <span class="comment">// ns</span></span><br><span class="line"><span class="built_in">timer_irq_register</span>(TIMER_DEVICE_1, TIMER_CHANNEL_1, <span class="number">0</span>, <span class="number">1</span>, timer1_timeout_cb,</span><br><span class="line">                   NULL);</span><br><span class="line"><span class="built_in">timer_set_enable</span>(TIMER_DEVICE_1, TIMER_CHANNEL_1, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h1 id="三、pwm"><a href="#三、pwm" class="headerlink" title="三、pwm"></a>三、pwm</h1><p>pwm的通道是和定时器通道相对应的，只不过pwm是从0开始的，而TOGGLE是从1开始的</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//蓝灯 IO12</span></span><br><span class="line"><span class="built_in">fpioa_set_function</span>(<span class="number">12</span>, FUNC_TIMER0_TOGGLE4);</span><br><span class="line"><span class="comment">// pwm</span></span><br><span class="line"><span class="built_in">pwm_init</span>(PWM_DEVICE_0);</span><br><span class="line"><span class="built_in">pwm_set_frequency</span>(PWM_DEVICE_0, PWM_CHANNEL_3, <span class="number">200000</span>, <span class="number">0.1</span>);</span><br><span class="line"><span class="built_in">pwm_set_enable</span>(PWM_DEVICE_0, PWM_CHANNEL_3, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>呼吸灯：</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">timer1_timeout_cb</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">float</span> duty = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> offOn = <span class="number">0</span>;</span><br><span class="line">  pwm_set_frequency(PWM_DEVICE_0, PWM_CHANNEL_3, <span class="number">200000</span>, duty);</span><br><span class="line">  offOn ? (duty += <span class="number">0.1</span>) : (duty -= 0.1);</span><br><span class="line">  <span class="keyword">if</span> (duty &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    offOn = <span class="number">0</span>;</span><br><span class="line">    duty = <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(duty &lt; <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    offOn = <span class="number">1</span>;</span><br><span class="line">    duty = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  gpiohs_set_pin(<span class="number">14</span>, flag);</span><br><span class="line">  flag = !flag;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>MCU</category>
      </categories>
  </entry>
  <entry>
    <title>教你STM32做USB鼠标、键盘</title>
    <url>/posts/6681.html</url>
    <content><![CDATA[<h1 id="一、USB鼠标"><a href="#一、USB鼠标" class="headerlink" title="一、USB鼠标"></a>一、USB鼠标</h1><span id="more"></span>

<p>使用CubeMX软件傻瓜式的配置，一键生成USB的HID驱动。</p>
<h2 id="1、CubeMX配置"><a href="#1、CubeMX配置" class="headerlink" title="1、CubeMX配置"></a>1、CubeMX配置</h2><h3 id="①、选择相对应的芯片"><a href="#①、选择相对应的芯片" class="headerlink" title="①、选择相对应的芯片"></a>①、选择相对应的芯片</h3><p><img src="https://s2.loli.net/2024/09/21/MdJjVSBXoQ6t5Y9.png"></p>
<h3 id="②、配置时钟和Debug和debug"><a href="#②、配置时钟和Debug和debug" class="headerlink" title="②、配置时钟和Debug和debug"></a>②、配置时钟和Debug和debug</h3><p><img src="https://s2.loli.net/2024/09/21/1ihXNeVs3OqpC2L.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/1ICrF4TmSP8qW6n.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/SoCarT5BWFMPpR7.png"></p>
<h3 id="③、配置USB"><a href="#③、配置USB" class="headerlink" title="③、配置USB"></a>③、配置USB</h3><p><img src="https://s2.loli.net/2024/09/21/EgpQVMTNdRSmAxb.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/oPew5c7VCEHShiy.png"></p>
<h3 id="④、生成代码"><a href="#④、生成代码" class="headerlink" title="④、生成代码"></a>④、生成代码</h3><p><img src="https://s2.loli.net/2024/09/21/rI7eGEJ5TYX2Un6.png"></p>
<p>最好把这个也勾上，勾上以后每个外设配置不再都给你塞到main.c里，而是建一个.c.h,这样感觉舒服多了</p>
<p><img src="https://s2.loli.net/2024/09/21/WysfvNo9MigjIFQ.png"></p>
<h2 id="2、编写应用层代码"><a href="#2、编写应用层代码" class="headerlink" title="2、编写应用层代码"></a>2、编写应用层代码</h2><p>USB协议还是挺复杂的，原理和底层我也搞不清楚，这东西也不是看几篇文章学个一两天就能搞明白的，我写这个也主要是为了好玩，没有深层去理解。</p>
<p>我们用的鼠标主要就四个属性：键位（左键、右键、中键），左右移动、上下移动、滑轮</p>
<p>这四个属性用一个长度为4的数组一并包含进来：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">  /*</span><br><span class="line">    *MouseData[0]:低0位：左键 低1位：右键 低2位：中键</span><br><span class="line">    *MouseData[1]:1~127：右  -<span class="string">-127</span>~<span class="string">-1</span>：左</span><br><span class="line">    *MouseData[2]:1~127：下  -<span class="string">-127</span>~<span class="string">-1</span>：上</span><br><span class="line">    *MouseData[3]:1~127：上  -<span class="string">-127</span>~<span class="string">-1</span>：下  （滑轮）</span><br><span class="line">  */</span><br><span class="line">  char MouseData[4] = &#123;0, 0, 0, 0&#125;;</span><br></pre></td></tr></table></figure>

<p>发送这些信息用这个函数：</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">USBD_HID_SendReport(<span class="name">&amp;hUsbDeviceFS</span>,(<span class="name">uint8_t*</span>)<span class="symbol">&amp;MouseData</span>,sizeof(<span class="name">MouseData</span>))<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>主要代码：</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">memcpy(MouseDataT, MouseData, sizeof(MouseData));</span><br><span class="line">    key = KEY_Scan(1);   //支持连续按下</span><br><span class="line">    switch(key)</span><br><span class="line">    &#123;</span><br><span class="line">      case KEY0_PRES:</span><br><span class="line">        MouseData<span class="comment">[0]</span> |= 0x01;</span><br><span class="line">        break;</span><br><span class="line">      case KEY1_PRES:</span><br><span class="line">        MouseData<span class="comment">[1]</span> = 21;</span><br><span class="line">        break;</span><br><span class="line">      case WKUP_PRES:</span><br><span class="line">        MouseData<span class="comment">[3]</span> = -12;</span><br><span class="line">        break;</span><br><span class="line">      default:</span><br><span class="line">        MouseData<span class="comment">[0]</span> = 0;</span><br><span class="line">        MouseData<span class="comment">[1]</span> = 0;</span><br><span class="line">        MouseData<span class="comment">[2]</span> = 0;</span><br><span class="line">        MouseData<span class="comment">[3]</span> = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    //如果有变化，发送</span><br><span class="line">    if(MouseData<span class="comment">[0]</span>!=MouseDataT<span class="comment">[0]</span>||MouseData<span class="comment">[1]</span>!=MouseDataT<span class="comment">[1]</span>||MouseData<span class="comment">[2]</span>!=MouseDataT<span class="comment">[2]</span>||MouseData<span class="comment">[3]</span>!=MouseDataT<span class="comment">[3]</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      USBD_HID_SendReport(&amp;hUsbDeviceFS,(uint8_t*)&amp;MouseData,sizeof(MouseData));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、USB键盘"><a href="#二、USB键盘" class="headerlink" title="二、USB键盘"></a>二、USB键盘</h1><h2 id="1、CubeMX配置同鼠标，这里不啰嗦了"><a href="#1、CubeMX配置同鼠标，这里不啰嗦了" class="headerlink" title="1、CubeMX配置同鼠标，这里不啰嗦了"></a>1、CubeMX配置同鼠标，这里不啰嗦了</h2><h2 id="2、在mouse的基础上修改为keyboard的"><a href="#2、在mouse的基础上修改为keyboard的" class="headerlink" title="2、在mouse的基础上修改为keyboard的"></a>2、在mouse的基础上修改为keyboard的</h2><p>参考：<a href="http://www.mcublog.cn/software/2020_03/usb-keyboard/">基于STM32CUBE的USB键盘例程 | MCU起航 (mcublog.cn)</a></p>
<p>主要就是以下几点：</p>
<p>①、鼠标描述符换成键盘描述符，描述符大小也要改变</p>
<p>②、接口协议</p>
<p>③、端点发送的数据包长度</p>
<p>④、增加一个输出端点描述符 （按我的理解是，可以返回键盘指示灯的状态的，尝试了很久，还是不知道怎么返回，）</p>
<h2 id="3、应用程序"><a href="#3、应用程序" class="headerlink" title="3、应用程序"></a>3、应用程序</h2><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    *keyBoardData<span class="comment">[0]</span>:特殊键</span><br><span class="line">    *keyBoardData<span class="comment">[1]</span>:预留</span><br><span class="line">    普通按键可以一起按下  4：a</span><br><span class="line">    *keyBoardData<span class="comment">[2]</span>:</span><br><span class="line">    *keyBoardData<span class="comment">[3]</span>:</span><br><span class="line">    *keyBoardData<span class="comment">[4]</span>:</span><br><span class="line">    *keyBoardData<span class="comment">[5]</span>:</span><br><span class="line">    *keyBoardData<span class="comment">[6]</span>:</span><br><span class="line">    *keyBoardData<span class="comment">[7]</span>:</span><br><span class="line">  */</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">u8 keyBoardData[<span class="number">8</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">extern</span> USBD_HandleTypeDef hUsbDeviceFS;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">keyboard_key_test</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 keyBoardDataEmpty[<span class="number">8</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    u8 key = KEY_Scan(<span class="number">1</span>);   <span class="comment">//支持连续按下</span></span><br><span class="line">    <span class="keyword">switch</span>(key)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> KEY0_PRES:</span><br><span class="line">        keyBoardData[<span class="number">2</span>] = <span class="number">4</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> KEY1_PRES:</span><br><span class="line">        keyBoardData[<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> WKUP_PRES:</span><br><span class="line">        keyBoardData[<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="literal">default</span>:</span><br><span class="line">        keyBoardData[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    USBD_HID_SendReport(&amp;hUsbDeviceFS,(uint8_t*)&amp;keyBoardData,<span class="keyword">sizeof</span>(keyBoardData));</span><br><span class="line">    HAL_Delay(<span class="number">15</span>);</span><br><span class="line">    USBD_HID_SendReport(&amp;hUsbDeviceFS,(uint8_t*)&amp;keyBoardDataEmpty,<span class="keyword">sizeof</span>(keyBoardDataEmpty));</span><br><span class="line">    HAL_Delay(<span class="number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>MCU</category>
      </categories>
  </entry>
  <entry>
    <title>经验</title>
    <url>/posts/e977.html</url>
    <content><![CDATA[<p>root@jiabao-vm:&#x2F;home&#x2F;jiabao&#x2F;桌面&#x2F;ffmpeg&#x2F;ffmpeg_build# .&#x2F;build.sh</p>
<span id="more"></span>

<p><code>.</code>&#x2F;tools.sh: 行 2: $‘\r’：未找到命令&#x20;</p>
<p>root@jiabao-vm:&#x2F;home&#x2F;jiabao&#x2F;桌面&#x2F;ffmpeg&#x2F;ffmpeg_build# sed -i ‘s&#x2F;\r$&#x2F;&#x2F;‘ .&#x2F;tools.sh</p>
<p>$ 会匹配每一行字符串的结尾。</p>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux命令</title>
    <url>/posts/869e.html</url>
    <content><![CDATA[<p>一、 杀进程</p>
<span id="more"></span>

<p>用libhv启动了http服务器，结果没写终止服务，就想要kill它，kill需要进程id，结果用top也没找到它的id，可以用以下方式精确查找</p>
<p>1、netstat -nap | grep 端口号</p>
<p>2、ps aux | grep 进程名</p>
<p>3、pkill 进程名</p>
<p>二、连接wifi</p>
<p>1、查看网络设备列表</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmcli dev</span></span><br></pre></td></tr></table></figure>

<p>  如果列出的设备状态是 unmanaged 的，说明网络设备不受NetworkManager管理，你需要清空 &#x2F;etc&#x2F;network&#x2F;interfaces下的网络设置,然后重启</p>
<pre><code>  2、开启wifi
</code></pre>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmcli</span> r wifi <span class="literal">on</span></span><br></pre></td></tr></table></figure>

<p>3、扫描附近wifi热点</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmcli dev wifi</span></span><br></pre></td></tr></table></figure>

<p>4、连接指定wifi</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">nmcli dev wifi <span class="keyword">connect</span> &quot;SSID&quot; <span class="keyword">password</span> &quot;PASSWORD&quot; ifname wlan0</span><br></pre></td></tr></table></figure>

<p>设置完成后，就能连接上指定WiFi，并且在下次开机后能自动连接。</p>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>SPI</title>
    <url>/posts/e70d.html</url>
    <content><![CDATA[<p>菊花链</p>
<span id="more"></span>

<p><a href="https://www.cnblogs.com/embInn/p/14038121.html">万变不离其宗之SPI总线要点总结 - 逸珺 - 博客园 (cnblogs.com)</a></p>
<ul>
<li>某级从设备在第N组时钟周期用MISO发送第N-1组时钟周期接收到位给下级设备，同时把本组时钟周期期间前级设备通过MISO移位进来的数据保存按位序保存进接收寄存器中。其实在底层是按照位进行流转的。这个传递过程当变为高电平时则停止，各从设备当前寄存器中内容锁定了。具体应用时，如果要将某一字节传递到某个设备，则需要组织好传递的码流，以及时钟控制。</li>
<li>对于菊花链数据传递过程，其实类似于击鼓传花游戏。鼓点的作用就是同步时钟，花则是要传递的信息数据，鼓点的起停则类似于片选控制，唯一不同的是，击鼓传花传的是一朵花，而菊花链总线传递的是二进制流，至于从设备究竟要怎么应用这些数据流，则具体实现各异。</li>
</ul>
<p><a href="https://blog.csdn.net/weixin_43698385/article/details/124928101">【数字IC】深入浅出理解SPI协议_spi菊花链-CSDN博客</a></p>
<p>SPI协议的第二种形式是菊花链的形式，比如说从设备1是一块EEPROM，从设备2是一个DSP，从设备3是一个比较器，三个从设备之间存在联系，当来自主设备的地址信号到来时，先从EEPROM中读出数据，数据放到DSP中进行处理，处理后的数据，最终在从设备3中进行比较</p>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>通信</category>
      </categories>
  </entry>
  <entry>
    <title>编译ffmpeg源码</title>
    <url>/posts/44f8.html</url>
    <content><![CDATA[<p>&#x9;在Windows上使用msys2，花费了两天的时间都没编译好ffmpeg，各种错误，网上还找不到解决方案，于是在Linux下编译，不过以后可以不用单独安装mingw64，使用msys就很方便。</p>
<span id="more"></span>

<p>一个简本完成编译，很赞：</p>
<p><a href="https://blog.csdn.net/RQ997832/article/details/125036907">ffmpeg学习：ubuntu下编译ffmpeg(全网最懒的编译脚本)_ubuntu编译ffmpeg-CSDN博客</a></p>
<p>我没有安装libopus，总是说	ERROR: opus not found using pkg-config</p>
]]></content>
      <categories>
        <category>C++</category>
        <category>ffmpeg</category>
      </categories>
  </entry>
  <entry>
    <title>Linux下编译OpenCV</title>
    <url>/posts/a893.html</url>
    <content><![CDATA[<h1 id="一、安装依赖库"><a href="#一、安装依赖库" class="headerlink" title="一、安装依赖库"></a>一、安装依赖库</h1><span id="more"></span>



<p>主要依赖项：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>apt package 名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>编译系统</td>
<td>build-essential cmake pkg-config</td>
<td>生成 OpenCV</td>
</tr>
<tr>
<td>图像库</td>
<td>libpng-dev libjpeg-dev</td>
<td>提供各类图像格式的编解码</td>
</tr>
<tr>
<td>OpenBLAS</td>
<td>libopenblas-dev</td>
<td>利用 CPU 向量运算指令为大量算法提供加速。</td>
</tr>
<tr>
<td>Eigen3</td>
<td>libeigen3-dev</td>
<td>提供线性代数相关算法支持</td>
</tr>
<tr>
<td>Intel TBB</td>
<td>libtbb-dev</td>
<td>在 Intel CPU 上提供高性能并发计算支持</td>
</tr>
<tr>
<td>FFMPEG</td>
<td>libavcodec-dev libavformat-dev libswscale-dev</td>
<td>提供视频编解码能力</td>
</tr>
<tr>
<td>GStreamer</td>
<td>libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev</td>
<td>提供流媒体处理能力</td>
</tr>
<tr>
<td>GTK</td>
<td>libgtk-3-dev libcanberra-gtk-module libcanberra-gtk3-module</td>
<td>图形化用户界面</td>
</tr>
</tbody></table>
<p>apt命令：</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install -y libcurl4 build-essential pkg-config cmake \</span><br><span class="line">    libopenblas-<span class="built_in">dev</span> libeigen3-<span class="built_in">dev</span> libtbb-<span class="built_in">dev</span> \</span><br><span class="line">    libavcodec-<span class="built_in">dev</span> libavformat-<span class="built_in">dev</span> \</span><br><span class="line">    libgstreamer-plugins-base1<span class="number">.0</span>-<span class="built_in">dev</span> libgstreamer1<span class="number">.0</span>-<span class="built_in">dev</span> \</span><br><span class="line">    libswscale-<span class="built_in">dev</span> libgtk<span class="number">-3</span>-<span class="built_in">dev</span> libpng-<span class="built_in">dev</span> libjpeg-<span class="built_in">dev</span> \</span><br><span class="line">    libcanberra-gtk-module libcanberra-gtk3-module</span><br></pre></td></tr></table></figure>

<h1 id="二、下载源码"><a href="#二、下载源码" class="headerlink" title="二、下载源码"></a>二、下载源码</h1><p><a href="https://github.com/opencv/opencv/releases">Releases · opencv&#x2F;opencv (github.com)</a></p>
<p><a href="https://github.com/opencv/opencv_contrib/releases">Releases · opencv&#x2F;opencv_contrib (github.com)</a></p>
<p>注意：</p>
<ul>
<li><p>opencv与opencv_contrib的版本需要一致</p>
</li>
<li><p>opencv与opencv_contrib位于同一目录（这一点好像也不是必须的，-DOPENCV_EXTRA_MODULES_PATH&#x3D;..&#x2F;..&#x2F;opencv_contrib-4.6.0&#x2F;modules，cmake时这一项需是contrib相对build的路径）</p>
</li>
</ul>
<h1 id="三、cmake"><a href="#三、cmake" class="headerlink" title="三、cmake"></a>三、cmake</h1><p>进入opencv目录，新建build，然后执行cmake命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake .. -D&lt;选项名1&gt;=&lt;设定值1&gt; -D&lt;选项名2&gt;=&lt;设定值2&gt;</span><br></pre></td></tr></table></figure>

<p>常用选项说明：</p>
<ul>
<li><p>CMAKE_BUILD_TYPE&#x3D;Release：不在行成的库文件中包含调试信息，并进行速度优化。如果指定为 Debug ，就可以在 Debug 过程中进入 OpenCV 内部的代码，但运行速度会略微下降。</p>
</li>
<li><p>CMAKE_VERBOSE_MAKEFILE&#x3D;ON：<strong>务必开启</strong>，以便于发现编译中出现的问题。</p>
</li>
<li><p>CMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local：指定 OpenCV 生成的库文件在系统中的安装路径。</p>
</li>
<li><p>BUILD_SHARED_LIBS&#x3D;ON：成共享库（.so），如果置为 OFF 则只会生成静态库（.a）</p>
</li>
<li><p>OPENCV_EXTRA_MODULES_PATH&#x3D;&lt;opencv-contrib 目录&gt;，按之前的描述，应为 「..&#x2F;..&#x2F;opencv_contrib-4.6.0」。可以用 ls 命令确认相对路径是否存在。</p>
</li>
<li><p>OPENCV_ENABLE_NONFREE&#x3D;ON：如果置为OFF，一些包含专利保护算法的函数将不会生成。</p>
</li>
<li><p>ENABLE_CXX11&#x3D;ON：支持 C++11 以上的语法和 STL 库。</p>
</li>
<li><p>BUILD_TESTS&#x3D;OFF，BUILD_PERF_TESTS&#x3D;OFF：关闭生成后的自我 TEST ，大多数情况没有必要，可大辐缩短生成时间。但如果怀疑生成的 OpenCV 库有问题，可以进行自测。</p>
</li>
<li><p>OPENCV_GENERATE_PKGCONFIG&#x3D;ON：建议开启，便于 C++ 程序通过 pkg-config 来引用 OpenCV 库。</p>
</li>
<li><p>WITH_CUDA&#x3D;ON，ENABLE_FAST_MATH&#x3D;ON，CUDA_FAST_MATH&#x3D;ON，WITH_CUBLAS&#x3D;ON：如果系统正确安装了 CUDA 并希望 OpenCV 启用 CUDA 支持，这四个选项都要打开。</p>
</li>
<li><p>WITH_IPP&#x3D;ON，WITH_TBB&#x3D;ON，WITH_OPENMP&#x3D;ON，WITH_PTHREADS_PF&#x3D;ON：这四个选项控制 OpenCV 如何进行并发运算，默认都是 ON，但如果有需要生成一个绝对单线程运行的 OpenCV ，请将这几个选项均置为 OFF 。</p>
</li>
</ul>
<p>cmake命令：（根据实际进行修改）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE=ON \</span><br><span class="line">	-DCMAKE_INSTALL_PREFIX=/usr/local \</span><br><span class="line">	-DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-4.6.0/modules -DOPENCV_ENABLE_NONFREE=ON\</span><br><span class="line">	-DBUILD_opencv_python3=ON -DWITH_1394=OFF \</span><br><span class="line">	-DWITH_IPP=ON -DWITH_TBB=ON -DWITH_OPENMP=ON -DWITH_PTHREADS_PF=ON \</span><br><span class="line">	-DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DOPENCV_GENERATE_PKGCONFIG=ON \</span><br></pre></td></tr></table></figure>

<p>在cmake过程中，有去github下载库，在网不好的情况下可能会一直卡在那里，解决的办法：</p>
<ul>
<li><p>科学上网</p>
</li>
<li><p>根据提示信息，下载下来，拷到对应的目录下，然后修改cmake，把https的网址改为本地路径，进行离线安装</p>
</li>
</ul>
<h1 id="四、make"><a href="#四、make" class="headerlink" title="四、make"></a>四、make</h1><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">make</span> <span class="keyword">all</span> -<span class="keyword">j</span>$(<span class="keyword">grep</span> -<span class="keyword">c</span> ^processor /proc/cpuinfo)</span><br></pre></td></tr></table></figure>

<h1 id="五、install"><a href="#五、install" class="headerlink" title="五、install"></a>五、install</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> make install -j$(grep -c ^processor /proc/cpuinfo)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>OpenCV</category>
      </categories>
  </entry>
  <entry>
    <title>opencv一张图片渐变为另一张图片</title>
    <url>/posts/4c8a.html</url>
    <content><![CDATA[<p>刷皮皮虾经常看到有一张图片渐变为另一张图片的小视频，来表达变化之大，这也算是一种特效吧，用opencv 代码的方式也可以实现。</p>
<span id="more"></span>

<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">void <span class="built_in">gradual_change</span>(Mat imgOld, Mat imgNew)</span><br><span class="line">&#123;</span><br><span class="line">    Mat img = imgOld.clone();</span><br><span class="line">    <span class="comment">// 让两张图片格式保持一致,如果不一样：让imgOld与imgNew保持一致</span></span><br><span class="line">    <span class="keyword">if</span> (imgOld.rows != imgNew.rows || imgOld.cols != imgNew.cols)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">resize</span>(imgOld, img, <span class="built_in">Size</span>(imgNew.<span class="built_in">cols</span>, imgNew.<span class="built_in">rows</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; img.<span class="built_in">rows</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        imshow(<span class="string">&quot;gradual_change&quot;</span>, img);</span><br><span class="line">        cv::<span class="built_in">waitKey</span>(<span class="number">10</span>); <span class="comment">// 延时</span></span><br><span class="line">        <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; img.<span class="built_in">cols</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (int k = <span class="number">0</span>; k &lt; <span class="number">3</span>; k++)</span><br><span class="line">                img.at&lt;Vec3b&gt;(i, j)[k] = imgNew.at&lt;Vec3b&gt;(i, j)[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 写字</span></span><br><span class="line">        const char *msg;</span><br><span class="line">        int off = <span class="number">150</span>;</span><br><span class="line">        <span class="built_in">switch</span> (i)</span><br><span class="line">        &#123;</span><br><span class="line">        case <span class="number">10</span>:</span><br><span class="line">            msg = <span class="string">&quot;十&quot;</span>;</span><br><span class="line">            text.putText(img, msg, <span class="built_in">Point</span>(img.<span class="built_in">cols</span> / <span class="number">2</span> - off &gt; <span class="number">0</span> ? img.<span class="built_in">cols</span> / <span class="number">2</span> - off : img.<span class="built_in">cols</span> / <span class="number">2</span>, img.<span class="built_in">rows</span> / <span class="number">2</span> + off &lt; img.<span class="built_in">rows</span> ? img.<span class="built_in">rows</span> / <span class="number">2</span> + off : img.<span class="built_in">rows</span> / <span class="number">2</span>), <span class="built_in">CV_RGB</span>(<span class="number">0x00</span>, <span class="number">0xc6</span>, <span class="number">0xf1</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case <span class="number">60</span>:</span><br><span class="line">            msg = <span class="string">&quot;十年&quot;</span>;</span><br><span class="line">            text.putText(img, msg, <span class="built_in">Point</span>(img.<span class="built_in">cols</span> / <span class="number">2</span> - off &gt; <span class="number">0</span> ? img.<span class="built_in">cols</span> / <span class="number">2</span> - off : img.<span class="built_in">cols</span> / <span class="number">2</span>, img.<span class="built_in">rows</span> / <span class="number">2</span> + off &lt; img.<span class="built_in">rows</span> ? img.<span class="built_in">rows</span> / <span class="number">2</span> + off : img.<span class="built_in">rows</span> / <span class="number">2</span>), <span class="built_in">CV_RGB</span>(<span class="number">0x00</span>, <span class="number">0xc6</span>, <span class="number">0xf1</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case <span class="number">110</span>:</span><br><span class="line">            msg = <span class="string">&quot;十年前&quot;</span>;</span><br><span class="line">            text.putText(img, msg, <span class="built_in">Point</span>(img.<span class="built_in">cols</span> / <span class="number">2</span> - off &gt; <span class="number">0</span> ? img.<span class="built_in">cols</span> / <span class="number">2</span> - off : img.<span class="built_in">cols</span> / <span class="number">2</span>, img.<span class="built_in">rows</span> / <span class="number">2</span> + off &lt; img.<span class="built_in">rows</span> ? img.<span class="built_in">rows</span> / <span class="number">2</span> + off : img.<span class="built_in">rows</span> / <span class="number">2</span>), <span class="built_in">CV_RGB</span>(<span class="number">0x00</span>, <span class="number">0xc6</span>, <span class="number">0xf1</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        case <span class="number">200</span>:</span><br><span class="line">            msg = <span class="string">&quot;十&quot;</span>;</span><br><span class="line">            text.putText(img, msg, <span class="built_in">Point</span>(img.<span class="built_in">cols</span> / <span class="number">2</span> - off &gt; <span class="number">0</span> ? img.<span class="built_in">cols</span> / <span class="number">2</span> - off : img.<span class="built_in">cols</span> / <span class="number">2</span>, img.<span class="built_in">rows</span> / <span class="number">2</span> - off &gt; <span class="number">0</span> ? img.<span class="built_in">rows</span> / <span class="number">2</span> - off : img.<span class="built_in">rows</span> / <span class="number">2</span>), <span class="built_in">CV_RGB</span>(<span class="number">0x4c</span>, <span class="number">0xb5</span>, <span class="number">0x7a</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case <span class="number">270</span>:</span><br><span class="line">            msg = <span class="string">&quot;十年&quot;</span>;</span><br><span class="line">            text.putText(img, msg, <span class="built_in">Point</span>(img.<span class="built_in">cols</span> / <span class="number">2</span> - off &gt; <span class="number">0</span> ? img.<span class="built_in">cols</span> / <span class="number">2</span> - off : img.<span class="built_in">cols</span> / <span class="number">2</span>, img.<span class="built_in">rows</span> / <span class="number">2</span> - off &gt; <span class="number">0</span> ? img.<span class="built_in">rows</span> / <span class="number">2</span> - off : img.<span class="built_in">rows</span> / <span class="number">2</span>), <span class="built_in">CV_RGB</span>(<span class="number">0xff</span>, <span class="number">0xd9</span>, <span class="number">0x70</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case <span class="number">350</span>:</span><br><span class="line">            msg = <span class="string">&quot;十年后&quot;</span>;</span><br><span class="line">            text.putText(img, msg, <span class="built_in">Point</span>(img.<span class="built_in">cols</span> / <span class="number">2</span> - off &gt; <span class="number">0</span> ? img.<span class="built_in">cols</span> / <span class="number">2</span> - off : img.<span class="built_in">cols</span> / <span class="number">2</span>, img.<span class="built_in">rows</span> / <span class="number">2</span> - off &gt; <span class="number">0</span> ? img.<span class="built_in">rows</span> / <span class="number">2</span> - off : img.<span class="built_in">rows</span> / <span class="number">2</span>), <span class="built_in">CV_RGB</span>(<span class="number">0xff</span>, <span class="number">0xd9</span>, <span class="number">0x70</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    utils::logging::<span class="built_in">setLogLevel</span>(utils::logging::LOG_LEVEL_ERROR); <span class="comment">// 只输出错误日志</span></span><br><span class="line">    float p = <span class="number">0.5</span>;</span><br><span class="line">    text.setFont(<span class="built_in">NULL</span>, <span class="built_in">NULL</span>, <span class="built_in">NULL</span>, &amp;p); <span class="comment">// 透明处理</span></span><br><span class="line">    Mat imgNew = <span class="built_in">imread</span>(<span class="string">&quot;C:/Users/ACER/Pictures/Saved Pictures/old_car.jpg&quot;</span>);</span><br><span class="line">    Mat imgOld = <span class="built_in">imread</span>(<span class="string">&quot;C:/Users/ACER/Pictures/Saved Pictures/new_car.jpg&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">gradual_change</span>(imgOld, imgNew);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>OpenCV</category>
      </categories>
  </entry>
  <entry>
    <title>opencv只显示感兴趣的区域</title>
    <url>/posts/c13.html</url>
    <content><![CDATA[<p>在推理算法中，只想把有用的区域1000给保留，其他区域都给变成黑</p>
<span id="more"></span>

<p>2023&#x2F;12&#x2F;07兔子借8000色（全0），这样能够更好的推理，减少其他无用的区域造成干扰，还会减少计算时间。例如：违章停车场景下，框了违章停车的那部分，其他区域可能也有车，但我只想检测框住的区域的车牌信息，这时就需要只把框住的保留。</p>
<p>c++：</p>
<p>思路：</p>
<ol>
<li><p>先建一张和原图尺寸通道数都相同的图。</p>
</li>
<li><p>把这张图感兴趣的区域填涂白色</p>
</li>
<li><p>把这张图和原图与运算</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reserve_interest_area</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mat imgSrc = <span class="built_in">imread</span>(<span class="string">&quot;C:/Users/ACER/Pictures/Saved Pictures/SmartHome.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//CV_8UC3是3通道   CV_8UC1是单通道</span></span><br><span class="line">    Mat img=Mat::<span class="built_in">zeros</span>(imgSrc.rows,imgSrc.cols, CV_8UC3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;channel:%d\r\n&quot;</span>, img.<span class="built_in">channels</span>());</span><br><span class="line">    vector&lt;vector&lt;Point&gt;&gt; pointss;</span><br><span class="line">    vector&lt;Point&gt; points;</span><br><span class="line">    points.<span class="built_in">push_back</span>(<span class="built_in">Point</span>(<span class="number">80</span>, <span class="number">80</span>));</span><br><span class="line">    points.<span class="built_in">push_back</span>(<span class="built_in">Point</span>(<span class="number">40</span>, <span class="number">200</span>));</span><br><span class="line">    points.<span class="built_in">push_back</span>(<span class="built_in">Point</span>(<span class="number">200</span>, <span class="number">200</span>));</span><br><span class="line">    points.<span class="built_in">push_back</span>(<span class="built_in">Point</span>(<span class="number">160</span>, <span class="number">80</span>));</span><br><span class="line">    pointss.<span class="built_in">push_back</span>(points);</span><br><span class="line">    points.<span class="built_in">clear</span>();</span><br><span class="line">    points.<span class="built_in">push_back</span>(<span class="built_in">Point</span>(<span class="number">300</span>, <span class="number">80</span>));</span><br><span class="line">    points.<span class="built_in">push_back</span>(<span class="built_in">Point</span>(<span class="number">400</span>, <span class="number">80</span>));</span><br><span class="line">    points.<span class="built_in">push_back</span>(<span class="built_in">Point</span>(<span class="number">350</span>, <span class="number">160</span>));</span><br><span class="line">    pointss.<span class="built_in">push_back</span>(points);</span><br><span class="line">    <span class="comment">//把点连成线，第三个参数：是否闭合（首尾相连），按第二个参数里的点的顺序连接，顺序很重要，顺序不一样连接的线也就不一样</span></span><br><span class="line">    <span class="comment">//polylines(img, pointss, 1,Scalar(0, 255, 2),3);</span></span><br><span class="line">    <span class="comment">//与polylines相似，把封闭内的能围起来的都填充</span></span><br><span class="line">    <span class="built_in">fillPoly</span>(img, pointss, <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">    <span class="comment">//cvtColor(img, img, COLOR_RGB2GRAY);</span></span><br><span class="line">    <span class="comment">//dst = src1 &amp; src2</span></span><br><span class="line">    <span class="built_in">bitwise_and</span>(img, imgSrc, img);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;test&quot;</span>, img);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">waitKey</span>(<span class="number">0</span>) == <span class="number">27</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">destroyWindow</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/09/21/dZqnI8yXSuBb43M.png"></p>
<p>py：</p>
<p>与c++不太一样，主要是有掩膜，没有c++好理解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mask = np.zeros(frame.shape, dtype=np.uint8)</span><br><span class="line">pts = np.array([[x - BOX_VALUE <span class="keyword">for</span> x <span class="keyword">in</span> <span class="variable language_">self</span>.left_top]], np.int32)</span><br><span class="line">mask = cv2.fillPoly(mask, [pts], (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">mask = cv2.cvtColor(mask, cv2.COLOR_RGB2GRAY)</span><br><span class="line"><span class="comment">#当mask不为0时img&amp;img</span></span><br><span class="line">img = cv2.bitwise_and(img, img, mask=mask)</span><br></pre></td></tr></table></figure>

<p>把感兴趣的区域做一个透视变换，把感兴趣的区域扩充为原尺寸的图片。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span>  <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span>  <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core/utils/logger.hpp&gt;</span>  <span class="comment">//调试相关</span></span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span>  cv;</span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span>  std;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;Point&gt;&gt; pointss;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reserve_interest_area</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Mat imgSrc = <span class="built_in">imread</span>(<span class="string">&quot;C:/Users/ACER/Pictures/Saved Pictures/SmartHome.jpg&quot;</span>);</span><br><span class="line">  <span class="comment">//CV_8UC3是3通道   CV_8UC1是单通道</span></span><br><span class="line">  Mat img = Mat::<span class="built_in">zeros</span>(imgSrc.rows, imgSrc.cols, CV_8UC3);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;height:%d\r\n&quot;</span>, img.rows);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;width:%d\r\n&quot;</span>, img.cols);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;channel:%d\r\n&quot;</span>, img.<span class="built_in">channels</span>());</span><br><span class="line"></span><br><span class="line">  vector&lt;Point&gt; points;</span><br><span class="line">  points.<span class="built_in">push_back</span>(<span class="built_in">Point</span>(<span class="number">80</span>, <span class="number">80</span>));  <span class="comment">//左上</span></span><br><span class="line">  points.<span class="built_in">push_back</span>(<span class="built_in">Point</span>(<span class="number">760</span>, <span class="number">80</span>)); <span class="comment">//右上</span></span><br><span class="line">  points.<span class="built_in">push_back</span>(<span class="built_in">Point</span>(<span class="number">760</span>, <span class="number">160</span>));  <span class="comment">//右下</span></span><br><span class="line">  points.<span class="built_in">push_back</span>(<span class="built_in">Point</span>(<span class="number">80</span>, <span class="number">360</span>)); <span class="comment">//左下</span></span><br><span class="line">  pointss.<span class="built_in">push_back</span>(points);</span><br><span class="line">  <span class="built_in">fillPoly</span>(img, pointss, <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">  <span class="built_in">bitwise_and</span>(img, imgSrc, img);</span><br><span class="line">  <span class="built_in">imwrite</span>(<span class="string">&quot;C:/Users/ACER/Pictures/Saved Pictures/SmartHome_interset.jpg&quot;</span>, img);</span><br><span class="line">  <span class="built_in">imshow</span>(<span class="string">&quot;Original0&quot;</span>, imgSrc);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">waitKey</span>(<span class="number">0</span>) == <span class="number">27</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">destroyWindow</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">trans_interest_regular</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 读图片</span></span><br><span class="line">  Mat src = <span class="built_in">imread</span>(<span class="string">&quot;C:/Users/ACER/Pictures/Saved Pictures/SmartHome_interset.jpg&quot;</span>);</span><br><span class="line">  Point2f src_vertices[<span class="number">4</span>];</span><br><span class="line">  src_vertices[<span class="number">0</span>] = pointss[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">  src_vertices[<span class="number">1</span>] = pointss[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">  src_vertices[<span class="number">2</span>] = pointss[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">  src_vertices[<span class="number">3</span>] = pointss[<span class="number">0</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">  Point2f dst_vertices[<span class="number">4</span>];</span><br><span class="line">  dst_vertices[<span class="number">0</span>] = <span class="built_in">Point</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  dst_vertices[<span class="number">1</span>] = <span class="built_in">Point</span>(<span class="number">800</span>, <span class="number">0</span>);</span><br><span class="line">  dst_vertices[<span class="number">2</span>] = <span class="built_in">Point</span>(<span class="number">800</span>,<span class="number">400</span>);</span><br><span class="line">  dst_vertices[<span class="number">3</span>] = <span class="built_in">Point</span>(<span class="number">0</span>,<span class="number">400</span>);</span><br><span class="line">  <span class="comment">//根据输入和输出点获得图像透视变换的矩阵，定点依次对应</span></span><br><span class="line">  Mat warpMatrix = <span class="built_in">getPerspectiveTransform</span>(src_vertices, dst_vertices);</span><br><span class="line">  cv::Mat rotated;</span><br><span class="line">  <span class="comment">// 透视变换</span></span><br><span class="line">  <span class="built_in">warpPerspective</span>(src, rotated, warpMatrix, rotated.<span class="built_in">size</span>(), INTER_LINEAR, BORDER_ISOLATED);</span><br><span class="line">  <span class="comment">// Display the image</span></span><br><span class="line">  <span class="built_in">imshow</span>(<span class="string">&quot;Original1&quot;</span>, src);</span><br><span class="line">  <span class="built_in">imshow</span>(<span class="string">&quot;Perspective&quot;</span>, rotated);</span><br><span class="line">  <span class="built_in">waitKey</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">main</span><span class="params">(<span class="type">int</span>  argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  utils::logging::<span class="built_in">setLogLevel</span>(utils::logging::LOG_LEVEL_ERROR);<span class="comment">//只输出错误日志</span></span><br><span class="line">  <span class="built_in">reserve_interest_area</span>();</span><br><span class="line">  <span class="built_in">trans_interest_regular</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>规则的矩形效果：</li>
</ul>
<p><img src="https://s2.loli.net/2024/09/21/89Atugo6iBkSw3V.png"></p>
<ul>
<li>不规则区域效果：</li>
</ul>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/OpenCV/images/WEBRESOURCEd5acaebd32e6bf18f66379826e9d402c%E6%88%AA%E5%9B%BE.png"></p>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>OpenCV</category>
      </categories>
  </entry>
  <entry>
    <title>opencv图片上写中文</title>
    <url>/posts/80c3.html</url>
    <content><![CDATA[<h1 id="一、自己opencv库有freetype"><a href="#一、自己opencv库有freetype" class="headerlink" title="一、自己opencv库有freetype"></a>一、自己opencv库有freetype</h1><span id="more"></span>



<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/freetype.hpp&gt;</span>    <span class="comment">//编译的opencv是否包含，包含就能使用此方法，方便快捷，不包含就要使用方法二了。</span></span></span><br><span class="line"></span><br><span class="line">cv::Ptr&lt;cv::freetype::FreeType2&gt; ft2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字体初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_font</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ft2 = cv::freetype::<span class="built_in">createFreeType2</span>();</span><br><span class="line">    ft2-&gt;<span class="built_in">loadFontData</span>( <span class="string">&quot;../font/msyh.ttc&quot;</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加入字体文件后</span></span><br><span class="line">ft2-&gt;<span class="built_in">putText</span>(frame,data[<span class="number">0</span>].vehicle_plate_server[i].number,</span><br><span class="line">    cv::<span class="built_in">Point</span>(data[<span class="number">0</span>].vehicle_plate_server[i].rect[<span class="number">0</span>]<span class="number">+5</span>, data[<span class="number">0</span>].vehicle_plate_server[i].rect[<span class="number">3</span>]<span class="number">+15</span>),</span><br><span class="line">    <span class="number">20</span>,cv::<span class="built_in">Scalar</span>(r,g,b),<span class="number">1</span>,<span class="number">8</span>,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>二、需要自己装freetype库</p>
<p>需要包含一个头文件和一个源文件，当然也可以封装为一个hpp文件。</p>
<p>CvxText.h:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> OPENCV_CVX_TEXT_HPP_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OPENCV_CVX_TEXT_HPP_</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 支持OpenCV中文汉字输入</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ft2build.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> FT_FREETYPE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CvxText</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 装载字库文件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">CvxText</span>(<span class="type">const</span> <span class="type">char</span>* freeType);</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">CvxText</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取字体.目前有些参数尚不支持.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * \param font        字体类型, 目前不支持</span></span><br><span class="line"><span class="comment">    * \param size        字体大小/空白比例/间隔比例/旋转角度</span></span><br><span class="line"><span class="comment">    * \param underline   下画线</span></span><br><span class="line"><span class="comment">    * \param diaphaneity 透明度</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * \sa setFont, restoreFont</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getFont</span><span class="params">(<span class="type">int</span>* type, cv::Scalar* size = <span class="literal">nullptr</span>, <span class="type">bool</span>* underline = <span class="literal">nullptr</span>, <span class="type">float</span>* diaphaneity = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 设置字体.目前有些参数尚不支持.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * \param font        字体类型, 目前不支持</span></span><br><span class="line"><span class="comment">    * \param size        字体大小/空白比例/间隔比例/旋转角度</span></span><br><span class="line"><span class="comment">    * \param underline   下画线</span></span><br><span class="line"><span class="comment">    * \param diaphaneity 透明度</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * \sa getFont, restoreFont</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setFont</span><span class="params">(<span class="type">int</span>* type, cv::Scalar* size = <span class="literal">nullptr</span>, <span class="type">bool</span>* underline = <span class="literal">nullptr</span>, <span class="type">float</span>* diaphaneity = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 恢复原始的字体设置.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * \sa getFont, setFont</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">restoreFont</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 输出汉字(颜色默认为黑色).遇到不能输出的字符将停止.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * \param img  输出的影象</span></span><br><span class="line"><span class="comment">    * \param text 文本内容</span></span><br><span class="line"><span class="comment">    * \param pos  文本位置</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * \return 返回成功输出的字符长度，失败返回-1.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">putText</span><span class="params">(cv::Mat&amp; img, <span class="type">char</span>* text, cv::Point pos)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 输出汉字(颜色默认为黑色).遇到不能输出的字符将停止.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * \param img  输出的影象</span></span><br><span class="line"><span class="comment">    * \param text 文本内容</span></span><br><span class="line"><span class="comment">    * \param pos  文本位置</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * \return 返回成功输出的字符长度，失败返回-1.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">putText</span><span class="params">(cv::Mat&amp; img, <span class="type">const</span> <span class="type">wchar_t</span>* text, cv::Point pos)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 输出汉字.遇到不能输出的字符将停止.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * \param img   输出的影象</span></span><br><span class="line"><span class="comment">    * \param text  文本内容</span></span><br><span class="line"><span class="comment">    * \param pos   文本位置</span></span><br><span class="line"><span class="comment">    * \param color 文本颜色</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * \return 返回成功输出的字符长度，失败返回-1.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">putText</span><span class="params">(cv::Mat&amp; img, <span class="type">const</span> <span class="type">char</span>* text, cv::Point pos, cv::Scalar color)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 输出汉字.遇到不能输出的字符将停止.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * \param img   输出的影象</span></span><br><span class="line"><span class="comment">    * \param text  文本内容</span></span><br><span class="line"><span class="comment">    * \param pos   文本位置</span></span><br><span class="line"><span class="comment">    * \param color 文本颜色</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * \return 返回成功输出的字符长度，失败返回-1.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">putText</span><span class="params">(cv::Mat&amp; img, <span class="type">const</span> <span class="type">wchar_t</span>* text, cv::Point pos, cv::Scalar color)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 禁止copy</span></span><br><span class="line">    CvxText&amp; <span class="keyword">operator</span>=(<span class="type">const</span> CvxText&amp;);</span><br><span class="line">    <span class="comment">// 输出当前字符, 更新m_pos位置</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">putWChar</span><span class="params">(cv::Mat&amp; img, <span class="type">wchar_t</span> wc, cv::Point&amp; pos, cv::Scalar color)</span></span>;</span><br><span class="line"></span><br><span class="line">    FT_Library   m_library;   <span class="comment">// 字库</span></span><br><span class="line">    FT_Face      m_face;      <span class="comment">// 字体</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认的字体输出参数</span></span><br><span class="line">    <span class="type">int</span>         m_fontType;</span><br><span class="line">    cv::Scalar   m_fontSize;</span><br><span class="line">    <span class="type">bool</span>      m_fontUnderline;</span><br><span class="line">    <span class="type">float</span>      m_fontDiaphaneity;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// OPENCV_CVX_TEXT_HPP_</span></span></span><br></pre></td></tr></table></figure>

<p>CvxText.cpp:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CvxText.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开字库</span></span><br><span class="line">CvxText::<span class="built_in">CvxText</span>(<span class="type">const</span> <span class="type">char</span>* freeType)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">assert</span>(freeType != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开字库文件, 创建一个字体</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FT_Init_FreeType</span>(&amp;m_library))<span class="keyword">throw</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FT_New_Face</span>(m_library, freeType, <span class="number">0</span>, &amp;m_face))<span class="keyword">throw</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置字体输出参数</span></span><br><span class="line">    <span class="built_in">restoreFont</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置C语言的字符集环境</span></span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放FreeType资源</span></span><br><span class="line">CvxText::~<span class="built_in">CvxText</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">FT_Done_Face</span>(m_face);</span><br><span class="line">    <span class="built_in">FT_Done_FreeType</span>(m_library);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置字体参数:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// font         - 字体类型, 目前不支持</span></span><br><span class="line"><span class="comment">// size         - 字体大小/空白比例/间隔比例/旋转角度</span></span><br><span class="line"><span class="comment">// underline   - 下画线</span></span><br><span class="line"><span class="comment">// diaphaneity   - 透明度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CvxText::getFont</span><span class="params">(<span class="type">int</span>* type, cv::Scalar* size, <span class="type">bool</span>* underline, <span class="type">float</span>* diaphaneity)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (type) *type = m_fontType;</span><br><span class="line">    <span class="keyword">if</span> (size) *size = m_fontSize;</span><br><span class="line">    <span class="keyword">if</span> (underline) *underline = m_fontUnderline;</span><br><span class="line">    <span class="keyword">if</span> (diaphaneity) *diaphaneity = m_fontDiaphaneity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CvxText::setFont</span><span class="params">(<span class="type">int</span>* type, cv::Scalar* size, <span class="type">bool</span>* underline, <span class="type">float</span>* diaphaneity)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 参数合法性检查</span></span><br><span class="line">    <span class="keyword">if</span> (type) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*type &gt;= <span class="number">0</span>) m_fontType = *type;    <span class="comment">//网上很多地方if (*type &gt;= 0)没加星号</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (size) &#123;</span><br><span class="line">        m_fontSize.val[<span class="number">0</span>] = std::<span class="built_in">fabs</span>(size-&gt;val[<span class="number">0</span>]);</span><br><span class="line">        m_fontSize.val[<span class="number">1</span>] = std::<span class="built_in">fabs</span>(size-&gt;val[<span class="number">1</span>]);</span><br><span class="line">        m_fontSize.val[<span class="number">2</span>] = std::<span class="built_in">fabs</span>(size-&gt;val[<span class="number">2</span>]);</span><br><span class="line">        m_fontSize.val[<span class="number">3</span>] = std::<span class="built_in">fabs</span>(size-&gt;val[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (underline) &#123;</span><br><span class="line">        m_fontUnderline = *underline;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (diaphaneity) &#123;</span><br><span class="line">        m_fontDiaphaneity = *diaphaneity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FT_Set_Pixel_Sizes</span>(m_face, (<span class="type">int</span>)m_fontSize.val[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 恢复原始的字体设置</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CvxText::restoreFont</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_fontType = <span class="number">0</span>;            <span class="comment">// 字体类型(不支持)</span></span><br><span class="line"></span><br><span class="line">    m_fontSize.val[<span class="number">0</span>] = <span class="number">20</span>;      <span class="comment">// 字体大小</span></span><br><span class="line">    m_fontSize.val[<span class="number">1</span>] = <span class="number">0.5</span>;   <span class="comment">// 空白字符大小比例</span></span><br><span class="line">    m_fontSize.val[<span class="number">2</span>] = <span class="number">0.1</span>;   <span class="comment">// 间隔大小比例</span></span><br><span class="line">    m_fontSize.val[<span class="number">3</span>] = <span class="number">0</span>;      <span class="comment">// 旋转角度(不支持)</span></span><br><span class="line"></span><br><span class="line">    m_fontUnderline = <span class="literal">false</span>;   <span class="comment">// 下画线(不支持)</span></span><br><span class="line"></span><br><span class="line">    m_fontDiaphaneity = <span class="number">1.0</span>;   <span class="comment">// 色彩比例(可产生透明效果)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置字符大小</span></span><br><span class="line">    <span class="built_in">FT_Set_Pixel_Sizes</span>(m_face, (<span class="type">int</span>)m_fontSize.val[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出函数(颜色默认为白色)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CvxText::putText</span><span class="params">(cv::Mat&amp; img, <span class="type">char</span>* text, cv::Point pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">putText</span>(img, text, pos, <span class="built_in">CV_RGB</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CvxText::putText</span><span class="params">(cv::Mat&amp; img, <span class="type">const</span> <span class="type">wchar_t</span>* text, cv::Point pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">putText</span>(img, text, pos, <span class="built_in">CV_RGB</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CvxText::putText</span><span class="params">(cv::Mat&amp; img, <span class="type">const</span> <span class="type">char</span>* text, cv::Point pos, cv::Scalar color)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (img.data == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (text == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; text[i] != <span class="string">&#x27;\0&#x27;</span>; ++i) &#123;</span><br><span class="line">        <span class="type">wchar_t</span> wc = text[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析双字节符号</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isascii</span>(wc)) <span class="built_in">mbtowc</span>(&amp;wc, &amp;text[i++], <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出当前的字符</span></span><br><span class="line">        <span class="built_in">putWChar</span>(img, wc, pos, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CvxText::putText</span><span class="params">(cv::Mat&amp; img, <span class="type">const</span> <span class="type">wchar_t</span>* text, cv::Point pos, cv::Scalar color)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (img.data == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (text == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; text[i] != <span class="string">&#x27;\0&#x27;</span>; ++i) &#123;</span><br><span class="line">        <span class="comment">// 输出当前的字符</span></span><br><span class="line">        <span class="built_in">putWChar</span>(img, text[i], pos, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出当前字符, 更新m_pos位置</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CvxText::putWChar</span><span class="params">(cv::Mat&amp; img, <span class="type">wchar_t</span> wc, cv::Point&amp; pos, cv::Scalar color)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 根据unicode生成字体的二值位图</span></span><br><span class="line">    FT_UInt glyph_index = <span class="built_in">FT_Get_Char_Index</span>(m_face, wc);</span><br><span class="line">    <span class="built_in">FT_Load_Glyph</span>(m_face, glyph_index, FT_LOAD_DEFAULT);</span><br><span class="line">    <span class="built_in">FT_Render_Glyph</span>(m_face-&gt;glyph, FT_RENDER_MODE_MONO);</span><br><span class="line"></span><br><span class="line">    FT_GlyphSlot slot = m_face-&gt;glyph;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 行列数</span></span><br><span class="line">    <span class="type">int</span> rows = slot-&gt;bitmap.rows;</span><br><span class="line">    <span class="type">int</span> cols = slot-&gt;bitmap.width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rows; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; cols; ++j) &#123;</span><br><span class="line">            <span class="type">int</span> off = i * slot-&gt;bitmap.pitch + j / <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (slot-&gt;bitmap.buffer[off] &amp; (<span class="number">0xC0</span> &gt;&gt; (j % <span class="number">8</span>))) &#123;</span><br><span class="line">                <span class="type">int</span> r = pos.y - (rows - <span class="number">1</span> - i);</span><br><span class="line">                <span class="type">int</span> c = pos.x + j;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (r &gt;= <span class="number">0</span> &amp;&amp; r &lt; img.rows &amp;&amp; c &gt;= <span class="number">0</span> &amp;&amp; c &lt; img.cols) &#123;</span><br><span class="line">                    cv::Vec3b pixel = img.<span class="built_in">at</span>&lt;cv::Vec3b&gt;(cv::<span class="built_in">Point</span>(c, r));</span><br><span class="line">                    cv::Scalar scalar = cv::<span class="built_in">Scalar</span>(pixel.val[<span class="number">0</span>], pixel.val[<span class="number">1</span>], pixel.val[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 进行色彩融合</span></span><br><span class="line">                    <span class="type">float</span> p = m_fontDiaphaneity;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">                        scalar.val[k] = scalar.val[k] * (<span class="number">1</span> - p) + color.val[k] * p;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    img.<span class="built_in">at</span>&lt;cv::Vec3b&gt;(cv::<span class="built_in">Point</span>(c, r))[<span class="number">0</span>] = (<span class="type">unsigned</span> <span class="type">char</span>)(scalar.val[<span class="number">0</span>]);</span><br><span class="line">                    img.<span class="built_in">at</span>&lt;cv::Vec3b&gt;(cv::<span class="built_in">Point</span>(c, r))[<span class="number">1</span>] = (<span class="type">unsigned</span> <span class="type">char</span>)(scalar.val[<span class="number">1</span>]);</span><br><span class="line">                    img.<span class="built_in">at</span>&lt;cv::Vec3b&gt;(cv::<span class="built_in">Point</span>(c, r))[<span class="number">2</span>] = (<span class="type">unsigned</span> <span class="type">char</span>)(scalar.val[<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改下一个字的输出位置</span></span><br><span class="line">    <span class="type">double</span> space = m_fontSize.val[<span class="number">0</span>] * m_fontSize.val[<span class="number">1</span>];</span><br><span class="line">    <span class="type">double</span> sep = m_fontSize.val[<span class="number">0</span>] * m_fontSize.val[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    pos.x += (<span class="type">int</span>)((cols ? cols : space) + sep);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>应用：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    utils::logging::<span class="built_in">setLogLevel</span>(utils::logging::LOG_LEVEL_ERROR);<span class="comment">//只输出错误日志</span></span><br><span class="line">    Mat img = <span class="built_in">imread</span>(<span class="string">&quot;C:/Users/ACER/Pictures/Saved Pictures/SmartHome.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function">CvxText <span class="title">text</span><span class="params">(<span class="string">&quot;../simhei.ttf&quot;</span>)</span></span>; <span class="comment">//指定字体</span></span><br><span class="line">    <span class="comment">//CvxText text(&quot;../msyh.ttc&quot;); //指定字体</span></span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* msg = <span class="string">&quot;jiabao佳宝&quot;</span>;</span><br><span class="line">    <span class="type">float</span> p = <span class="number">0.5</span>;</span><br><span class="line">    text.<span class="built_in">setFont</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;p);   <span class="comment">// 透明处理</span></span><br><span class="line">    text.<span class="built_in">putText</span>(img, msg, <span class="built_in">Point</span>(<span class="number">30</span>, <span class="number">30</span>), <span class="built_in">CV_RGB</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;test&quot;</span>, img);</span><br><span class="line">    cv::<span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>OpenCV</category>
      </categories>
  </entry>
  <entry>
    <title>opencv人脸识别</title>
    <url>/posts/a0b8.html</url>
    <content><![CDATA[<p>opencv人脸识别步骤：</p>
<span id="more"></span>

<p>1、加载haar分类器</p>
<p>2、加载训练文件。预先训练的人脸特征值与标签（必须是整形）对应。</p>
<p>3、预处理图片。二值、直方化</p>
<p>4、裁剪出人脸</p>
<p>5、把裁剪的人脸与训练文件做特征点对比，与标签对应。</p>
<p>文件说明：</p>
<p>config：</p>
<p>haarcascade_frontalface_alt.xml：分类器</p>
<p>abelName.json:label对应的name文件</p>
<p>train.xml:训练图像的文件</p>
<p>img_train:</p>
<p>label+name:存放训练人脸图像</p>
<p>font:</p>
<p>字体文件（为了在图片上显示中文）</p>
<p>程序说明：</p>
<p>1、训练文件要在显示图像窗口按1，而输入label和name要在cmd窗口写</p>
<p>存在问题：</p>
<p>1、标签必须是整形，不能是字符串，而又想显示中文名字，我就创了一个labelName的json文件，label是主键、name是值，这个文件相当于数据库吧，但是如果把labelName</p>
<p>里的字段删去以后，训练文件里又不同步了。（想法：训练的人脸图像我也存了起来，按标签+姓名命名，可以在程序开始先读取json里的数据，然后把json里有的字段训练）</p>
<p>2、无界面。（可以与以前学的Qt结合起来）</p>
<p>3、一个陌生人来也会识别为训练内的人（好吓人）</p>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>OpenCV</category>
      </categories>
  </entry>
  <entry>
    <title>opencv视频处理</title>
    <url>/posts/c5fe.html</url>
    <content><![CDATA[<p>保持原视频速率播放：</p>
<span id="more"></span>

<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">    int fps = capture.<span class="built_in">get</span>(<span class="built_in">cv</span>::CAP_PROP_FPS);</span><br><span class="line">    int <span class="built_in">delay</span> = <span class="number">1000</span> / fps;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;delay:&quot;</span> &lt;&lt; <span class="built_in">delay</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;fps:&quot;</span> &lt;&lt; fps &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">cv</span>::waitKey(<span class="built_in">delay</span>) == <span class="number">27</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>从videoUrl中按下空格截取图片到directory目录中，以时间戳命名：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">/<span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">***</span></span><br><span class="line"><span class="strong"> **</span>* @Description: 从videoUrl中按下空格截取图片到directory目录中，以时间戳命名</span><br><span class="line"> <span class="strong">*** @param &#123;string&#125; &amp;videoUrl 视频流</span></span><br><span class="line"><span class="strong"> **</span>* @param &#123;string&#125; &amp;directory 截取图片保存目录</span><br><span class="line"> <span class="strong">*** @return &#123;void&#125;</span></span><br><span class="line"><span class="strong"> **</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="emphasis">*/</span></span><br><span class="line"><span class="emphasis">void capture_imgs(const std::string &amp;videoUrl, const std::string &amp;directory)</span></span><br><span class="line"><span class="emphasis">&#123;</span></span><br><span class="line"><span class="emphasis">    cv::Mat frame;</span></span><br><span class="line"><span class="emphasis">    int key;</span></span><br><span class="line"><span class="emphasis">    datetime_t dt;</span></span><br><span class="line"><span class="emphasis">    string imgName;</span></span><br><span class="line"><span class="emphasis">    char buf1[DATETIME_FMT_BUFLEN];</span></span><br><span class="line"><span class="emphasis">    cv::VideoCapture capture;</span></span><br><span class="line"><span class="emphasis">    if(videoUrl.size()&amp;&amp;videoUrl.front()==&#x27;0&#x27;)</span></span><br><span class="line"><span class="emphasis">    &#123;</span></span><br><span class="line"><span class="emphasis">        capture.open(atoi(videoUrl.c_str()));</span></span><br><span class="line"><span class="emphasis">    &#125;</span></span><br><span class="line"><span class="emphasis">    else</span></span><br><span class="line"><span class="emphasis">    &#123;</span></span><br><span class="line"><span class="emphasis">        capture.open(videoUrl);</span></span><br><span class="line"><span class="emphasis">    &#125;</span></span><br><span class="line"><span class="emphasis">    if (!capture.isOpened())</span></span><br><span class="line"><span class="emphasis">    &#123;</span></span><br><span class="line"><span class="emphasis">        printf(&quot;could not read this video file...\n&quot;);</span></span><br><span class="line"><span class="emphasis">        return;</span></span><br><span class="line"><span class="emphasis">    &#125;</span></span><br><span class="line"><span class="emphasis">    int fps = capture.get(cv::CAP_PROP_FPS);</span></span><br><span class="line"><span class="emphasis">    int delay = 1;</span></span><br><span class="line"><span class="emphasis">    if (fps)</span></span><br><span class="line"><span class="emphasis">    &#123;</span></span><br><span class="line"><span class="emphasis">        delay = 1000 / fps;</span></span><br><span class="line"><span class="emphasis">        cout &lt;&lt; &quot;delay:&quot; &lt;&lt; delay &lt;&lt; endl;</span></span><br><span class="line"><span class="emphasis">        cout &lt;&lt; &quot;fps:&quot; &lt;&lt; fps &lt;&lt; endl;</span></span><br><span class="line"><span class="emphasis">    &#125;</span></span><br><span class="line"><span class="emphasis">    mkdir(directory.c_str());</span></span><br><span class="line"><span class="emphasis">    while (1)</span></span><br><span class="line"><span class="emphasis">    &#123;</span></span><br><span class="line"><span class="emphasis">        if (capture.read(frame))</span></span><br><span class="line"><span class="emphasis">        &#123;</span></span><br><span class="line"><span class="emphasis">            imshow(videoUrl, frame);</span></span><br><span class="line"><span class="emphasis">            key = waitKey(1);</span></span><br><span class="line"><span class="emphasis">            if (key == 27)</span></span><br><span class="line"><span class="emphasis">            &#123;</span></span><br><span class="line"><span class="emphasis">                break;</span></span><br><span class="line"><span class="emphasis">            &#125;</span></span><br><span class="line"><span class="emphasis">            else if (key == 32) // 空格</span></span><br><span class="line"><span class="emphasis">            &#123;</span></span><br><span class="line"><span class="emphasis">                dt = datetime_now();</span></span><br><span class="line"><span class="emphasis">                imgName = datetime_fmt_iso(&amp;dt, buf1);</span></span><br><span class="line"><span class="emphasis">                string filePath = directory + imgName;</span></span><br><span class="line"><span class="emphasis">                filePath.pop_back();</span></span><br><span class="line"><span class="emphasis">                filePath += &quot;.jpg&quot;;</span></span><br><span class="line"><span class="emphasis">                filePath = regex_replace(filePath, regex(&quot;:&quot;), &quot;-&quot;);</span></span><br><span class="line"><span class="emphasis">                printf(&quot;imgname:%s\n&quot;, filePath.c_str());</span></span><br><span class="line"><span class="emphasis">                if (imwrite(filePath, frame))</span></span><br><span class="line"><span class="emphasis">                &#123;</span></span><br><span class="line"><span class="emphasis">                    printf(&quot;save success!\n&quot;);</span></span><br><span class="line"><span class="emphasis">                &#125;</span></span><br><span class="line"><span class="emphasis">                else</span></span><br><span class="line"><span class="emphasis">                &#123;</span></span><br><span class="line"><span class="emphasis">                    printf(&quot;save fail!\n&quot;);</span></span><br><span class="line"><span class="emphasis">                &#125;</span></span><br><span class="line"><span class="emphasis">            &#125;</span></span><br><span class="line"><span class="emphasis">        &#125;</span></span><br><span class="line"><span class="emphasis">        else</span></span><br><span class="line"><span class="emphasis">        &#123;</span></span><br><span class="line"><span class="emphasis">            capture.release(); // 必须加release释放，否则会内存泄漏</span></span><br><span class="line"><span class="emphasis">            cout &lt;&lt; &quot;未获取到帧数据,重新获取打开&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="emphasis">            if (videoUrl.size() &amp;&amp; videoUrl.front() == &#x27;0&#x27;)</span></span><br><span class="line"><span class="emphasis">            &#123;</span></span><br><span class="line"><span class="emphasis">                capture.open(atoi(videoUrl.c_str()));</span></span><br><span class="line"><span class="emphasis">            &#125;</span></span><br><span class="line"><span class="emphasis">            else</span></span><br><span class="line"><span class="emphasis">            &#123;</span></span><br><span class="line"><span class="emphasis">                capture.open(videoUrl);</span></span><br><span class="line"><span class="emphasis">            &#125;</span></span><br><span class="line"><span class="emphasis">        &#125;</span></span><br><span class="line"><span class="emphasis">    &#125;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>OpenCV</category>
      </categories>
  </entry>
  <entry>
    <title>opencv注意事项</title>
    <url>/posts/3a95.html</url>
    <content><![CDATA[<p>一、不让显示一堆无用的调试信息</p>
<span id="more"></span>

<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core/utils/logger.hpp&gt;</span>	//调试相关</span></span><br><span class="line"><span class="symbol">utils:</span>:logging::setLogLevel(utils::logging::LOG_LEVEL_ERROR)<span class="punctuation">;</span><span class="comment">//只输出错误日志</span></span><br></pre></td></tr></table></figure>

<p>二、在vs中添加opencv环境</p>
<p>1、配置包含目录</p>
<p><img src="https://s2.loli.net/2024/09/21/H3gd79IDXtyuQiG.png"></p>
<p>2、配置库目录</p>
<p><img src="https://s2.loli.net/2024/09/21/p3KtcI9FT5Lwshk.png"></p>
<p>3、配置附加依赖项</p>
<p><img src="https://s2.loli.net/2024/09/21/UG9jmL2eExKXkhz.png"></p>
<p>4、把以上配置保存，形成一个配置文件，以后的新项目直接添加配置文件就行了</p>
<ul>
<li>新建一个项目属性表，在新项目属性表里面配置上面的配置</li>
</ul>
<p><img src="https://s2.loli.net/2024/09/21/ZrIPWxBwlnMq423.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/tQE7ykXOWi6SYDb.png"></p>
<p>切记，要在这个新建的属性上面进行上面介绍的配置</p>
<p>配置完之后，打开看一下这个配置文件的内容：</p>
<p><img src="https://s2.loli.net/2024/09/21/tvQWmrKaiEgMnud.png"></p>
<ul>
<li>新项目添加现成的配置文件：</li>
</ul>
<p>最好把配置文件也复制一份到项目下，防止原工程删除导致配置文件找不到。也可以添加多个配置文件，是可以叠加的。</p>
<p><img src="https://s2.loli.net/2024/09/21/mdJPLq1UhpC72Kb.png"></p>
<p>三、传递参数</p>
<p>这样直接&#x3D;，只是将Mat这个结构体信息拷贝了一份，并没有拷贝指向图像的内存信息，操作仍然在同一内存中进行的，所以原图，也就是实参发生了改变。调用fun 前与后的img与img1是一样的，显示的图片也是带字体的。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(Mat img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mat img1 = img;</span><br><span class="line">    <span class="function">CvxText <span class="title">text</span><span class="params">(<span class="string">&quot;../simhei.ttf&quot;</span>)</span></span>; <span class="comment">// 指定字体</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *msg = <span class="string">&quot;jiabao佳宝&quot;</span>;</span><br><span class="line">    <span class="type">float</span> p = <span class="number">1</span>;</span><br><span class="line">    text.<span class="built_in">setFont</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;p); <span class="comment">// 透明处理</span></span><br><span class="line">    text.<span class="built_in">putText</span>(img1, msg, <span class="built_in">Point</span>(<span class="number">30</span>, <span class="number">30</span>), <span class="built_in">CV_RGB</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    utils::logging::<span class="built_in">setLogLevel</span>(utils::logging::LOG_LEVEL_ERROR); <span class="comment">// 只输出错误日志</span></span><br><span class="line">    Mat img = <span class="built_in">imread</span>(<span class="string">&quot;C:/Users/ACER/Pictures/Saved Pictures/SmartHome.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fun</span>(img);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;test&quot;</span>, img);</span><br><span class="line"></span><br><span class="line">    cv::<span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不想改变原图，就需要这样：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">	<span class="comment">//深拷贝</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//方法1</span></span><br><span class="line">	<span class="keyword">Mat</span> img1 = img.clone();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方法二</span></span><br><span class="line">	<span class="keyword">Mat</span> img1;</span><br><span class="line">img.copyTo(img1);</span><br></pre></td></tr></table></figure>

<p>CmakeList:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">set</span><span class="params">(OpenCV_DIR  E:/Program/VScode/opencv/opencv_4.<span class="number">6.0</span>/install/x64/mingw/lib)</span></span></span><br><span class="line"><span class="function"><span class="title">find_package</span><span class="params">(OpenCV REQUIRED)</span></span></span><br><span class="line">#添加头文件</span><br><span class="line"><span class="function"><span class="title">include_directories</span><span class="params">($&#123;OpenCV_INCLUDE_DIRS&#125;)</span></span></span><br><span class="line">#链接库文件</span><br><span class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(test1  $&#123;OpenCV_LIBS&#125;)</span></span></span><br><span class="line"><span class="function"><span class="title">message</span><span class="params">(<span class="string">&quot;OpenCV_INCLUDE_DIRS:&quot;</span> ($&#123;OpenCV_INCLUDE_DIRS&#125;)</span></span>)</span><br><span class="line"><span class="function"><span class="title">message</span><span class="params">(<span class="string">&quot;OpenCV_LIBS:&quot;</span> ($&#123;OpenCV_LIBS&#125;)</span></span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>OpenCV</category>
      </categories>
  </entry>
  <entry>
    <title>ffmpeg使用</title>
    <url>/posts/34ce.html</url>
    <content><![CDATA[<p>ffmpeg官方文档：<a href="https://ffmpeg.org//documentation.html">文档 (ffmpeg.org)</a></p>
<span id="more"></span>

<pre><code>官方wiki：[FFmpeg](https://trac.ffmpeg.org/)
</code></pre>
<p>组成：</p>
<p>封装模块AVFormat</p>
<p>一般格式：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">ffmpeg &#123;<span class="number">1</span>&#125; &#123;<span class="number">2</span>&#125; -<span class="selector-tag">i</span> &#123;<span class="number">3</span>&#125; &#123;<span class="number">4</span>&#125; &#123;<span class="number">5</span>&#125;</span><br><span class="line"><span class="number">1</span>、全局参数</span><br><span class="line"><span class="number">2</span>、输入文件参数</span><br><span class="line"><span class="number">3</span>、输入文件</span><br><span class="line"><span class="number">4</span>、输出文件参数</span><br><span class="line"><span class="number">5</span>、输出文件</span><br><span class="line"></span><br><span class="line">$ ffmpeg \</span><br><span class="line"><span class="selector-attr">[全局参数]</span> \</span><br><span class="line"><span class="selector-attr">[输入文件参数]</span> \</span><br><span class="line">-<span class="selector-tag">i</span> <span class="selector-attr">[输入文件]</span> \</span><br><span class="line"><span class="selector-attr">[输出文件参数]</span> \</span><br><span class="line"><span class="selector-attr">[输出文件]</span></span><br></pre></td></tr></table></figure>

<p>常用命令行参数：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-c：指定编码器</span></span><br><span class="line"><span class="deletion">-c copy：直接复制，不经过重新编码（这样比较快）</span></span><br><span class="line"><span class="deletion">-c:v：指定视频编码器</span></span><br><span class="line"><span class="deletion">-c:a：指定音频编码器</span></span><br><span class="line"><span class="deletion">-i：指定输入文件</span></span><br><span class="line"><span class="deletion">-an：去除音频流</span></span><br><span class="line"><span class="deletion">-vn： 去除视频流</span></span><br><span class="line"><span class="deletion">-preset：指定输出的视频质量，会影响文件的生成速度，有以下几个可用的值 ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow。</span></span><br><span class="line"><span class="deletion">-y：不经过确认，输出时直接覆盖同名文件。</span></span><br></pre></td></tr></table></figure>

<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCEa3b6ea02ce75e98ac80cc38a7b1db6ae%E6%88%AA%E5%9B%BE.png"></p>
<p>查看视频参数：</p>
<p>1、Potplayer</p>
<p>2、MediaInfo</p>
<p>1、把本地视频推流</p>
<p>ffmpeg -i &#x2F;root&#x2F;workspace&#x2F;picasso_sdk_test&#x2F;video&#x2F;slagcar.mp4 -f flv rtmp:&#x2F;&#x2F;srs.changyg.top:23691&#x2F;stream&#x2F;1234</p>
<p>rtmp一般使用flv流格式，所以把mp4强制转为flv</p>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>边缘计算</category>
      </categories>
  </entry>
  <entry>
    <title>libtorch使用cuda加速</title>
    <url>/posts/b31a.html</url>
    <content><![CDATA[<p>libtorch的lib挺多的：</p>
<span id="more"></span>

<p>opencv_world460d.lib</p>
<p>asmjit.lib</p>
<p>c10.lib</p>
<p>c10_cuda.lib</p>
<p>caffe2_nvrtc.lib</p>
<p>clog.lib</p>
<p>cpuinfo.lib</p>
<p>dnnl.lib</p>
<p>fbgemm.lib</p>
<p>kineto.lib</p>
<p>libprotobuf.lib</p>
<p>libprotobuf-lite.lib</p>
<p>libprotoc.lib</p>
<p>pthreadpool.lib</p>
<p>torch.lib</p>
<p>torch_cpu.lib</p>
<p>torch_cuda.lib</p>
<p>torch_cuda_cpp.lib</p>
<p>torch_cuda_cu.lib</p>
<p>XNNPACK.lib</p>
<p>需要加神奇的一句：</p>
<p>&#x2F;INCLUDE:?warp_size@cuda@at@@YAHXZ</p>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>边缘计算</category>
      </categories>
  </entry>
  <entry>
    <title>v4l2-ctl --list-devices</title>
    <url>/posts/4e03.html</url>
    <content><![CDATA[<p>v4l2-ctl –list-devices</p>
<span id="more"></span>

<p><img src="https://s2.loli.net/2024/09/21/lVyHdgFDPwxvUtI.png"></p>
<p>v4l2-ctl -d  &#x2F;dev&#x2F;video18 –all</p>
<p><img src="https://s2.loli.net/2024/09/21/lGAUDuiIaxfyzCM.png"></p>
<p>用的 </p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;/dev/video18&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/09/21/VInOgGfad3DqAoL.png"></p>
<p>查看npu使用率：cat &#x2F;sys&#x2F;kernel&#x2F;debug&#x2F;rknpu&#x2F;load</p>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>边缘计算</category>
      </categories>
  </entry>
  <entry>
    <title>毕业设计</title>
    <url>/posts/6682.html</url>
    <content><![CDATA[<h1 id="Read-more-about-SSH-config-files-https-linux-die-net-man-5-ssh-config"><a href="#Read-more-about-SSH-config-files-https-linux-die-net-man-5-ssh-config" class="headerlink" title="Read more about SSH config files: https://linux.die.net/man/5/ssh_config"></a>Read more about SSH config files: <a href="https://linux.die.net/man/5/ssh_config">https://linux.die.net/man/5/ssh_config</a></h1><span id="more"></span>

<p>登录界面：<a href="http://123.56.239.115/">http://123.56.239.115/</a></p>
<p>前端UI：layui</p>
<p>图片标注：imagelabel</p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCE3f24505723b739bfe4098d0249ecf992%E6%88%AA%E5%9B%BE.png"></p>
<p>把本地摄像头推到rtsp本地服务器：</p>
<p>1、下载ffmpeg</p>
<p>2、下载EasyDarwin</p>
<p>3、使用ffmpeg查询DirectShow 设备</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ffmpeg</span> -list_devices <span class="literal">true</span> -f dshow -i dummy</span><br></pre></td></tr></table></figure>

<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCEac192c8da90ac247b2c4630dc85c4834%E6%88%AA%E5%9B%BE.png"></p>
<p>4、推流</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">把电脑摄像头推流</span><br><span class="line">ffmpeg -f dshow -<span class="selector-tag">i</span> video=<span class="string">&quot;Integrated Camera&quot;</span> -vcodec libx264 -preset:v ultrafast -tune:v zerolatency -rtsp_transport tcp -f rtsp rtsp:<span class="comment">//127.0.0.1/test1</span></span><br><span class="line">把本地视频推流</span><br><span class="line">ffmpeg -re -stream_loop -<span class="number">1</span> -<span class="selector-tag">i</span> C:\Users\<span class="number">72403</span>\Pictures\video\slagcartest<span class="selector-class">.mp4</span> -vcodec copy -codec copy -f rtsp rtsp:<span class="comment">//127.0.0.1:554/test2</span></span><br><span class="line">ffmpeg -re -stream_loop -<span class="number">1</span> -<span class="selector-tag">i</span> C:\Users\<span class="number">72403</span>\Pictures\video\slagcartest<span class="selector-class">.mp4</span> -vcodec libx264 -codec copy -f rtsp rtsp:<span class="comment">//127.0.0.1:554/test2</span></span><br><span class="line">ffmpeg -re -stream_loop -<span class="number">1</span> -<span class="selector-tag">i</span> C:\Users\<span class="number">72403</span>\Pictures\video\slagcartest<span class="selector-class">.mp4</span> -vcodec libx264 -f rtsp rtsp:<span class="comment">//127.0.0.1:554/test2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//TP-LINK rtsp流地址</span></span><br><span class="line">rtsp:<span class="comment">//admin:123456@192.168.1.110:554/stream1</span></span><br><span class="line">webrtc-streamer<span class="selector-class">.exe</span> -C config<span class="selector-class">.json</span>    http:<span class="comment">//localhost:8000/</span></span><br></pre></td></tr></table></figure>

<p>EasyDrawin后台：<a href="http://localhost:10008/">http://localhost:10008/</a> 	admin&#x2F;admin</p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCE03d459edf98a98be71008b05a3ac31cc%E6%88%AA%E5%9B%BE.png"></p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCEe94b6aa26674ce6cb6f720923a29066c%E6%88%AA%E5%9B%BE.png"></p>
<p>板子mpp拉流感觉色彩通道会有问题：</p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCEf632907a821c0928fb4609cb7d09fde6DTEBDDVTBE2WB%5BJQEC0UX@K.jpg"></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Host rk3399_develop </span><br><span class="line">    HostName <span class="number">192.168</span>.<span class="number">1.112</span>  </span><br><span class="line">    <span class="keyword">User</span> <span class="title">root</span></span><br><span class="line">    </span><br><span class="line">Host rk3588_zhiwei</span><br><span class="line">    HostName <span class="number">1.192</span>.<span class="number">217.120</span></span><br><span class="line">    Port <span class="number">7022</span></span><br><span class="line">    <span class="keyword">User</span> <span class="title">root</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>webrtc播放用ffmpeg把电脑摄像头转为rtsp的流：</p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCE2c4fd67367efbd9c08c1c6ea88e67eb0%E6%88%AA%E5%9B%BE.png"></p>
<p>TP-LINK摄像头：</p>
<table>
<thead>
<tr>
<th></th>
<th>vlc</th>
<th>opencv(win)</th>
<th>opencv(rk3399)</th>
<th>mpp</th>
<th>webrtc</th>
</tr>
</thead>
<tbody><tr>
<td>超清stream1</td>
<td>√</td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>超清stream2</td>
<td>√</td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>1920<em>1080:	1920</em>1088*2&#x3D;4177920</p>
<p>1280<em>720:	1280</em>720*2&#x3D;1843200</p>
<p>2560*1440:	?</p>
<p>代码中增大栈空间：（失败）</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> get_system_stack()</span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp = <span class="keyword">NULL</span>;</span><br><span class="line">    FILE *fpWrite = <span class="keyword">NULL</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    fp = popen(&quot;ulimit -s&quot;, &quot;r&quot;);</span><br><span class="line">    <span class="keyword">if</span> (fp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ret = fread(buf, <span class="number">1</span>, sizeof(buf) - <span class="number">1</span>, fp);</span><br><span class="line">        <span class="type">int</span> stack = atoi(buf);</span><br><span class="line">        <span class="keyword">if</span> (ret &gt; <span class="number">0</span> &amp;&amp; stack &lt; <span class="number">40000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            LOGI(&quot;当前栈空间:%d,请执行 ulimit -s 81920 增大栈空间\n&quot;, stack);</span><br><span class="line">            fpWrite = popen(&quot;ulimit -s 81960&quot;, &quot;w&quot;);</span><br><span class="line">            // fwrite(buf, sizeof(<span class="type">char</span>), strlen(buf), fpWrite);</span><br><span class="line">            // fpWrite = popen(&quot;ls&quot;, &quot;w&quot;);</span><br><span class="line">            <span class="keyword">if</span> (fpWrite == <span class="keyword">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                LOGI(&quot;ulimit -s 81920 增大栈空间 failed!\n&quot;);</span><br><span class="line">                pclose(fp);</span><br><span class="line">                pclose(fpWrite);</span><br><span class="line">                <span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                LOGI(&quot;ulimit -s 81920 增大栈空间 success!\n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;获取栈空间大小失败\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    pclose(fp);</span><br><span class="line">    pclose(fpWrite);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>TP-LINK摄像头仅仅支持最多两个rtsp客户端连接：</p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCE09b3745dec82ff5df2913110aa3e9022%E6%88%AA%E5%9B%BE.png"></p>
<p>使用mpp硬解码拉流：</p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCE3fa0203862d0e7967f4c000e9d4b9883%E6%88%AA%E5%9B%BE.png"></p>
<p>使用opencv软解码拉流：</p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCE694e4d56791c3d342be5b3b57399f46c%E6%88%AA%E5%9B%BE.png"></p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCE843fcc5763d3f34735f7adb379ccd632%E6%88%AA%E5%9B%BE.png"></p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCE92d27cf493af3af53f7d1fd8417fcd57%E6%88%AA%E5%9B%BE.png"></p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCE427ae20db4b84a6006a38d67e920c0ec%E6%88%AA%E5%9B%BE.png"></p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCE0dd7654df44a938ba473fb72cfe04ed9%E6%88%AA%E5%9B%BE.png"></p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCE7c601bc58b9d3682ac8774885170e71e%E6%88%AA%E5%9B%BE.png"></p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCEe4843393499da4f004c267b777df5b13%E6%88%AA%E5%9B%BE.png"></p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCE85a403dc135b19ef03299e4f122f3aa9%E6%88%AA%E5%9B%BE.png"></p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCE0ec82360480a6c891434cc45dc2325d6%E6%88%AA%E5%9B%BE.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/GkleiN95QFAbW4X.png"></p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCEc03472d76496ded7c91cc815f6f5d531%E6%88%AA%E5%9B%BE.png"></p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCE8680688ec8db4ecae4f221d6c06ca22b%E6%88%AA%E5%9B%BE.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/RuwqWvGNn4tBAzM.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/7pLfkQr46lMy2e1.png"></p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCEb9c240f5861709c7a0110a54149387cf%E6%88%AA%E5%9B%BE.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/ozSksFdumWOJ1eC.png"></p>
<p>192.168.79.104</p>
<p><img src="https://s2.loli.net/2024/09/21/j1BtDHfoJzVAgkO.png"></p>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>边缘计算</category>
      </categories>
  </entry>
  <entry>
    <title>边缘计算调试记录</title>
    <url>/posts/76b6.html</url>
    <content><![CDATA[<p>板子：</p>
<span id="more"></span>

<p>root</p>
<p>linaro</p>
<p>EMQX 服务器：</p>
<p><a href="https://emqx.changyg.top:23700/#/dashboard/overview">https://emqx.changyg.top:23700/#/dashboard/overview</a></p>
<p>admin</p>
<p>ctkj2023</p>
<p>服务器地址：mqtt::&#x2F;&#x2F;emqx.changyg.top</p>
<p>port:23622</p>
<p>编译好的build，执行：</p>
<p>1、cd到build</p>
<p>2、cmake ..</p>
<p>3、make</p>
<p>4、</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">   export <span class="variable constant_">LD_LIBRARY_PATH</span>=<span class="variable">$LD_LIBRARY_PATH</span><span class="symbol">:/root/workspace/picasso_sdk_test/importc/picassolitesdk/lib</span></span><br><span class="line">   export <span class="variable constant_">PICASSO_CONFIG_PATH</span>=<span class="regexp">/root/workspace</span><span class="regexp">/picasso_sdk_test/importc</span><span class="regexp">/picassolitesdk/lib</span></span><br><span class="line"></span><br><span class="line">export <span class="variable constant_">LD_LIBRARY_PATH</span>=<span class="variable">$LD_LIBRARY_PATH</span><span class="symbol">:/root/workspace/picasso_sdk/importc/picassolitesdk/lib</span></span><br><span class="line">   export <span class="variable constant_">PICASSO_CONFIG_PATH</span>=<span class="regexp">/root/workspace</span><span class="regexp">/picasso_sdk/importc</span><span class="regexp">/picassolitesdk/lib</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>5、 .&#x2F;ctest ..&#x2F;..&#x2F;image</p>
<p><img src="https://s2.loli.net/2024/09/21/Vs4QgEmqAoPUcTI.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/OgNiHRcdu1oSyCt.png"></p>
<p>加入视频流的：</p>
<p><img src="https://s2.loli.net/2024/09/21/i3bvIBnzRypLdqo.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/GaRWt2nKE7h83lL.png"></p>
<p>出现卡流的情况，明天读个视频试试</p>
<p><img src="https://s2.loli.net/2024/09/21/tTIaRP1XeDbgEvU.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/IRtVg4Pq5D23E8C.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/P4BW9RdVZ1UaFtD.png"></p>
<p>去掉所有推理的部分</p>
<p><img src="https://s2.loli.net/2024/09/21/mMRzfloC39utQLv.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/kQMV9hKHSUZ3W7j.png"></p>
<p>差不多能定位到错误所在了</p>
<p><img src="https://s2.loli.net/2024/09/21/qDuO29wNrTtGkHi.png"></p>
<p>车牌检测：</p>
<p><img src="https://s2.loli.net/2024/09/21/jAXuZFhaTgSLJzq.png"></p>
<p>22&#x2F;12&#x2F;8	（换过so后已解决）</p>
<p><img src="https://s2.loli.net/2024/09/21/HuBKvLmlksMqe5R.png"></p>
<p>失败res</p>
<p>res: {“code”:200,”data”:[],”result”:”failed”}</p>
<p>价值至上：研发要站到客户的立场上去思考问题，做客户满意的产品，把整个团队以及整个公司的智慧结晶都赋予给研发的产品，用户满意了，认可了我们产品的价值，也就是认可了我们个人的价值，用户的满意也会让我们更加有热情投入到新的产品研发上，形成正反馈。</p>
<p>专业高效：我们是一只专业的团队，有着专业的设备和科研条件，在平时的研发中也要做到专业。专业高效离不开一套标准的开发流程， 我们目前都在制定。</p>
<p>持续超越：我们做的东西都不可能是一成不变的，特别像我们电子行业，产品更新换代快， 我们更要保持学习，肯专研，一代比一代做的好。</p>
<p>实事求是：做人做事都要保证实事求是的作风，不弄虚作假，严谨做产品。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">;车牌识别</span><br><span class="line">[server]</span><br><span class="line"><span class="attribute">server_list</span>=vehicle_plate_server;</span><br><span class="line">[server_all]</span><br><span class="line"><span class="attribute">server_list_all</span>=vehicle_plate_server;muck_truck_detect_server;street_violate_detect_server;vehicle_plate_server;muck_truck_plate_server</span><br><span class="line">[device]</span><br><span class="line"><span class="attribute">dv_type</span>=RK3399pro;</span><br><span class="line">[licence]</span><br><span class="line"><span class="attribute">serial_num</span>=ncs0ggvgB7doaQj80lyWSauZR4gl8l0g1w5WAbRB+U0GSvN0hoECj2</span><br><span class="line">HSeXdDBJ0Jl7wOhlyfzAuf8HmwMjc6T9N96Kwi0TU6HB24/kcIdaXoqi3tGflkK7bH1AN0</span><br><span class="line">5vF5w1jIhIo3CcLdolGCNCMMlPwSjSiuOHK6HUkt7RodTg8sV8xsGfMNBqH5XxOK+CTibUuTfwhuCuo</span><br><span class="line">VJIrMDevbvQTwOyv7TLkPvv/alqfsJdQpHIZVr3LJmls40cNjrikX</span><br><span class="line">data.server_name = <span class="string">&quot;vehicle_plate_server:ALL&quot;</span>;</span><br><span class="line"></span><br><span class="line">;渣土车识别</span><br><span class="line">[server]</span><br><span class="line"><span class="attribute">server_list</span>=muck_truck_detect_server;</span><br><span class="line">[server_all]</span><br><span class="line"><span class="attribute">server_list_all</span>=muck_truck_detect_server;muck_truck_detect_server;street_violate_detect_server;vehicle_plate_server</span><br><span class="line">[device]</span><br><span class="line"><span class="attribute">dv_type</span>=RK3399pro;</span><br><span class="line">[licence]</span><br><span class="line"><span class="attribute">serial_num</span>=ncs0ggvgB7doaQj80lyWSbD49La/TkmPDiV0I54mxWtB7SySjv9d8rPDgO2V1nl80oEBuuG5Ogy4wLDg2M1rHSv</span><br><span class="line">l+kEn8zwbayC84dzwnDTcGaClqioRCXUXD8au0HsPnQfgg/nT5aBMLNtkUDwlFgUCIyZah3XQ6cGzH1NkcqGS18zy5cF+igJRbE</span><br><span class="line">aNXP15AUqMrg/BG7n6/+AjWYGC1iVikIv+91XVPvO+VQdnvYMBBFi2kgv6oE69j05rRVrk</span><br><span class="line">data.server_name = <span class="string">&quot;muck_truck_detect_server:ALL&quot;</span>;</span><br><span class="line"></span><br><span class="line">;渣土车车牌识别</span><br><span class="line">[server]</span><br><span class="line"><span class="attribute">server_list</span>=muck_truck_plate_server;</span><br><span class="line">[server_all]</span><br><span class="line"><span class="attribute">server_list_all</span>=muck_truck_plate_server;muck_truck_detect_server;street_violate_detect_server;vehicle_plate_server;muck_truck_plate_server</span><br><span class="line">[device]</span><br><span class="line"><span class="attribute">dv_type</span>=RK3399pro;</span><br><span class="line">[licence]</span><br><span class="line"><span class="attribute">serial_num</span>=ncs0ggvgB7doaQj80lyWSWHmovw7RshQAJ+63D5FNoaH/3Zp6iInlEDfbXMPJFbT109kv+YBHb3MEuIc</span><br><span class="line">NvDA3DBCTEv4zfRnLsrt55DmpU7O48G3vCYhXdljLvd4JogcQN2wV/XXNUwP6TuwYys1c1hCRpY97UjY7ZpfhyRCDbr</span><br><span class="line">C/bFJVPT2br+YYz9kqbKTHpGlGq3z+li89CjvnZRdas+Org/lMZDNJzQ5qsJCbPt86yVR0HbW10l9amn3DrCr</span><br><span class="line">data.server_name = <span class="string">&quot;muck_truck_plate_server:ALL&quot;</span>;</span><br><span class="line"></span><br><span class="line">;街道破损识别</span><br><span class="line">[server]</span><br><span class="line"><span class="attribute">server_list</span>=street_violate_detect_server;</span><br><span class="line">[server_all]</span><br><span class="line"><span class="attribute">server_list_all</span>=street_violate_detect_server;muck_truck_detect_server;street_violate_detect_server;vehicle_plate_server;muck_truck_plate_server</span><br><span class="line">[device]</span><br><span class="line"><span class="attribute">dv_type</span>=RK3399pro;</span><br><span class="line">[licence]</span><br><span class="line"><span class="attribute">serial_num</span>=ncs0ggvgB7doaQj80lyWSQrxBwKa5FUvvnimRufJiITjuAxLfzu0QgrHvk3pzJbiaxCyJjQs+3mGt+8</span><br><span class="line">FFdJTp7q6k6Hfh4svjDp/9kYxcXEEn+rzNqtJH4eQag0fzE28wM8k8ByGEQmSt5Vo9g6bPEu1IGZyGdCAWinQJ03JTpP</span><br><span class="line">2iy0uqlYl4VuPPbd1zy8kn2VkG0n1/8LDdDHMOqxyGKKjJIoIbkCdJjb24uZA04Udu6tuZ6OYLPM2TNbhuG0h</span><br><span class="line">data.server_name = <span class="string">&quot;street_violate_detect_server:ALL&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>ini文件不能加注释，也不能换行</p>
<p>linux 下可以使用nc 127.0.0.1 port</p>
<p>Windows下可以使用telnet 127.0.0.1 port	需要在控制面板程序中打开服务</p>
<p>libhv开始线程后，主线程不再运行，mqtt线程同理</p>
<p>单例类内变量的访问问题，都用</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">MyMqtt::get_instance<span class="function"><span class="params">()</span>-&gt;</span>类内变量</span><br></pre></td></tr></table></figure>

<p>mqtt失联后，再连接订阅的话题不丢</p>
<p>.h 与.hpp 都支持定义函数</p>
<p>join要等待子线程运行完才会接着往下运行</p>
<p>1、export LD_LIBRARY_PATH&#x3D;$LD_LIBRARY_PATH:&#x2F;root&#x2F;workspace&#x2F;edge_client_app_test&#x2F;importc&#x2F;picassosdk&#x2F;lib</p>
<p>2、ulimit -s 40960</p>
<p>3、.&#x2F;client_app</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">//version <span class="number">3.11</span><span class="number">.2</span>    +int 没问题</span><br><span class="line">json j;</span><br><span class="line">for (int i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    json t;</span><br><span class="line">    t[<span class="string">&quot;name&quot;</span>] = <span class="number">4</span> + i;</span><br><span class="line">    j[i] = t;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; j.dump(<span class="number">4</span>) &lt;&lt; endl;</span><br><span class="line">int a = j[<span class="number">0</span>][<span class="string">&quot;name&quot;</span>] + <span class="number">5</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a + <span class="number">5</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">//version <span class="number">3.9</span><span class="number">.1</span>    +int 有问题</span><br><span class="line">label_info[<span class="number">0</span>][<span class="string">&quot;rect&quot;</span>][<span class="number">0</span>] + <span class="number">5</span></span><br><span class="line">//可以强制类型转换</span><br><span class="line">(int)label_info[<span class="number">0</span>][<span class="string">&quot;rect&quot;</span>][<span class="number">0</span>] + <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>第一帧会出错：</p>
<p><img src="https://s2.loli.net/2024/09/21/2ADcZnCirdeqLEz.png"></p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCE09a24080d18fe357e21650625053fde2%E6%88%AA%E5%9B%BE.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/jqQxgozai8NwLSv.png"></p>
<p>展厅从rk3588移植到rk3399pro：</p>
<p>方法一：</p>
<p>从picasso_sdk_test的rga（包括动态库、头文件）移到工程，报错：</p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCE47809f090adf7e71119cbc4986b71769%E6%88%AA%E5%9B%BE.png"></p>
<p><img src="/./youdaonote/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/images/WEBRESOURCE223aa9ee724e51f206c70c431de433a0%E6%88%AA%E5%9B%BE.png"></p>
<p>有几点不一样，格式不一样，rk3399NCHW，u_int8</p>
<p>process文件里的函数都平替一下</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">机动车服务</span><br><span class="line">[server]</span><br><span class="line"><span class="attribute">server_list</span>=vehicle_server;</span><br><span class="line">[server_all]</span><br><span class="line"><span class="attribute">server_list_all</span>=vehicle_server;muck_truck_detect_server;street_violate_detect_server;vehicle_plate_server;muck_truck_plate_server</span><br><span class="line">[device]</span><br><span class="line"><span class="attribute">dv_type</span>=RK3588;</span><br><span class="line">[licence]</span><br><span class="line"><span class="attribute">serial_num</span>=ncs0ggvgB7doaQj80lyWScuxrojn8Qxx/4ZlGFX49xKGw75IRXHXaI0eAmoFGxqaPPI2Vm1U18dfdGJbrSHTaL6gVS3WSokZFYpwc0pJdUY9nHWwqgfuH42oWyKHgt8fNf7h4pEOj4Fn9Wxq8pwQXZj0m2yepU1+lWaIz7xrzaUgoOajAdYF0OQ2n57VPvYT1yc/kSXPxa+S3MEquPeTTA==</span><br><span class="line">data.server_name = <span class="string">&quot;vehicle_server:ALL&quot;</span>;</span><br><span class="line"></span><br><span class="line">人脸</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>边缘计算</category>
      </categories>
  </entry>
  <entry>
    <title>MicroPy——EC600</title>
    <url>/posts/1eea.html</url>
    <content><![CDATA[<ol>
<li><p>使用thonny开发，连不上板子，出现诸如：\</p>
<span id="more"></span>
<p>line 1708, in event_generate     handler(event)</p>
<p>“\thonny\shell.py”, line 433, in _handle_program_output     self._update_visible_io(None)</p>
<p>解决方案：<a href="https://bbs.01studio.cc/thread/425">解决py4G-EC600无法连接Thonny (01studio.cc)</a></p>
</li>
<li><p>定时器回调如果需要参数：</p>
<p>与c不一样，c的参数不会写在括号内</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> machine <span class="keyword">import</span> Timer</span><br><span class="line"><span class="keyword">import</span> utime</span><br><span class="line">timer0 = Timer(Timer.Timer0)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">timer0,i</span>):</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(i)</span><br><span class="line">  timer0.stop()</span><br><span class="line">timer0.start(period=<span class="number">500</span>,mode=Timer.ONE_SHOT,callback=fun(timer0,<span class="number">0</span>))</span><br><span class="line">utime.sleep_ms(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>定时器回调里面发布mqtt消息：</p>
<p>现象是我在一个PERIODIC 定时器里面再嵌套ONE_SHOT定时器，在ONE_SHOT定时器里面发布mqtt消息发送不出去，刚开始以为是定时器回调里面不能进行mqtt消息发布，或者是嵌套的太多，又或者是对栈大小有限制。</p>
<ul>
<li>PERIODIC 可以</li>
<li>ONE_SHOT 可以</li>
<li>PERIODIC 定时器里面再嵌套ONE_SHOT 可以</li>
</ul>
<p>结论：最后把疑惑一一排除后，发现是需要在主线程里加延时函数</p>
</li>
<li><p>定时器单次触发需要在回调函数里面调用stop才能在下次使用的时候触发</p>
</li>
<li><p>从MQTT返回来的消息类型都是字节流bytes，如果与字符串相比较需要解码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回的topic打印：b&#x27;/863347063146022/01/user/get&#x27;</span></span><br><span class="line"><span class="keyword">if</span> topic.decode()==TOPIC_GET:  <span class="comment">#decode默认解码为utf-8</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>项目</category>
        <category>EC600</category>
      </categories>
  </entry>
  <entry>
    <title>实现功能</title>
    <url>/posts/c888.html</url>
    <content><![CDATA[<p>ec600给单片机（用电脑串口测试）发：</p>
<span id="more"></span>

<p><img src="https://s2.loli.net/2024/09/21/gsEL6Uy78XAlBi5.png"></p>
<p>如果单片机超时未返回，ec600给mqtt发报文：</p>
<p><img src="https://s2.loli.net/2024/09/21/rvJZA2EKW3FjzVL.png"></p>
<p>如果单片机按时返回，ec600给mqtt发报文：</p>
<p><img src="https://s2.loli.net/2024/09/21/k8t3AfIjUK41HMi.png"></p>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>项目</category>
        <category>EC600</category>
      </categories>
  </entry>
  <entry>
    <title>需求分析</title>
    <url>/posts/1587.html</url>
    <content><![CDATA[<h1 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h1><span id="more"></span>

<p>GPIO29、12：输出</p>
<p>GPIO13、14：输入</p>
<ol>
<li>EC600</li>
<li>MQTT服务器</li>
<li>单片机</li>
</ol>
<h1 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h1><p>IP：123.207.63.229     94.74.106.21</p>
<p>Port：1883</p>
<p>用户名：lytwl</p>
<p>密码：P83076PF21735BPP</p>
<p>注：id用这个 SHJ00000002，00000003 其他的没有加入白名单</p>
<h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><h2 id="订阅主题"><a href="#订阅主题" class="headerlink" title="订阅主题"></a>订阅主题</h2><ol>
<li><p>&#x2F;server&#x2F;heartbeat</p>
<p>描述：MQTT服务器对EC600发送过来的心跳包，30s发送一次</p>
<p>数据格式是什么，超过30s以上未接收到心跳包需要重连还是怎么样？</p>
</li>
<li><p>&#x2F;设备ID&#x2F;对应类型设备&#x2F;user&#x2F;get</p>
<p>这个主题要接受什么数据，格式是什么，作用是什么，设备类型是什么？</p>
</li>
</ol>
<h2 id="发布主题"><a href="#发布主题" class="headerlink" title="发布主题"></a>发布主题</h2><ol>
<li><p>&#x2F;设备ID&#x2F;对应类型设备&#x2F;user&#x2F;update</p>
<p>描述：EC600对MQTT服务器发送心跳数据包</p>
<p>起始字节	名称	数据类型	描述	备注<br>0	Head(帧头)	BYTE	0xAA<br>1	Length(长度)	BYTE	0x13<br>2	Index (索引)	BYTE	0x01	标识MQTT设备<br>3	CMD(命令)	BYTE	0x01<br>4	Data(数据)	BYTE[16]   16字节	数据区详见1.1.1<br>20	Check(校验)	BYTE	异或校验码<br>21	End(帧尾)	BYTE	0xDD<br>数据区说明<br>数据字段	名称	数据类型	备注<br>Data[0]	网络强度	BYTE	EC600网络强度，如网络强度10进制——&gt;16进制，20——&gt;0x14<br>Data[1]-Data[3]	链接状态	BYTE	每次心跳前都发一次查询链接状态（串口），查询链接没回复默认为链接失败，如：链接成功00000001：返回唯一标识（低位在前），链接失败：000000<br>Data[4]-Data[15]	预留	BYTE	用0x00补充</p>
<p>数据 例子 AA 13 01 01 10 00 00 00 01 0X00 0X00 0X00 0X00 0X00 0X00  0X00 0X00 0X00 0X00 0X00 0X00 02 DD</p>
</li>
</ol>
<h1 id="单片机与EC600"><a href="#单片机与EC600" class="headerlink" title="单片机与EC600"></a>单片机与EC600</h1><p>单片机与EC600的串口通讯协议的配置是什么？</p>
<p>波特率、停止位这些</p>
<p>每10sEC600主动查询单片机状发送一包数据，单片机返回</p>
<h2 id="EC600to单片机"><a href="#EC600to单片机" class="headerlink" title="EC600to单片机"></a>EC600to单片机</h2><p>起始字节	名称	数据类型	描述	备注<br>0	Head(帧头)	BYTE	0xAA<br>1	Length(长度)	BYTE	0x0B<br>2	Index (索引)	BYTE	0x01	标识ec600<br>3	CMD(命令)	BYTE	0x01</p>
<ul>
<li>Data(数据)	BYTE[n]	-<br>5+n	Check(校验)	BYTE	异或校验码<br>6+n	End(帧尾)	BYTE	0xDD</li>
</ul>
<p>示例：<br>帧头           			0XAA<br>长度    				0X0B<br>索引   				0X01<br>CMD   命令			0X01<br>数据<br>Data[0]-Data[7]8位EC600设备唯一码        0X00 0X00 0X00 0X00 0X00 0X00 0X00 0X01<br>Check(校验)(长度到数据区进行异或校验	0X0A<br>End(帧尾)                               	0XDD</p>
<h2 id="单片机toEC600"><a href="#单片机toEC600" class="headerlink" title="单片机toEC600"></a>单片机toEC600</h2><p>起始字节	名称	数据类型	描述	备注<br>0	Head(帧头)	BYTE	0xAA<br>1	Length(长度)	BYTE	0x05<br>2	Index (索引)	BYTE	0x01	标识支付盒子<br>3	CMD(命令)	BYTE	0x01</p>
<ul>
<li>Data(数据)	BYTE[n]	-<br>5+n	Check(校验)	BYTE	异或校验码<br>6+n	End(帧尾)	BYTE	0xDD</li>
</ul>
<p>4.2.1、数据区说明<br>数据字段	名称	数据类型	备注<br>Data[0]-Data[1]	登录标识	BYTE	在服务器端设置对应的设备类型<br>5+n	Check(校验)	BYTE		异或校验码<br>6+n	End(帧尾)	BYTE		0xDD</p>
<p>示例：<br>帧头           				0XAA<br>长度    					0X05<br>索引   					0X01<br>CMD   命令				0X01<br>数据<br>Data[0]-Data[1]	服务器后台设置对应类型设备     0X00 0X01<br>Check(校验)(长度到数据区进行异或校验		0X04<br>End(帧尾)                                      	0XDD</p>
<p>aa 05 01 01 00 01 04 dd</p>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>项目</category>
        <category>EC600</category>
      </categories>
  </entry>
  <entry>
    <title>T9与T8通讯协议</title>
    <url>/posts/3186.html</url>
    <content><![CDATA[<h1 id="一、手机端界面显示："><a href="#一、手机端界面显示：" class="headerlink" title="一、手机端界面显示："></a>一、手机端界面显示：</h1><span id="more"></span>



<p>T8上报的数据：  左右一对光敏的数值、T8状态位</p>
<p>下发给T8的命令：左转、右转、复位</p>
<p>现在的界面：</p>
<p><img src="https://s2.loli.net/2024/09/21/tO9spTGdl7j8DNb.jpg"></p>
<h1 id="二、数据流"><a href="#二、数据流" class="headerlink" title="二、数据流"></a>二、数据流</h1><p>1、数据流向：</p>
<p><img src="https://s2.loli.net/2024/09/21/onVe3IbKLUgt7Hi.png"></p>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>项目</category>
        <category>T9</category>
      </categories>
  </entry>
  <entry>
    <title>T9工程说明性文档</title>
    <url>/posts/9482.html</url>
    <content><![CDATA[<h1 id="T9工程说明性文档"><a href="#T9工程说明性文档" class="headerlink" title="T9工程说明性文档"></a>T9工程说明性文档</h1><span id="more"></span>



<h1 id="框架介绍"><a href="#框架介绍" class="headerlink" title="框架介绍"></a>框架介绍</h1><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><p>主要放初始化相关的内容</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//启动任务</span></span><br><span class="line">  <span class="comment">//任务句柄要统一，不允许出现同一个任务句柄不同命的现象</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">begin_task</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//消息队列、互斥信号量初始化</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">//串口接受任务,优先级10 </span></span><br><span class="line">    <span class="built_in">xTaskCreatePinnedToCore</span>(uart_event_task, <span class="string">&quot;uart_event_task&quot;</span>, <span class="number">8192</span>, <span class="literal">NULL</span>, <span class="number">10</span>, &amp;uartTask, <span class="number">0</span>);  </span><br><span class="line">    <span class="comment">//控灯任务，优先级9</span></span><br><span class="line">    <span class="built_in">xTaskCreatePinnedToCore</span>(control_led_task, <span class="string">&quot;control_led_task&quot;</span>, <span class="number">8192</span>, <span class="literal">NULL</span>, <span class="number">9</span>, &amp;controlIedTask, <span class="number">0</span>); </span><br><span class="line">    <span class="comment">//移动侦测任务,优先级8</span></span><br><span class="line">    <span class="built_in">xTaskCreatePinnedToCore</span>(camera_task, <span class="string">&quot;camera_task&quot;</span>, <span class="number">4096</span>, <span class="literal">NULL</span>, <span class="number">8</span>, &amp;cameraTask, <span class="number">0</span>); </span><br><span class="line">    <span class="comment">//wifi开启任务</span></span><br><span class="line">    <span class="built_in">xTaskCreatePinnedToCore</span>(wifi_task, <span class="string">&quot;wifi_task&quot;</span>, <span class="number">4096</span>, <span class="literal">NULL</span>, <span class="number">7</span>, &amp;wifiTtask, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//故障上报任务，优先级6</span></span><br><span class="line">    <span class="built_in">xTaskCreatePinnedToCore</span>(fault_report_task, <span class="string">&quot;fault_task&quot;</span>, <span class="number">4096</span>, <span class="literal">NULL</span>, <span class="number">6</span>, &amp;faultReportTask, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//周期上报任务，优先级5</span></span><br><span class="line">    <span class="built_in">xTaskCreatePinnedToCore</span>(period_report_task, <span class="string">&quot;period_task&quot;</span>, <span class="number">4096</span>, <span class="literal">NULL</span>, <span class="number">5</span>, &amp;periodReportTask, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外设初始化</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">hardware_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//串口初始化</span></span><br><span class="line">    <span class="comment">//pwm初始化</span></span><br><span class="line">    <span class="comment">//adc初始化</span></span><br><span class="line">    <span class="comment">//ml302配置 MAC地址获取</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//系统初始化</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">system_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//等待系统稳定</span></span><br><span class="line">    <span class="comment">//外设初始化</span></span><br><span class="line">    <span class="comment">//变量初始化</span></span><br><span class="line">    <span class="comment">//启动任务</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">void</span> <span class="title">app_main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="comment">//系统初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="task："><a href="#task：" class="headerlink" title="task："></a>task：</h2><p>  把关于任务调度的任务函数专门放到一起，便于对任务整体进行管理。</p>
<p>目前一共划分为六个任务：</p>
<ol>
<li>串口接受任务,优先级10</li>
</ol>
<p> 	</p>
<p>接收上位机发送过来的命令，并解析，改变标志位 或 发送队列消息 来执行上位机发送过来的命令。</p>
<ol>
<li>控灯任务，,优先级9</li>
</ol>
<p>对四种控灯命令（太阳能 、 移动侦测 、 绝对时间 、 手动控灯）的操作。</p>
<ol>
<li>   移动侦测任务,优先级8</li>
</ol>
<p>获取摄像头拍摄的图片帧，判断是否发生了移动侦测，如果发生了移动侦测，则发送消息队列给移动侦测控灯（如果当前策略不是移动侦测也收不到），平且拍照。</p>
<ol>
<li>   wifi开启或关闭任务，优先级7</li>
</ol>
<p>收到 打开或关闭 wifi的消息则执行，打开或关闭wifi的操作。</p>
<ol>
<li>    故障上报任务，优先级6</li>
</ol>
<p>如果故障flag改变，则给上位机上报故障信息。</p>
<ol>
<li>    周期上报任务，优先级5</li>
</ol>
<p>每隔周期间隔则给上位机周期上报一次详细设备信息，上位机返回时间戳，如果与本地的有误差则更新。</p>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>项目</category>
        <category>T9</category>
      </categories>
  </entry>
  <entry>
    <title>问题</title>
    <url>/posts/f2ea.html</url>
    <content><![CDATA[<h6 id="22-7-25-22-729："><a href="#22-7-25-22-729：" class="headerlink" title="22&#x2F;7&#x2F;25~22&#x2F;729："></a><strong>22&#x2F;7&#x2F;25~22&#x2F;729</strong>：</h6><span id="more"></span>

<ol>
<li><p>控灯协议已清晰，mqtt协议初步制定完成，设备订阅的mqtt话题分为分组话题和独立话题，便于整体控制和单独控制（已测试），对cat1发送命令，设定超时次数，超过这个次数cat1还没返回应答，就退出，cat1初始化失败，避免没收到回应就一直往下不进行的问题。</p>
</li>
<li><p>移动侦测出现瓶颈（暗光情况下，检测不到人的移动），找到解决方案：在灯杆底部装热红外释传感器（pass）；买更高端摄像头，带自动对焦和红外补光，更高端主控，把这些更高端的东西发挥出最大的作用这也是下周的主要任务；</p>
</li>
<li><p>主函数基本框架已大致搭好，新框架更便于测试，想测什么就注释掉其他任务，保留要测的任务，制定的任务更加合理，保留必要的任务，不必要的都封装成一个个的函数，供任务调用。</p>
</li>
</ol>
<p>1、我用的是char类型：</p>
<p><img src="https://s2.loli.net/2024/09/21/5y1JpvY9oGhAuxk.png"></p>
<p>在这个环境里，char是无符号</p>
<p>2、临界区保护</p>
<p><img src="https://s2.loli.net/2024/09/21/JPdSacuYviOeXRD.png"></p>
<p>刚开始没有用参数，不知道为什么不行：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">taskENTER_CRITICAL</span>();</span><br><span class="line"><span class="built_in">taskEXIT_CRITICAL</span>();</span><br></pre></td></tr></table></figure>

<p>加参数后就行了：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">portMUX_TYPE mmux <span class="punctuation">=</span> portMUX_INITIALIZER_UNLOCKED<span class="punctuation">;</span></span><br><span class="line">taskENTER_CRITICAL<span class="punctuation">(</span><span class="meta">&amp;mmux);</span></span><br><span class="line">taskEXIT_CRITICAL<span class="punctuation">(</span><span class="meta">&amp;mmux);</span></span><br></pre></td></tr></table></figure>

<p>3、wifi问题</p>
<p> 连接后断开出问题：</p>
<p><img src="https://s2.loli.net/2024/09/21/hd9HP4UcfIjXE1s.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/D4bPhLrpTyRsCNm.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/ky8RoDGrO75bBKe.png"></p>
<p>放上面，关闭wifi没问题，但是再打开不开启websocket</p>
<p><img src="https://s2.loli.net/2024/09/21/ha6wkqLjFit7RVK.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/qakXoHFwc4JUsLb.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/8T6kgMwSFVGdbx5.png"></p>
<p><img src="https://s2.loli.net/2024/09/21/h6mKfVqAtp91ZaF.png"></p>
<p>有设备加入：</p>
<p><img src="https://s2.loli.net/2024/09/21/c2kxOK96pJmBh4W.png"></p>
<p>又建立了一个url，但是在发送图片过程中退出这个界面，接收不到</p>
<p><img src="https://s2.loli.net/2024/09/21/Q35CAxLPWZtSEDV.png"></p>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>项目</category>
        <category>T9</category>
      </categories>
  </entry>
</search>
